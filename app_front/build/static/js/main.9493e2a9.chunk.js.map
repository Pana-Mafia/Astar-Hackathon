{"version":3,"sources":["firebase.js","Top.js","Sample.js","Team.js","App.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseFirestore","getAnalytics","getFirestore","Modal","setAppElement","Top","useState","currentAccount","setCurrentAccount","contentValue","setContentValue","dueValue","setDueValue","allTasks","setAllTasks","bountyValue","setBountyValue","expressionValue","setExpressionValue","riwarderValue","setRiwarderValue","outputValue","setOutputValue","React","idValue","setValue","indexValue","setIndexValue","textValue","setTextValue","selectedItem","setSelectedItem","allLinks","setLinks","contractAddress","ContractABI","abi","setUsers","modalStyle","overlay","position","top","left","backgroundColor","content","color","textAlign","right","bottom","borderRadius","padding","useEffect","usersCollectionRef","collection","onSnapshot","querySnapshot","docs","map","doc","data","id","handleTask","a","newDoc","console","log","setDoc","user","due","name","setText","index","usersDocumentRef","getDocs","query","where","toString","then","snapshot","forEach","setOutput","taskId","usersLinkRef","push","link","getAllTasks","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","taskContract","Contract","tasks","tasksCleaned","task","bounty","done","onNewTask","prevState","on","off","onDoneTask","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","getBalance","address","contractBalance","utils","formatEther","options","value","parseEther","createTask","taskTxn","hash","wait","sendRiward","output","addLink","className","role","onClick","isOpen","style","onRequestClose","placeholder","type","onChange","e","target","slice","i","Sample","to","Component","Team","App","exact","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAqBMA,EAAMC,YAXW,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBAMNC,GADKC,YAAaV,GACEW,YAAaX,I,OCR9CY,IAAMC,cAAc,SACpB,IA+hBeC,EA/hBH,WAGR,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAGA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAGA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAGA,EAAgCN,mBAAS,IAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAGA,EAAsCR,mBAAS,IAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KAGA,EAA8CV,mBAAS,IAAvD,mBAAOW,EAAP,KAAwBC,EAAxB,KAGA,EAA0CZ,mBAAS,IAAnD,mBAAOa,EAAP,KAAsBC,EAAtB,KAGA,EAAsCd,mBAAS,IAA/C,mBAAOe,EAAP,KAAoBC,EAApB,KAGA,EAAiCC,IAAMjB,UAAS,GAAhD,mBAGA,GAHA,UAG4BiB,IAAMjB,SAAS,MAA3C,mBAAOkB,EAAP,KAAgBC,EAAhB,KAGA,EAAoCF,IAAMjB,SAAS,GAAnD,mBAAOoB,EAAP,KAAmBC,GAAnB,KACA,GAAkCJ,IAAMjB,SAAS,GAAjD,qBAAOsB,GAAP,MAAkBC,GAAlB,MACA,GAAwCvB,mBAAS,IAAjD,qBAAOwB,GAAP,MAAqBC,GAArB,MAGA,GAA6BzB,mBAAS,IAAtC,qBAAO0B,GAAP,MAAiBC,GAAjB,MAKMC,GAAkB,6CAGlBC,GAAcC,EAAIA,IAGxB,GAA0B9B,mBAAS,IAAnC,qBAAc+B,IAAd,aAGMC,GAAa,CACfC,QAAS,CACLC,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,gBAAiB,oBAGrBC,QAAS,CACLC,MAAO,QACPC,UAAW,SACXN,SAAU,WACVC,IAAK,QACLC,KAAM,QACNK,MAAO,QACPC,OAAQ,QACRL,gBAAiB,gBACjBM,aAAc,OACdC,QAAS,WAMjBC,qBAAU,WACN,IAAMC,EAAqBC,YAAWrD,EAAmB,UAOzD,OALcsD,YAAWF,GAAoB,SAACG,GAC1ClB,GACIkB,EAAcC,KAAKC,KAAI,SAACC,GAAD,mBAAC,eAAcA,EAAIC,QAAnB,IAA2BC,GAAIF,EAAIE,cAKnE,IAGH,IAAMC,GAAU,uCAAG,8BAAAC,EAAA,6DAETV,EAAqBC,YAAWrD,EAAmB,QACnD+D,EAASL,YAAIN,GAAoBQ,GACvCI,QAAQC,IAAIF,GAJG,SAKWG,YAAOR,YAAIN,EAAoBW,GAAS,CAE9DI,KAAM5D,EACNqC,QAASnC,EACT2D,IAAKzD,EACL0D,KAAMpD,EACN2C,GAAIG,IAXO,yDAAH,qDAeVO,GAAO,uCAAG,WAAOC,GAAP,eAAAT,EAAA,6DACNU,EAAmBnB,YAAWrD,EAAmB,QAD3C,SAENyE,YAAQC,YAAMF,EAAkBG,YAAM,UAAW,KAAM9D,EAAS0D,GAAO3B,SAAU+B,YAAM,MAAO,KAAM9D,EAAS0D,GAAOH,IAAIQ,cAAcC,MAAK,SAAAC,GAC7IA,EAASC,SAAQ,SAAArB,GACb7B,GAAa6B,EAAIC,OAAOU,YAJpB,2CAAH,sDAWPW,GAAS,uCAAG,WAAOT,GAAP,mBAAAT,EAAA,6DACRU,EAAmBnB,YAAWrD,EAAmB,QACnDiF,EAAS,EAFC,SAGRR,YAAQC,YAAMF,EAAkBG,YAAM,UAAW,KAAM9D,EAAS0D,GAAO3B,SAAU+B,YAAM,MAAO,KAAM9D,EAAS0D,GAAOH,IAAIQ,cAAcC,MAAK,SAAAC,GAC7IA,EAASC,SAAQ,SAAArB,GACbuB,EAASvB,EAAIC,OAAOC,GACpBI,QAAQC,IAAIgB,SANN,cAURC,EAAe7B,YAAWrD,EAAD,eAA4BiF,EAA5B,YAVjB,SAYRR,YAAQC,YAAMQ,IAAeL,MAAK,SAAAC,GACpCA,EAASC,SAAQ,SAAArB,GAEbM,QAAQC,IAAIjC,IACZA,GAASmD,KAAKzB,EAAIC,OAAOyB,MACzBnD,GAASD,UAjBH,2CAAH,sDAuBTqD,GAAW,uCAAG,wCAAAvB,EAAA,2DACKwB,OAAbC,EADQ,EACRA,SADQ,UAIRA,EAJQ,wBAKFC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClBC,EAAe,IAAIL,IAAOM,SAAS7D,GAAiBC,GAAayD,GAP/D,SAQYE,EAAaT,cARzB,OAQFW,EARE,OASFC,EAAeD,EAAMvC,KAAI,SAAAyC,GAC3B,MAAO,CACH/B,KAAM+B,EAAK/B,KACXC,IAAK8B,EAAK9B,IACVxB,QAASsD,EAAKtD,QACduD,OAAQD,EAAKC,OACbC,KAAMF,EAAKE,SAGnBtF,EAAYmF,GAlBJ,wBAoBRjC,QAAQC,IAAI,kCApBJ,0DAuBZD,QAAQC,IAAR,MAvBY,0DAAH,qDA4BjBd,qBAAU,WACN,IAAI2C,EAEEO,EAAY,SAAClC,EAAMC,EAAKxB,EAASuD,EAAQC,GAC3CpC,QAAQC,IAAI,UAAWE,EAAMC,EAAKxB,EAASuD,EAAQC,GAEnDtF,GAAY,SAAAwF,GAAS,4BACdA,GADc,CAEjB,CACInC,KAAMA,EACNC,IAAKA,EACLxB,QAASA,EACTuD,OAAQA,EACRC,KAAMA,SAKlB,GAAId,OAAOC,SAAU,CACjB,IACMK,EADW,IAAIH,IAAOC,UAAUC,aAAaL,OAAOC,UAClCM,aAExBC,EAAe,IAAIL,IAAOM,SAAS7D,GAAiBC,GAAayD,IACpDW,GAAG,UAAWF,GAG/B,OAAO,WACCP,GACAA,EAAaU,IAAI,UAAWH,MAGrC,IAGHlD,qBAAU,WACN,IAAI2C,EAEEW,EAAa,SAACtC,EAAMI,GACtBP,QAAQC,IAAI,QAASE,EAAMI,IAI/B,GAAIe,OAAOC,SAAU,CACjB,IACMK,EADW,IAAIH,IAAOC,UAAUC,aAAaL,OAAOC,UAClCM,aAExBC,EAAe,IAAIL,IAAOM,SAAS7D,GAAiBC,GAAayD,IACpDW,GAAG,WAAYE,GAGhC,OAAO,WACCX,GACAA,EAAaU,IAAI,WAAYC,MAGtC,IAIH,IAAMC,GAAwB,uCAAG,kCAAA5C,EAAA,wEAEJwB,QAAbC,EAFiB,EAEjBA,UAIJvB,QAAQC,IAAI,6BAA8BsB,GAF1CvB,QAAQC,IAAI,gCAJS,SASFsB,EAASoB,QAAQ,CAAEC,OAAQ,iBATzB,OAUD,KADlBC,EATmB,QAUZC,QACHC,EAAUF,EAAS,GACzB7C,QAAQC,IAAI,+BAAgC8C,GAC5CvG,EAAkBuG,GAClB1B,MAEArB,QAAQC,IAAI,+BAhBS,gDAmBzBD,QAAQC,IAAR,MAnByB,yDAAH,qDAuBxB+C,GAAa,uCAAG,gCAAAlD,EAAA,oEAEOwB,OAAbC,EAFM,EAENA,SAFM,uBAIV0B,MAAM,iBAJI,0CAOS1B,EAASoB,QAAQ,CAAEC,OAAQ,wBAPpC,OAORC,EAPQ,OAQd7C,QAAQC,IAAI,cAAe4C,EAAS,IARtB,kDAUd7C,QAAQC,IAAR,MAVc,0DAAH,qDAebiC,GAAI,uCAAG,0CAAApC,EAAA,oEAEgBwB,SAAbC,EAFH,EAEGA,UAFH,wBAIKC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClBC,EAAe,IAAIL,IAAOM,SAAS7D,GAAiBC,GAAayD,GANtE,SAS2BJ,EAAS0B,WACjCpB,EAAaqB,SAVhB,cASGC,EATH,OAcDpD,QAAQC,IACJ,oBACAwB,IAAO4B,MAAMC,YAAYF,IAIvBG,EAAU,CAAEC,MAAO/B,IAAO4B,MAAMI,WAAW1G,IApBhD,UAqBqB+E,EAAa4B,WAAWnH,EAAgBI,EAAUF,EAAc8G,GArBrF,eAqBKI,EArBL,OAsBD3D,QAAQC,IAAI,YAAa0D,EAAQC,MAtBhC,UAuBKD,EAAQE,OAvBb,QAwBD7D,QAAQC,IAAI,YAAa0D,EAAQC,MAxBhC,wBA0BD5D,QAAQC,IAAI,kCA1BX,0DA6BLD,QAAQC,IAAR,MA7BK,0DAAH,qDAkCJmC,GAAI,uCAAG,WAAO7B,EAAOpD,GAAd,2BAAA2C,EAAA,yDACTE,QAAQC,IAAIM,IACiB,IAAzB1D,EAAS0D,GAAO6B,MAChBa,MAAM,SAAD,OAAKpG,EAAS0D,GAAO3B,QAArB,iKAHA,WAMgB0C,SAAbC,EANH,EAMGA,UANH,wBAQKC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClBC,EAAe,IAAIL,IAAOM,SAAS7D,GAAiBC,GAAayD,GAVtE,UAa2BJ,EAAS0B,WACjCpB,EAAaqB,SAdhB,eAaGC,EAbH,OAgBDpD,QAAQC,IACJ,oBACAwB,IAAO4B,MAAMC,YAAYF,IAlB5B,UAsBqBtB,EAAagC,WAAWvD,EAAOpD,GAtBpD,eAsBKwG,EAtBL,OAuBD3D,QAAQC,IAAI,YAAa0D,EAAQC,MAvBhC,UAwBKD,EAAQE,OAxBb,QAyBD7D,QAAQC,IAAI,YAAa0D,EAAQC,MAGjC5D,QAAQC,IACJ,oBACAwB,IAAO4B,MAAMC,YAAYF,IA9B5B,wBAkCDpD,QAAQC,IAAI,kCAlCX,0DAqCLD,QAAQC,IAAR,MArCK,0DAAH,wDA0CJ8D,GAAM,uCAAG,WAAOrG,GAAP,eAAAoC,EAAA,sDAGXE,QAAQC,IAAIvC,GACN8C,EAAmBnB,YAAWrD,EAAmB,QACvDyE,YAAQC,YAAMF,EAAkBG,YAAM,UAAW,KAAM9D,EAASa,GAAYkB,SAAU+B,YAAM,MAAO,KAAM9D,EAASa,GAAY0C,IAAIQ,cAAcC,MAAK,SAAAC,GACjJA,EAASC,SAAQ,SAAArB,GACbM,QAAQC,IAAIpD,EAASa,GAAYkB,SAEjCnB,EAASiC,EAAIC,OAAOC,UATjB,2CAAH,sDAgBNoE,GAAO,uCAAG,WAAOxG,GAAP,iBAAAsC,EAAA,6DAENoB,EAAe7B,YAAWrD,EAAD,eAA4BwB,EAA5B,YAC/BwC,QAAQC,IAAR,eAAoBzC,EAApB,YACAwC,QAAQC,IAAIiB,GAGNnB,EAASL,YAAIwB,GAActB,GACjCI,QAAQC,IAAIF,GARA,SAScG,YAAOR,YAAIwB,EAAcnB,GAAS,CACxDH,GAAIG,EACJqB,KAAM/D,IAXE,yDAAH,sDAmBb,OAJA8B,qBAAU,WACNuD,OACD,IAGC,qBAAKuB,UAAU,gBAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,qBAAKA,UAAU,SAAf,SACI,qBAAIA,UAAU,wBAAd,UACI,sBAAMC,KAAK,MAAM,aAAW,YAA5B,0BADJ,iCAIJ,qBAAKD,UAAU,MAAf,mGASE1H,GACE,wBAAQ0H,UAAU,aAAaE,QAASnB,GAAxC,4BAKHzG,GACG,wBAAQ0H,UAAU,aAAaE,QAASnB,GAAxC,8BAIHzG,GACG,wBAAQ0H,UAAU,aAAaE,QAAS,WACpCpG,GAAgB,WADpB,8DAOJ,eAAC,IAAD,CAAOqG,OAAQ,WAAatG,GAAcuG,MAAO/F,GAAYgG,eAAgB,kBAAMvG,GAAgB,KAAnG,UACI,sEAICxB,GAAmB,0BAAU8D,KAAK,cAC/BkE,YAAY,2EACZC,KAAK,OACL5E,GAAG,UACH4D,MAAO/G,EACPgI,SAAU,SAAAC,GAAC,OAAIhI,EAAgBgI,EAAEC,OAAOnB,UAC3C,uBAEAjH,GAAmB,0BAAU8D,KAAK,cAC/BkE,YAAY,qEACZN,UAAU,cACVO,KAAK,OACL5E,GAAG,UACH4D,MAAO7G,EACP8H,SAAU,SAAAC,GAAC,OAAI9H,EAAY8H,EAAEC,OAAOnB,UACvC,uBAEAjH,GAAmB,0BAAU8D,KAAK,cAC/BkE,YAAY,oHACZC,KAAK,OACL5E,GAAG,UACH4D,MAAOzG,EACP0H,SAAU,SAAAC,GAAC,OAAI1H,EAAe0H,EAAEC,OAAOnB,UAC1C,uBAED,0BAAUnD,KAAK,cACXkE,YAAY,6FACZC,KAAK,OACL5E,GAAG,aACH4D,MAAOvG,EACPwH,SAAU,SAAAC,GAAC,OAAIxH,EAAmBwH,EAAEC,OAAOnB,UAC/C,uBACCjH,GACG,wBAAQ0H,UAAU,aAAaE,QAAS,WACpCtE,KACAqC,MAFJ,iEAQP3F,GACGM,EAAS+H,MAAM,GAAGnF,KAAI,SAACyC,EAAM3B,GACzB,OACI,sBAAiB0D,UAAU,QAA3B,UAEI,yBAAQA,UAAU,WAAWE,QAAS,WAClCxG,GAAc4C,GACdD,GAAQC,GACRS,GAAUT,GAEVxC,GAAgB,QAEhBgG,GAAOxD,IAPX,iCASU2B,EAAK/B,KAAK,uBATpB,iBAUS+B,EAAK9B,IAAIQ,WAAW,uBAV7B,uBAWUsB,EAAKtD,QAAQ,uBAXvB,iBAYS6C,IAAO4B,MAAMC,YAAYpB,EAAKC,QAZvC,QAYoD,uBAZpD,iBAaSD,EAAKE,KAAKxB,WAAW,0BAI9B,cAAC,IAAD,CAAOwD,OAAQ,SAAWtG,GAAcuG,MAAO/F,GAAYgG,eAAgB,WACvEvG,GAAgB,IAChBE,GAAS,KAFb,SAII,sBAAK2B,GAAG,UAAR,UAII,gEAAS,0BACT,sBAAKqE,UAAU,QAAf,uDACW,uBACP,sBAAKA,UAAU,OAAf,cAAwBpH,EAASa,GAAYyC,QAFjD,gBAGO,uBAHP,IAGc,qBAAK8D,UAAU,OAAf,SAAuBpH,EAASa,GAAY0C,IAAIQ,aAH9D,sBAIQ,sBAAKqD,UAAU,OAAf,cAAwBpH,EAASa,GAAYkB,WAJrD,4BAKS,sBAAKqF,UAAU,OAAf,cAAwBrG,MALjC,gBAMO,sBAAKqG,UAAU,OAAf,cAAwBxC,IAAO4B,MAAMC,YAAYzG,EAASa,GAAYyE,QAAtE,WANP,iBAOQ,qBAAK8B,UAAU,OAAf,SAAuBpH,EAASa,GAAY0E,KAAKxB,aAPzD,sBASI,8BACK5C,GAASyB,KAAI,SAAC2B,EAAMyD,GAAP,OAAa,qBAAaZ,UAAU,OAAvB,SAA+B7C,GAArByD,WAM7C,0BAAUxE,KAAK,cACXkE,YAAY,+DACZC,KAAK,OACL5E,GAAG,SACH4D,MAAOnG,EACPoH,SAAU,SAAAC,GAAC,OAAIpH,EAAeoH,EAAEC,OAAOnB,UAC3C,uBACA,wBAAQS,UAAU,aAAaE,QAAS,WACpCJ,GAAOrG,GACPsC,QAAQC,IAAI,WAAYzC,GACxBwG,GAAQxG,IAHZ,kDAOA,uBACA,0BAAU6C,KAAK,cACXkE,YAAY,+JACZC,KAAK,OACL5E,GAAG,SACH4D,MAAOrG,EACPsH,SAAU,SAAAC,GAAC,OAAItH,EAAiBsH,EAAEC,OAAOnB,UAC7C,uBACA,wBAAQS,UAAU,aAAaE,QAAS,kBAAM/B,GAAK7B,EAAOpD,IAA1D,4CACA,uBACA,uBACA,wBAAQgH,QAAS,WACbpG,GAAgB,IAChBE,GAAS,KAFb,gCArEFsC,Y,4BCxdhCuE,E,4JAEF,WACI,OACI,0CAEI,uBACA,cAAC,IAAD,CAAMC,GAAE,IAAR,uBAGA,uBACA,uBAPJ,UASI,uBACA,cAAC,IAAD,CAAMA,GAAE,IAAR,8B,GAdKxH,IAAMyH,WAqBZF,ICgCAG,EAlDF,WACT,MAAwC3I,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA4CJ,mBAAS,IAArD,mBAGMuG,GAHN,UACqBvB,OAAbC,SAEkBoB,QAAQ,CAAEC,OAAQ,kBAC5C,GAAwB,IAApBC,EAASC,OAAc,CACvB,IAAMC,EAAUF,EAAS,GACzB7C,QAAQC,IAAI,+BAAgC8C,QAG5C/C,QAAQC,IAAI,+BAEhB,OACI,qBAAKgE,UAAU,gBAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,qBAAKA,UAAU,SAAf,4CAGA,qBAAKA,UAAU,MAAf,kGAGA,uBAPJ,UASI,uBACA,cAAC,IAAD,CAAMc,GAAE,IAAR,uBACA,uBAXJ,UAcI,uBACA,cAAC,IAAD,CAAMA,GAAE,UAAR,0BACA,uBAEA,wBAAQd,UAAU,aAAaE,QAAS,KAAxC,8DAGA,uBACA,0BAAU9D,KAAK,cACXkE,YAAY,2EACZC,KAAK,OACL5E,GAAG,UACH4D,MAAO/G,EACPgI,SAAU,SAAAC,GAAC,OAAIhI,EAAgBgI,EAAEC,OAAOnB,gBCiS7C0B,EAnUH,WACV,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,QAAS,cAAC,EAAD,MAC/B,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,UAAUC,QAAS,cAAC,EAAD,MACrC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,QAAQC,QAAS,cAAC,EAAD,YCf3CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.9493e2a9.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { useState } from \"react\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getFirestore } from 'firebase/firestore';\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDEvfuMijOI8OFYj2EujNEWssfdGOR_FDM\",\n    authDomain: \"astar-hackathon.firebaseapp.com\",\n    projectId: \"astar-hackathon\",\n    storageBucket: \"astar-hackathon.appspot.com\",\n    messagingSenderId: \"96662703318\",\n    appId: \"1:96662703318:web:49bde86c285e1754698d77\",\n    measurementId: \"G-F58GD1K2KW\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nexport const firebaseFirestore = getFirestore(app);","import React, { useEffect, useState } from \"react\";\nimport { onSnapshot } from \"firebase/firestore\"\nimport { Link } from 'react-router-dom';\nimport './App.css';\nimport { ethers } from \"ethers\";\n// ABIのインポート\nimport abi from './utils/CreateTask.json';\n\n// モーダル\nimport Modal from \"react-modal\";\n\n// Firebase関係\nimport { doc, setDoc, collection, getDocs, query, where } from 'firebase/firestore';\nimport { firebaseFirestore } from './firebase';\n\nModal.setAppElement(\"#root\");\nconst Top = () => {\n\n    // ユーザーのウォレット保存用状態変数\n    const [currentAccount, setCurrentAccount] = useState(\"\");\n\n    // メッセージ保存用状態変数\n    const [contentValue, setContentValue] = useState(\"\")\n\n    // 期日保存用状態変数\n    const [dueValue, setDueValue] = useState(\"\")\n\n    // tasks保存用状態変数\n    const [allTasks, setAllTasks] = useState([]);\n\n    // 報酬額保存用状態変数\n    const [bountyValue, setBountyValue] = useState([]);\n\n    // タスク詳細保存用状態変数\n    const [expressionValue, setExpressionValue] = useState([]);\n\n    // 報酬送付先保存用状態変数\n    const [riwarderValue, setRiwarderValue] = useState([]);\n\n    // 成果物保存用状態変数\n    const [outputValue, setOutputValue] = useState([]);\n\n    // モーダル\n    const [modalIsOpen, setIsOpen] = React.useState(false);\n\n    // タスクID保存用状態変数\n    const [idValue, setValue] = React.useState(\"0\");\n\n    // モーダル表示用インデックス・コンテンツ保存\n    const [indexValue, setIndexValue] = React.useState(0);\n    const [textValue, setTextValue] = React.useState(0);\n    const [selectedItem, setSelectedItem] = useState(\"\")\n\n    // 成果物一覧保存用配列\n    const [allLinks, setLinks] = useState([]);\n\n    // Astarアドレス保存用\n    // const contractAddress = \"0x980a80De95bc528b6e413516F881B78F1e474F41\"\n    // rinkeby保存用\n    const contractAddress = \"0x5617b6BA58A2fcA6969B0e75A05E21C1A5840F8a\"\n\n    // ABIの参照\n    const ContractABI = abi.abi;\n\n    // Firebase表示用\n    const [users, setUsers] = useState([]);\n\n    // モーダルスタイル\n    const modalStyle = {\n        overlay: {\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            backgroundColor: \"rgba(0,0,0,0.85)\",\n            // opacity: 0.7\n        },\n        content: {\n            color: \"black\",\n            textAlign: \"center\",\n            position: \"absolute\",\n            top: \"15rem\",\n            left: \"15rem\",\n            right: \"15rem\",\n            bottom: \"15rem\",\n            backgroundColor: \"paleturquoise\",\n            borderRadius: \"1rem\",\n            padding: \"1.5rem\",\n\n        }\n    };\n\n    // タスクの表示に使う\n    useEffect(() => {\n        const usersCollectionRef = collection(firebaseFirestore, 'people');\n        // リアタイ更新\n        const unsub = onSnapshot(usersCollectionRef, (querySnapshot) => {\n            setUsers(\n                querySnapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id }))\n            );\n        });\n        return unsub;\n\n    }, []);\n\n    // タスク登録\n    const handleTask = async () => {\n        // event.preventDefault();\n        const usersCollectionRef = collection(firebaseFirestore, 'task');\n        const newDoc = doc(usersCollectionRef).id\n        console.log(newDoc)\n        const documentRef = await setDoc(doc(usersCollectionRef, newDoc), {\n            // usersCollectionRef.doc(newDoc).set({\n            user: currentAccount,\n            content: contentValue,\n            due: dueValue,\n            name: expressionValue,\n            id: newDoc,\n        });\n    };\n    // コンテンツ表示\n    const setText = async (index) => {\n        const usersDocumentRef = collection(firebaseFirestore, 'task');\n        await getDocs(query(usersDocumentRef, where('content', '==', allTasks[index].content), where('due', '==', allTasks[index].due.toString()))).then(snapshot => {\n            snapshot.forEach(doc => {\n                setTextValue(doc.data().name)\n            })\n        })\n    }\n    // 終わり\n\n    // 成果物一覧表示\n    const setOutput = async (index) => {\n        const usersDocumentRef = collection(firebaseFirestore, 'task');\n        let taskId = 0;\n        await getDocs(query(usersDocumentRef, where('content', '==', allTasks[index].content), where('due', '==', allTasks[index].due.toString()))).then(snapshot => {\n            snapshot.forEach(doc => {\n                taskId = doc.data().id\n                console.log(taskId)\n            })\n        })\n\n        const usersLinkRef = collection(firebaseFirestore, `task/${taskId}/output`);\n        // 成果物を全て配列に入れる\n        await getDocs(query(usersLinkRef)).then(snapshot => {\n            snapshot.forEach(doc => {\n                // setContentValue(doc.data().link)\n                console.log(allLinks);\n                allLinks.push(doc.data().link);\n                setLinks(allLinks);\n            })\n        })\n    }\n    // 終わり\n\n    const getAllTasks = async () => {\n        const { ethereum } = window;\n\n        try {\n            if (ethereum) {\n                const provider = new ethers.providers.Web3Provider(ethereum);\n                const signer = provider.getSigner();\n                const taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n                const tasks = await taskContract.getAllTasks();\n                const tasksCleaned = tasks.map(task => {\n                    return {\n                        user: task.user,\n                        due: task.due,\n                        content: task.content,\n                        bounty: task.bounty,\n                        done: task.done\n                    };\n                });\n                setAllTasks(tasksCleaned);\n            } else {\n                console.log(\"Ethereum object doesn't exist!\");\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    // タスク登録時イベント\n    useEffect(() => {\n        let taskContract;\n\n        const onNewTask = (user, due, content, bounty, done) => {\n            console.log(\"NewTask\", user, due, content, bounty, done);\n            // alert(`「${content}」を登録しました。頑張りましょう🔥🚀`);\n            setAllTasks(prevState => [\n                ...prevState,\n                {\n                    user: user,\n                    due: due,\n                    content: content,\n                    bounty: bounty,\n                    done: done\n                },\n            ]);\n        };\n\n        if (window.ethereum) {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n\n            taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n            taskContract.on(\"NewTask\", onNewTask);\n        }\n\n        return () => {\n            if (taskContract) {\n                taskContract.off(\"NewTask\", onNewTask);\n            }\n        };\n    }, []);\n\n    // タスク完了時イベント\n    useEffect(() => {\n        let taskContract;\n\n        const onDoneTask = (user, index) => {\n            console.log(\"Done.\", user, index);\n            // alert(`タスク完了おめでとうございます！🔥🚀`);\n        };\n\n        if (window.ethereum) {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n\n            taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n            taskContract.on(\"DoneTask\", onDoneTask);\n        }\n\n        return () => {\n            if (taskContract) {\n                taskContract.off(\"DoneTask\", onDoneTask);\n            }\n        };\n    }, []);\n\n    // console.log(\"currentAccount: \", currentAccount);\n\n    const checkIfWalletIsConnected = async () => {\n        try {\n            const { ethereum } = window;\n            if (!ethereum) {\n                console.log(\"Make sure you have metamask!\");\n            } else {\n                console.log(\"We have the ethreum object\", ethereum);\n            }\n            // サイトにきたユーザーのアカウントを格納できる（複数格納可能のためaccountsと表記）\n            const accounts = await ethereum.request({ method: \"eth_accounts\" });\n            if (accounts.length !== 0) {\n                const account = accounts[0];\n                console.log(\"Found an authorized account:\", account);\n                setCurrentAccount(account)\n                getAllTasks();\n            } else {\n                console.log(\"No authorized account found\")\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    const connectWallet = async () => {\n        try {\n            const { ethereum } = window;\n            if (!ethereum) {\n                alert(\"Get MetaMask!\");\n                return;\n            }\n            const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n            console.log(\"Connected: \", accounts[0]);\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    // task生成\n    const task = async () => {\n        try {\n            const { ethereum } = window;\n            if (ethereum) {\n                const provider = new ethers.providers.Web3Provider(ethereum);\n                const signer = provider.getSigner();\n                const taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n\n                // 最終追記分\n                let contractBalance = await provider.getBalance(\n                    taskContract.address\n                );\n\n                // ETH送るコントラクト\n                console.log(\n                    \"Contract balance:\",\n                    ethers.utils.formatEther(contractBalance)\n                );\n\n                // トランザクションへの書き込み\n                const options = { value: ethers.utils.parseEther(bountyValue) }\n                const taskTxn = await taskContract.createTask(currentAccount, dueValue, contentValue, options)\n                console.log(\"Mining...\", taskTxn.hash);\n                await taskTxn.wait();\n                console.log(\"Mined -- \", taskTxn.hash);\n            } else {\n                console.log(\"Ethereum object doesn't exist!\");\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    };\n\n    // task完了\n    const done = async (index, riwarderValue) => {\n        console.log(index)\n        if (allTasks[index].done !== false) {\n            alert(`「${allTasks[index].content}」は既に完了しています、別のタスクを探してみてね🚀`);\n        }\n        try {\n            const { ethereum } = window;\n            if (ethereum) {\n                const provider = new ethers.providers.Web3Provider(ethereum);\n                const signer = provider.getSigner();\n                const taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n\n                // 完了前のコントラクトの資金量確認\n                let contractBalance = await provider.getBalance(\n                    taskContract.address\n                );\n                console.log(\n                    \"Contract balance:\",\n                    ethers.utils.formatEther(contractBalance)\n                );\n\n                // トランザクションへの書き込み\n                const taskTxn = await taskContract.sendRiward(index, riwarderValue)\n                console.log(\"Mining...\", taskTxn.hash);\n                await taskTxn.wait();\n                console.log(\"Mined -- \", taskTxn.hash);\n\n                // 完了後のコントラクトの資金量確認\n                console.log(\n                    \"Contract balance:\",\n                    ethers.utils.formatEther(contractBalance)\n                );\n\n            } else {\n                console.log(\"Ethereum object doesn't exist!\");\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    };\n\n    // 成果物提出\n    const output = async (indexValue) => {\n\n        // ドキュメントIDを取得 \n        console.log(indexValue)\n        const usersDocumentRef = collection(firebaseFirestore, 'task');\n        getDocs(query(usersDocumentRef, where('content', '==', allTasks[indexValue].content), where('due', '==', allTasks[indexValue].due.toString()))).then(snapshot => {\n            snapshot.forEach(doc => {\n                console.log(allTasks[indexValue].content)\n                // idを文字列に保存\n                setValue(doc.data().id)\n                // console.log(\"doc id\", doc.data().id)\n                // console.log(\"id value\", idValue)\n            })\n        })\n    };\n\n    const addLink = async (idValue) => {\n        // IDからさらにコレクションを~~Refに保存\n        const usersLinkRef = collection(firebaseFirestore, `task/${idValue}/output`);\n        console.log(`task/${idValue}/output`)\n        console.log(usersLinkRef)\n\n        // ~~Refにリンクを登録、IDつきで\n        const newDoc = doc(usersLinkRef).id\n        console.log(newDoc)\n        const documentRef = await setDoc(doc(usersLinkRef, newDoc), {\n            id: newDoc,\n            link: outputValue,\n        });\n    };\n\n    useEffect(() => {\n        checkIfWalletIsConnected();\n    }, []);\n\n    return (\n        <div className=\"mainContainer\">\n            <div className=\"dataContainer\">\n                <div className=\"header\">\n                    <h1 className=\"heading gradient-text\">\n                        <span role=\"img\" aria-label=\"hand-wave\">🚀</span> Task Manager🚀\n                    </h1>\n                </div>\n                <div className=\"bio\">\n                    タスクを管理しよう！🔥🚀\n                </div>\n\n                {/* <br />\n                <Link to={`/sample`}>サンプルページはこちら</Link>\n                <Link to={`/team`}>チームの登録はこちら</Link>\n                <br /> */}\n\n                {!currentAccount && (\n                    <button className=\"waveButton\" onClick={connectWallet}>\n                        Connect Wallet\n                    </button>\n                )}\n\n                {currentAccount && (\n                    <button className=\"waveButton\" onClick={connectWallet}>\n                        Wallet Connected\n                    </button>\n                )}\n                {currentAccount && (\n                    <button className=\"waveButton\" onClick={() => {\n                        setSelectedItem(\"create\")\n                    }}>\n                        タスクを作成する\n                    </button>)}\n\n                {/* モーダルにするテスト */}\n                <Modal isOpen={\"create\" === selectedItem} style={modalStyle} onRequestClose={() => setSelectedItem(\"\")}>\n                    <h2>\n                        タスクの作成\n                    </h2>\n\n                    {currentAccount && (<textarea name=\"messageArea\"\n                        placeholder=\"タスクを記入してください\"\n                        type=\"text\"\n                        id=\"message\"\n                        value={contentValue}\n                        onChange={e => setContentValue(e.target.value)} />)\n                    }<br></br>\n\n                    {currentAccount && (<textarea name=\"messageArea\"\n                        placeholder=\"期日を記入してください\"\n                        className=\"messageArea\"\n                        type=\"text\"\n                        id=\"message\"\n                        value={dueValue}\n                        onChange={e => setDueValue(e.target.value)} />)\n                    }<br></br>\n\n                    {currentAccount && (<textarea name=\"messageArea\"\n                        placeholder=\"タスクの報酬額(eth単位)を記入してください\"\n                        type=\"text\"\n                        id=\"message\"\n                        value={bountyValue}\n                        onChange={e => setBountyValue(e.target.value)} />)\n                    }<br></br>\n\n                    <textarea name=\"messageArea\"\n                        placeholder=\"タスクの説明を記入してください\"\n                        type=\"text\"\n                        id=\"expression\"\n                        value={expressionValue}\n                        onChange={e => setExpressionValue(e.target.value)} />\n                    <br></br>\n                    {currentAccount && (\n                        <button className=\"waveButton\" onClick={() => {\n                            handleTask();\n                            task();\n                        }}>\n                            タスクを作成する\n                        </button>)}\n                </Modal>\n\n                {currentAccount && (\n                    allTasks.slice(0).map((task, index) => {\n                        return (\n                            <div key={index} className=\"cover\">\n                                {/* setispenと合わせて別の関数を策定、idを渡す。このidをベースにtaskを特定して表示する関数を書く */}\n                                <button className=\"taskCard\" onClick={() => {\n                                    setIndexValue(index);\n                                    setText(index);\n                                    setOutput(index);\n                                    // setIsOpen(true);\n                                    setSelectedItem(\"task\");\n                                    // outputの適切な挙動のため、ここで一度タスクIDを拾うための処理を入れる\n                                    output(index);\n                                }}>\n                                    担当者: {task.user}<br></br>\n                                    期日: {task.due.toString()}<br></br>\n                                    タスク: {task.content}<br></br>\n                                    報酬: {ethers.utils.formatEther(task.bounty)}ether<br></br>\n                                    完了: {task.done.toString()}<br></br>\n                                    {/* ボタンの中 */}\n                                </button>\n                                {/* 詳細を押した際の挙動 */}\n                                <Modal isOpen={\"task\" === selectedItem} style={modalStyle} onRequestClose={() => {\n                                    setSelectedItem(\"\");\n                                    setLinks([]);\n                                }}>\n                                    <div id=\"overlay\">\n                                        {/* <div className=\"mainContainer\">\n                                        <div className=\"dataContainer\">\n                                            <div className=\"body\"> */}\n                                        <h2>タスク詳細<br /></h2>\n                                        <div className=\"modal\">\n                                            タスク登録者▼<br />\n                                            <div className=\"card\"> {allTasks[indexValue].user}</div>\n                                            期日:<br /> <div className=\"card\">{allTasks[indexValue].due.toString()}</div>\n                                            タスク:<div className=\"card\"> {allTasks[indexValue].content}</div>\n                                            詳細説明:<div className=\"card\"> {textValue}</div>\n                                            報酬:<div className=\"card\"> {ethers.utils.formatEther(allTasks[indexValue].bounty)}ether</div>\n                                            完了: <div className=\"card\">{allTasks[indexValue].done.toString()}</div>\n                                            成果物:\n                                            <div>\n                                                {allLinks.map((link, i) => <div key={i} className=\"card\">{link}</div>)}\n                                            </div>\n\n                                        </div>\n\n                                        {/* タスク提出 */}\n                                        <textarea name=\"messageArea\"\n                                            placeholder=\"成果物のリンクを添付\"\n                                            type=\"text\"\n                                            id=\"riward\"\n                                            value={outputValue}\n                                            onChange={e => setOutputValue(e.target.value)} />\n                                        <br></br>\n                                        <button className=\"waveButton\" onClick={() => {\n                                            output(indexValue);\n                                            console.log(\"id value\", idValue);\n                                            addLink(idValue);\n                                        }}>成果物を提出</button>\n\n                                        {/* 報酬送付 */}\n                                        <br></br>\n                                        <textarea name=\"messageArea\"\n                                            placeholder=\"報酬を送りたいアカウントのアドレスを記入してください\"\n                                            type=\"text\"\n                                            id=\"riward\"\n                                            value={riwarderValue}\n                                            onChange={e => setRiwarderValue(e.target.value)} />\n                                        <br></br>\n                                        <button className=\"waveButton\" onClick={() => done(index, riwarderValue)}>報酬を送付</button>\n                                        <br></br>\n                                        <br></br>\n                                        <button onClick={() => {\n                                            setSelectedItem(\"\")\n                                            setLinks([]);\n                                        }}>Close Modal</button>\n                                    </div>\n                                </Modal>\n                            </div >)\n                    })\n                )}\n            </div >\n        </div >\n    )\n};\n\n\nexport default Top; ","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Sample extends React.Component {\n\n    render() {\n        return (\n            <div>\n                Sample!\n                <br />\n                <Link to={`/`}>Go To App</Link>\n\n\n                <br />\n                <br />\n                Sample!\n                <br />\n                <Link to={`/`}>Go To App</Link>\n            </div>\n\n        );\n    }\n}\n\nexport default Sample;\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport './App.css';\n// import { ethers } from \"ethers\";\n\nconst Team = () => {\n    const [contentValue, setContentValue] = useState([]);\n    const [currentAccount, setCurrentAccount] = useState(\"\");\n    const { ethereum } = window;\n\n    const accounts = ethereum.request({ method: \"eth_accounts\" });\n    if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        // setCurrentAccount(account)\n    } else {\n        console.log(\"No authorized account found\")\n    }\n    return (\n        <div className=\"mainContainer\">\n            <div className=\"dataContainer\">\n                <div className=\"header\">\n                    チーム登録\n                </div>\n                <div className=\"bio\">\n                    チームを登録しよう！🔥🚀\n                </div>\n                <br />\n                Sample!\n                <br />\n                <Link to={`/`}>Go To App</Link>\n                <br />\n\n                Sample!\n                <br />\n                <Link to={`/sample`}>Go To Sample</Link>\n                <br />\n\n                <button className=\"waveButton\" onClick={null}>\n                    タスクを作成する\n                </button>\n                <br />\n                <textarea name=\"messageArea\"\n                    placeholder=\"タスクを記入してください\"\n                    type=\"text\"\n                    id=\"message\"\n                    value={contentValue}\n                    onChange={e => setContentValue(e.target.value)} />\n\n            </div>\n        </div>\n\n    );\n}\n\nexport default Team;\n\n","// import React, { useEffect, useState } from \"react\";\nimport React from \"react\";\n// ページ遷移用\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\n// import { Link } from 'react-router-dom';\nimport Top from './Top'; //作成したtop.jsを読み込んでいる\nimport Sample from './Sample';\nimport Team from './Team';\nimport './App.css';\n// import { ethers } from \"ethers\";\n// ABIのインポート\n// import abi from './utils/CreateTask.json';\n\n// ここから変更したもの\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route exact path=\"/\" element={<Top />} />\n        <Route exact path=\"/sample\" element={<Sample />} />\n        <Route exact path=\"/team\" element={<Team />} />\n      </Routes>\n    </BrowserRouter>\n  )\n}\n\n// 前のもの\n\n// const App = () => {\n\n//   // ユーザーのウォレット保存用状態変数\n//   const [currentAccount, setCurrentAccount] = useState(\"\");\n\n//   // メッセージ保存用状態変数\n//   const [contentValue, setContentValue] = useState(\"\")\n\n//   // 期日保存用状態変数\n//   const [dueValue, setDueValue] = useState(\"\")\n\n//   // tasks保存用状態変数\n//   const [allTasks, setAllTasks] = useState([]);\n\n//   // 報酬額保存用状態変数\n//   const [bountyValue, setBountyValue] = useState([]);\n\n\n//   // コントラクトアドレス保存用\n//   const contractAddress = \"0xEcab270B6Dc488686fa3a292D526a182A516c39f\"\n\n//   // ABIの参照\n//   const ContractABI = abi.abi;\n\n//   const getAllTasks = async () => {\n//     const { ethereum } = window;\n\n//     try {\n//       if (ethereum) {\n//         const provider = new ethers.providers.Web3Provider(ethereum);\n//         const signer = provider.getSigner();\n//         const taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n//         const tasks = await taskContract.getAllTasks();\n//         const tasksCleaned = tasks.map(task => {\n//           return {\n//             user: task.user,\n//             due: task.due,\n//             content: task.content,\n//             bounty: task.bounty,\n//             done: task.done\n//           };\n//         });\n//         setAllTasks(tasksCleaned);\n//       } else {\n//         console.log(\"Ethereum object doesn't exist!\");\n//       }\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n//   // タスク登録時イベント\n//   useEffect(() => {\n//     let taskContract;\n\n//     const onNewTask = (user, due, content, bounty, done) => {\n//       console.log(\"NewTask\", user, due, content, bounty, done);\n//       // alert(`「${content}」を登録しました。頑張りましょう🔥🚀`);\n//       setAllTasks(prevState => [\n//         ...prevState,\n//         {\n//           user: user,\n//           due: due,\n//           content: content,\n//           bounty: bounty,\n//           done: done\n//         },\n//       ]);\n//     };\n\n//     if (window.ethereum) {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const signer = provider.getSigner();\n\n//       taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n//       taskContract.on(\"NewTask\", onNewTask);\n//     }\n\n//     return () => {\n//       if (taskContract) {\n//         taskContract.off(\"NewTask\", onNewTask);\n//       }\n//     };\n//   }, []);\n\n//   // タスク完了時イベント\n//   useEffect(() => {\n//     let taskContract;\n\n//     const onDoneTask = (user, index) => {\n//       console.log(\"Done.\", user, index);\n//     };\n//     // alert(`タスク完了おめでとうございます！🔥🚀`);\n\n//     if (window.ethereum) {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const signer = provider.getSigner();\n\n//       taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n//       taskContract.on(\"DoneTask\", onDoneTask);\n//     }\n\n//     return () => {\n//       if (taskContract) {\n//         taskContract.off(\"DoneTask\", onDoneTask);\n//       }\n//     };\n//   }, []);\n\n//   console.log(\"currentAccount: \", currentAccount);\n\n//   const checkIfWalletIsConnected = async () => {\n//     try {\n//       const { ethereum } = window;\n//       if (!ethereum) {\n//         console.log(\"Make sure you have metamask!\");\n//       } else {\n//         console.log(\"We have the ethreum object\", ethereum);\n//       }\n//       // サイトにきたユーザーのアカウントを格納できる（複数格納可能のためaccountsと表記）\n//       const accounts = await ethereum.request({ method: \"eth_accounts\" });\n//       if (accounts.length !== 0) {\n//         const account = accounts[0];\n//         console.log(\"Found an authorized account:\", account);\n//         setCurrentAccount(account)\n//         getAllTasks();\n//       } else {\n//         console.log(\"No authorized account found\")\n//       }\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   }\n\n//   const connectWallet = async () => {\n//     try {\n//       const { ethereum } = window;\n//       if (!ethereum) {\n//         alert(\"Get MetaMask!\");\n//         return;\n//       }\n//       const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n//       console.log(\"Connected: \", accounts[0]);\n//     } catch (error) {\n//       console.log(error)\n//     }\n//   }\n\n//   // task生成\n//   const task = async () => {\n//     try {\n//       const { ethereum } = window;\n//       if (ethereum) {\n//         const provider = new ethers.providers.Web3Provider(ethereum);\n//         const signer = provider.getSigner();\n//         const taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n\n//         // 最終追記分\n//         let contractBalance = await provider.getBalance(\n//           taskContract.address\n//         );\n\n//         // ETH送るコントラクト\n//         console.log(\n//           \"Contract balance:\",\n//           ethers.utils.formatEther(contractBalance)\n//         );\n\n//         // トランザクションへの書き込み\n//         const options = { value: ethers.utils.parseEther(bountyValue) }\n//         const taskTxn = await taskContract.createTask(currentAccount, dueValue, contentValue, options)\n//         console.log(\"Mining...\", taskTxn.hash);\n//         await taskTxn.wait();\n//         console.log(\"Mined -- \", taskTxn.hash);\n//       } else {\n//         console.log(\"Ethereum object doesn't exist!\");\n//       }\n//     } catch (error) {\n//       console.log(error)\n//     }\n//   };\n\n//   // task完了\n//   const done = async (index) => {\n//     console.log(index)\n//     if (allTasks[index].done !== false) {\n//       alert(`「${allTasks[index].content}」は既に完了しています、別のタスクを探してみてね🚀`);\n//     }\n//     try {\n//       const { ethereum } = window;\n//       if (ethereum) {\n//         const provider = new ethers.providers.Web3Provider(ethereum);\n//         const signer = provider.getSigner();\n//         const taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n\n//         // 完了前のコントラクトの資金量確認\n//         let contractBalance = await provider.getBalance(\n//           taskContract.address\n//         );\n//         console.log(\n//           \"Contract balance:\",\n//           ethers.utils.formatEther(contractBalance)\n//         );\n\n//         // トランザクションへの書き込み\n//         const taskTxn = await taskContract.sendRiward(index)\n//         console.log(\"Mining...\", taskTxn.hash);\n//         await taskTxn.wait();\n//         console.log(\"Mined -- \", taskTxn.hash);\n\n//         // 完了後のコントラクトの資金量確認\n//         console.log(\n//           \"Contract balance:\",\n//           ethers.utils.formatEther(contractBalance)\n//         );\n\n//       } else {\n//         console.log(\"Ethereum object doesn't exist!\");\n//       }\n//     } catch (error) {\n//       console.log(error)\n//     }\n//   };\n\n\n//   useEffect(() => {\n//     checkIfWalletIsConnected();\n//   }, [])\n//   return (\n//     <BrowserRouter>\n//       <Routes>\n//         {/* <Route exact path=\"/\" element={<Top />} /> */}\n//         <Route exact path=\"/top\" element={<Top />} />\n//       </Routes>\n//       <div className=\"mainContainer\">\n//         <div className=\"dataContainer\">\n//           <div className=\"header\">\n//             <span role=\"img\" aria-label=\"hand-wave\">🚀</span> Task Manager\n//           </div>\n//           <div className=\"bio\">\n//             タスクを管理しよう！🔥🚀\n//           </div>\n//           <br />\n//           {!currentAccount && (\n//             <button className=\"waveButton\" onClick={connectWallet}>\n//               Connect Wallet\n//             </button>\n//           )}\n\n//           {currentAccount && (\n//             <button className=\"waveButton\" onClick={connectWallet}>\n//               Wallet Connected\n//             </button>\n//           )}\n\n//           {currentAccount && (\n//             <button className=\"waveButton\" onClick={task}>\n//               タスクを作成する\n//             </button>)}\n\n//           {currentAccount && (<textarea name=\"messageArea\"\n//             placeholder=\"タスクを記入してください\"\n//             type=\"text\"\n//             id=\"message\"\n//             value={contentValue}\n//             onChange={e => setContentValue(e.target.value)} />)\n//           }\n\n//           {currentAccount && (<textarea name=\"messageArea\"\n//             placeholder=\"期日を記入してください\"\n//             type=\"text\"\n//             id=\"message\"\n//             value={dueValue}\n//             onChange={e => setDueValue(e.target.value)} />)\n//           }\n\n//           {currentAccount && (<textarea name=\"messageArea\"\n//             placeholder=\"タスクの報酬額(eth単位)を記入してください\"\n//             type=\"text\"\n//             id=\"message\"\n//             value={bountyValue}\n//             onChange={e => setBountyValue(e.target.value)} />)\n//           }\n\n//           <Link to={`/top`}>Go To top</Link>\n\n\n//           {currentAccount && (\n//             allTasks.slice(0).map((task, index) => {\n//               return (\n//                 <div key={index} style={{ backgroundColor: \"#F8F8FF\", marginTop: \"16px\", padding: \"8px\" }}>\n//                   <div>担当者: {task.user}</div>\n//                   <div>期日: {task.due.toString()}</div>\n//                   <div>タスク: {task.content}</div>\n//                   {/* <div>bounty: {task.bounty.toString()}Wei</div> */}\n//                   <div>報酬: {ethers.utils.formatEther(task.bounty)}ether</div>\n//                   <div>完了: {task.done.toString()}</div>\n//                   <button className=\"waveButton\" onClick={null}>詳細</button>\n//                   <button className=\"waveButton\" onClick={() => done(index)}>提出</button>\n//                 </div>)\n//             })\n//           )}\n//         </div>\n//       </div>\n//     </BrowserRouter>\n//   );\n// }\n\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}