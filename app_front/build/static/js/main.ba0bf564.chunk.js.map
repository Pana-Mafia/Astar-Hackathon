{"version":3,"sources":["firebase.js","Top.js","Hybrid.js","components/Eyecatch.js","Fuji.js","Sample.js","Team.js","Alpha.js","App.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseFirestore","getAnalytics","getFirestore","Modal","setAppElement","Top","useState","currentAccount","setCurrentAccount","contentValue","setContentValue","dueValue","setDueValue","allTasks","setAllTasks","bountyValue","setBountyValue","expressionValue","setExpressionValue","riwarderValue","setRiwarderValue","outputValue","setOutputValue","React","idValue","setValue","indexValue","setIndexValue","textValue","setTextValue","selectedItem","setSelectedItem","allLinks","setLinks","contractAddress","ContractABI","abi","setUsers","modalStyle","overlay","position","top","left","backgroundColor","content","color","textAlign","right","bottom","borderRadius","padding","useEffect","usersCollectionRef","collection","onSnapshot","querySnapshot","docs","map","doc","data","id","handleTask","newDoc","console","log","setDoc","user","due","name","setText","index","usersDocumentRef","getDocs","query","where","toString","then","snapshot","forEach","setOutput","taskId","usersLinkRef","push","link","getAllTasks","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","taskContract","Contract","tasks","tasksCleaned","task","bounty","done","onNewTask","prevState","on","off","onDoneTask","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","getBalance","address","contractBalance","utils","formatEther","options","value","parseEther","createTask","taskTxn","hash","wait","sendRiward","output","addLink","navigate","useNavigate","className","role","style","display","alignItems","Switch","onChange","e","target","checked","onClick","isOpen","onRequestClose","placeholder","type","slice","i","toLowerCase","Eyecatch","props","version","unit","justifyContent","defaultChecked","isChecked","setIsChecked","mineStatus","setMineStatus","metamaskError","setMetamaskError","allLinkHolders","setLinkHolders","userid","network","match","like","_chainId","location","reload","htmlFor","scope","href","Sample","to","Component","Team","allLinkGoods","setLinkGoods","FormControlLabel","label","control","Checkbox","App","exact","path","element","Alpha","Fuji","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8TAqBMA,EAAMC,YAXW,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBAMNC,GADKC,YAAaV,GACEW,YAAaX,I,gBCE9CY,IAAMC,cAAc,SACpB,IAorBeC,EAprBH,WAEV,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAGA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAGA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAGA,EAAgCN,mBAAS,IAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAGA,EAAsCR,mBAAS,IAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KAGA,EAA8CV,mBAAS,IAAvD,mBAAOW,EAAP,KAAwBC,EAAxB,KAGA,EAA0CZ,mBAAS,IAAnD,mBAAOa,EAAP,KAAsBC,EAAtB,KAGA,EAAsCd,mBAAS,IAA/C,mBAAOe,EAAP,KAAoBC,EAApB,KAGA,EAAiCC,IAAMjB,UAAS,GAAhD,mBAGA,GAHA,UAG4BiB,IAAMjB,SAAS,MAA3C,mBAAOkB,EAAP,KAAgBC,EAAhB,KAGA,EAAoCF,IAAMjB,SAAS,GAAnD,oBAAOoB,GAAP,MAAmBC,GAAnB,MACA,GAAkCJ,IAAMjB,SAAS,GAAjD,qBAAOsB,GAAP,MAAkBC,GAAlB,MACA,GAAwCvB,mBAAS,IAAjD,qBAAOwB,GAAP,MAAqBC,GAArB,MAGA,GAA6BzB,mBAAS,IAAtC,qBAAO0B,GAAP,MAAiBC,GAAjB,MAGMC,GAAkB,6CAOlBC,GAAcC,EAAIA,IAGxB,GAA0B9B,mBAAS,IAAnC,qBAAc+B,IAAd,aAGMC,GAAa,CACjBC,QAAS,CACPC,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,gBAAiB,oBAGnBC,QAAS,CACPC,MAAO,QACPC,UAAW,SACXN,SAAU,WACVC,IAAK,OACLC,KAAM,OACNK,MAAO,OACPC,OAAQ,OACRL,gBAAiB,gBACjBM,aAAc,OACdC,QAAS,WAKbC,qBAAU,WACR,IAAMC,EAAqBC,YAAWrD,EAAmB,UAOzD,OALcsD,YAAWF,GAAoB,SAACG,GAC5ClB,GACEkB,EAAcC,KAAKC,KAAI,SAACC,GAAD,mBAAC,eAAcA,EAAIC,QAAnB,IAA2BC,GAAIF,EAAIE,cAI7D,IAGH,IAAMC,GAAU,iDAAG,uGAEXT,EAAqBC,YAAWrD,EAAmB,QACnD8D,EAASJ,YAAIN,GAAoBQ,GACvCG,QAAQC,IAAIF,GAJK,SAKSG,YAAOP,YAAIN,EAAoBU,GAAS,CAEhEI,KAAM3D,EACNqC,QAASnC,EACT0D,IAAKxD,EACLyD,KAAMnD,EACN2C,GAAIE,IAXW,yDAAH,qDAeVO,GAAO,iDAAG,WAAOC,GAAP,wFACRC,EAAmBlB,YAAWrD,EAAmB,QADzC,SAERwE,YACJC,YACEF,EACAG,YAAM,UAAW,KAAM7D,EAASyD,GAAO1B,SACvC8B,YAAM,MAAO,KAAM7D,EAASyD,GAAOH,IAAIQ,cAEzCC,MAAK,SAACC,GACNA,EAASC,SAAQ,SAACpB,GAChB7B,GAAa6B,EAAIC,OAAOS,YAVd,2CAAH,sDAiBPW,GAAS,iDAAG,WAAOT,GAAP,4FACVC,EAAmBlB,YAAWrD,EAAmB,QACnDgF,EAAS,EAFG,SAGVR,YACJC,YACEF,EACAG,YAAM,UAAW,KAAM7D,EAASyD,GAAO1B,SACvC8B,YAAM,MAAO,KAAM7D,EAASyD,GAAOH,IAAIQ,cAEzCC,MAAK,SAACC,GACNA,EAASC,SAAQ,SAACpB,GAChBsB,EAAStB,EAAIC,OAAOC,GACpBG,QAAQC,IAAIgB,SAZA,cAgBVC,EAAe5B,YAAWrD,EAAD,eAA4BgF,EAA5B,YAhBf,SAkBVR,YAAQC,YAAMQ,IAAeL,MAAK,SAACC,GACvCA,EAASC,SAAQ,SAACpB,GAGhB1B,GAASkD,KAAKxB,EAAIC,OAAOwB,MACzBlD,GAASD,UAvBG,2CAAH,sDA6BToD,GAAW,iDAAG,+GACGC,OAAbC,EADU,EACVA,SADU,UAIZA,EAJY,wBAKRC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClBC,EAAe,IAAIL,IAAOM,SAC9B5D,GACAC,GACAwD,GAVY,SAYME,EAAaT,cAZnB,OAYRW,EAZQ,OAaRC,EAAeD,EAAMtC,KAAI,SAACwC,GAC9B,MAAO,CACL/B,KAAM+B,EAAK/B,KACXC,IAAK8B,EAAK9B,IACVvB,QAASqD,EAAKrD,QACdsD,OAAQD,EAAKC,OACbC,KAAMF,EAAKE,SAGfrF,EAAYkF,GAtBE,wBAwBdjC,QAAQC,IAAI,kCAxBE,0DA2BhBD,QAAQC,IAAR,MA3BgB,0DAAH,qDAgCjBb,qBAAU,WACR,IAAI0C,EAEEO,EAAY,SAAClC,EAAMC,EAAKvB,EAASsD,EAAQC,GAC7CpC,QAAQC,IAAI,UAAWE,EAAMC,EAAKvB,EAASsD,EAAQC,GAEnDrF,GAAY,SAACuF,GAAD,4BACPA,GADO,CAEV,CACEnC,KAAMA,EACNC,IAAKA,EACLvB,QAASA,EACTsD,OAAQA,EACRC,KAAMA,SAKZ,GAAId,OAAOC,SAAU,CACnB,IACMK,EADW,IAAIH,IAAOC,UAAUC,aAAaL,OAAOC,UAClCM,aAExBC,EAAe,IAAIL,IAAOM,SAAS5D,GAAiBC,GAAawD,IACpDW,GAAG,UAAWF,GAG7B,OAAO,WACDP,GACFA,EAAaU,IAAI,UAAWH,MAG/B,IAGHjD,qBAAU,WACR,IAAI0C,EAEEW,EAAa,SAACtC,EAAMI,GACxBP,QAAQC,IAAI,QAASE,EAAMI,IAI7B,GAAIe,OAAOC,SAAU,CACnB,IACMK,EADW,IAAIH,IAAOC,UAAUC,aAAaL,OAAOC,UAClCM,aAExBC,EAAe,IAAIL,IAAOM,SAAS5D,GAAiBC,GAAawD,IACpDW,GAAG,WAAYE,GAG9B,OAAO,WACDX,GACFA,EAAaU,IAAI,WAAYC,MAGhC,IAIH,IAAMC,GAAwB,iDAAG,sHAERpB,QAAbC,EAFqB,EAErBA,UAINvB,QAAQC,IAAI,6BAA8BsB,GAF1CvB,QAAQC,IAAI,gCAJe,SASNsB,EAASoB,QAAQ,CAAEC,OAAQ,iBATrB,OAUL,KADlBC,EATuB,QAUhBC,QACLC,EAAUF,EAAS,GACzB7C,QAAQC,IAAI,+BAAgC8C,GAC5CtG,EAAkBsG,GAClB1B,MAEArB,QAAQC,IAAI,+BAhBe,gDAmB7BD,QAAQC,IAAR,MAnB6B,yDAAH,qDAuBxB+C,GAAa,iDAAG,gHAEG1B,OAAbC,EAFU,EAEVA,SAFU,uBAIhB0B,MAAM,iBAJU,0CAOK1B,EAASoB,QAAQ,CACtCC,OAAQ,wBARQ,OAOZC,EAPY,OAUlB7C,QAAQC,IAAI,cAAe4C,EAAS,IAVlB,kDAYlB7C,QAAQC,IAAR,MAZkB,0DAAH,qDAiBbiC,GAAI,iDAAG,0HAEYZ,SAAbC,EAFC,EAEDA,UAFC,wBAIDC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClBC,EAAe,IAAIL,IAAOM,SAC9B5D,GACAC,GACAwD,GATK,SAaqBJ,EAAS0B,WAAWpB,EAAaqB,SAbtD,cAaHC,EAbG,OAgBPpD,QAAQC,IACN,oBACAwB,IAAO4B,MAAMC,YAAYF,IAIrBG,EAAU,CAAEC,MAAO/B,IAAO4B,MAAMI,WAAWzG,IAtB1C,UAuBe8E,EAAa4B,WACjClH,EACAI,EACAF,EACA6G,GA3BK,eAuBDI,EAvBC,OA6BP3D,QAAQC,IAAI,YAAa0D,EAAQC,MA7B1B,UA8BDD,EAAQE,OA9BP,QA+BP7D,QAAQC,IAAI,YAAa0D,EAAQC,MA/B1B,wBAiCP5D,QAAQC,IAAI,kCAjCL,0DAoCTD,QAAQC,IAAR,MApCS,0DAAH,qDAyCJmC,GAAI,iDAAG,WAAO7B,EAAOnD,GAAd,gGACX4C,QAAQC,IAAIM,IACiB,IAAzBzD,EAASyD,GAAO6B,MAClBa,MAAM,SAAD,OACCnG,EAASyD,GAAO1B,QADjB,iKAHI,WAQYyC,SAAbC,EARC,EAQDA,UARC,wBAUDC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClBC,EAAe,IAAIL,IAAOM,SAC9B5D,GACAC,GACAwD,GAfK,UAmBqBJ,EAAS0B,WAAWpB,EAAaqB,SAnBtD,eAmBHC,EAnBG,OAoBPpD,QAAQC,IACN,oBACAwB,IAAO4B,MAAMC,YAAYF,IAtBpB,UA0BetB,EAAagC,WAAWvD,EAAOnD,GA1B9C,eA0BDuG,EA1BC,OA2BP3D,QAAQC,IAAI,YAAa0D,EAAQC,MA3B1B,UA4BDD,EAAQE,OA5BP,QA6BP7D,QAAQC,IAAI,YAAa0D,EAAQC,MAGjC5D,QAAQC,IACN,oBACAwB,IAAO4B,MAAMC,YAAYF,IAlCpB,wBAqCPpD,QAAQC,IAAI,kCArCL,0DAwCTD,QAAQC,IAAR,MAxCS,0DAAH,wDA6CJ8D,GAAM,iDAAG,WAAOpG,GAAP,iFAEbqC,QAAQC,IAAItC,GACN6C,EAAmBlB,YAAWrD,EAAmB,QACvDwE,YACEC,YACEF,EACAG,YAAM,UAAW,KAAM7D,EAASa,GAAYkB,SAC5C8B,YAAM,MAAO,KAAM7D,EAASa,GAAYyC,IAAIQ,cAE9CC,MAAK,SAACC,GACNA,EAASC,SAAQ,SAACpB,GAChBK,QAAQC,IAAInD,EAASa,GAAYkB,SAEjCnB,EAASiC,EAAIC,OAAOC,UAdX,2CAAH,sDAqBNmE,GAAO,iDAAG,WAAOvG,GAAP,+FAGO,IAAfH,EAHQ,wBAKJ4D,EAAe5B,YACnBrD,EAD6B,eAErBwB,EAFqB,YAI/BuC,QAAQC,IAAR,eAAoBxC,EAApB,YACAuC,QAAQC,IAAIiB,GAGNnB,EAASJ,YAAIuB,GAAcrB,GACjCG,QAAQC,IAAIF,GAdF,SAegBG,YAAOP,YAAIuB,EAAcnB,GAAS,CAC1DF,GAAIE,EACJqB,KAAM9D,IAjBE,sCAoBV2F,MAAM,4EApBI,0DAuBZA,MAAM,gEAvBM,0DAAH,sDA2Bb7D,qBAAU,WACRsD,OACC,IAEH,IAAMuB,GAAWC,cAIjB,OACE,qBAAKC,UAAU,gBAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,SAAf,SACE,qBAAIA,UAAU,wBAAd,UACE,sBAAMC,KAAK,MAAM,aAAW,YAA5B,0BAEQ,IAHV,2BAOF,sBAAKD,UAAU,MAAf,8BAEE,uBACA,uBAHF,gBAKE,uBACA,uBANF,uEAQE,uBACA,sBAAKE,MAAO,CAAEC,QAAS,OAAQC,WAAY,UAA3C,UACE,iDACA,cAACC,EAAA,EAAD,CAAQC,SAzBlB,SAAuBC,GACrBA,EAAEC,OAAOC,QAAUX,GAAS,KAAOA,GAAS,YAyBpC,iDAIF,2BAGAzH,GACA,wBAAQ2H,UAAU,aAAaU,QAAS7B,GAAxC,4BAKDxG,GACC,wBAAQ2H,UAAU,aAAaU,QAAS7B,GAAxC,8BAIDxG,GACC,wBACE2H,UAAU,aACVU,QAAS,WACP7G,GAAgB,WAHpB,8DAWF,eAAC,IAAD,CACE8G,OAAQ,WAAa/G,GACrBsG,MAAO9F,GACPwG,eAAgB,kBAAM/G,GAAgB,KAHxC,UAKE,sEAECxB,GACC,0BACE6D,KAAK,cACL8D,UAAU,OACVa,YAAY,uKACZC,KAAK,OACLpF,GAAG,UACH2D,MAAO9G,EACP+H,SAAU,SAACC,GAAD,OAAO/H,EAAgB+H,EAAEC,OAAOnB,UAG9C,uBAEChH,GACC,0BACE6D,KAAK,cACL8D,UAAU,OACVa,YAAY,2FACZC,KAAK,OACLpF,GAAG,UACH2D,MAAO5G,EACP6H,SAAU,SAACC,GAAD,OAAO7H,EAAY6H,EAAEC,OAAOnB,UAG1C,uBAEChH,GACC,0BACE6D,KAAK,cACL2E,YAAY,sHACZb,UAAU,OACVc,KAAK,OACLpF,GAAG,UACH2D,MAAOxG,EACPyH,SAAU,SAACC,GAAD,OAAOzH,EAAeyH,EAAEC,OAAOnB,UAG7C,uBAEA,0BACEnD,KAAK,cACL2E,YAAY,ucACZb,UAAU,OACVc,KAAK,OACLpF,GAAG,aACH2D,MAAOtG,EACPuH,SAAU,SAACC,GAAD,OAAOvH,EAAmBuH,EAAEC,OAAOnB,UAE/C,uBACChH,GACC,wBACE2H,UAAU,eACVU,QAAS,WACP/E,KACAoC,MAJJ,iEAYH1F,GACCM,EAASoI,MAAM,GAAGxF,KAAI,SAACwC,EAAM3B,GAC3B,OACE,sBAAiB4D,UAAU,QAA3B,UAEE,yBACEA,UAAU,WACVU,QAAS,WACPjH,GAAc2C,GACdD,GAAQC,GACRS,GAAUT,GAEVvC,GAAgB,QAEhB+F,GAAOxD,IATX,iCAYQ2B,EAAK/B,KACX,uBAbF,iBAcO+B,EAAK9B,IAAIQ,WACd,uBAfF,uBAgBQsB,EAAKrD,QACX,uBAjBF,iBAkBO4C,IAAO4B,MAAMC,YAAYpB,EAAKC,QAlBrC,OAkBiD,uBAlBjD,iBAmBOD,EAAKE,KAAKxB,WACf,0BAIF,cAAC,IAAD,CACEkE,OAAQ,SAAW/G,GACnBsG,MAAO9F,GACPwG,eAAgB,WACd/G,GAAgB,IAChBE,GAAS,KALb,SAQE,sBAAK2B,GAAG,UAAR,UAIE,gEAEE,0BAEF,sBAAKsE,UAAU,QAAf,uDAEE,uBACA,sBAAKA,UAAU,OAAf,cAAwBrH,EAASa,IAAYwC,QAC7C,uBAJF,qBAME,uBAAO,IACP,qBAAKgE,UAAU,OAAf,SACGrH,EAASa,IAAYyC,IAAIQ,aAE5B,uBAVF,2BAYE,sBAAKuD,UAAU,OAAf,UACG,IACArH,EAASa,IAAYkB,WAExB,uBAhBF,iCAiBO,sBAAKsF,UAAU,OAAf,cAAwBtG,MAC7B,uBAlBF,qBAoBE,sBAAKsG,UAAU,OAAf,UACG,IACA1C,IAAO4B,MAAMC,YAAYxG,EAASa,IAAYwE,QAFjD,UAKA,uBAzBF,qBA0BM,IACJ,qBAAKgC,UAAU,OAAf,SACGrH,EAASa,IAAYyE,KAAKxB,aAE7B,uBA9BF,sBAgCE,8BACG3C,GAASyB,KAAI,SAAC0B,EAAM+D,GAAP,OACZ,qBAAahB,UAAU,OAAvB,SACG/C,GADO+D,WAQhB,0BACE9E,KAAK,cACL8D,UAAU,OACVa,YAAY,+DACZC,KAAK,OACLpF,GAAG,SACH2D,MAAOlG,EACPmH,SAAU,SAACC,GAAD,OAAOnH,EAAemH,EAAEC,OAAOnB,UAE3C,uBACA,wBACEW,UAAU,eACVU,QAAS,WACPd,GAAOpG,IACPqC,QAAQC,IAAI,WAAYxC,GACxBuG,GAAQvG,GACRF,EAAe,KANnB,kDAaA,uBACCf,GACCM,EAASa,IAAYwC,KAAKiF,eACxB,gCACE,0BACE/E,KAAK,cACL8D,UAAU,OACVa,YAAY,+JACZC,KAAK,OACLpF,GAAG,SACH2D,MAAOpG,EACPqH,SAAU,SAACC,GAAD,OAAOrH,EAAiBqH,EAAEC,OAAOnB,UAE7C,uBACA,wBACEW,UAAU,eACVU,QAAS,kBAAMzC,GAAK7B,EAAOnD,IAF7B,4CAMA,uBACA,iCAhIFmD,YC3iBxBnE,IAAMC,cAAc,SACpB,ICiCegJ,EAjDE,SAACC,GAChB,IAAMrB,EAAWC,cAIjB,OACE,gCACE,qBAAKC,UAAU,SAAf,SACE,qBAAIA,UAAU,wBAAd,UACE,sBAAMC,KAAK,MAAM,aAAW,YAA5B,0BAEQ,IAHV,2BAOF,sBAAKD,UAAU,MAAf,8BACmB,uBACjB,uBAFF,oCAIE,uBACA,uBACA,uBANF,WAOWmB,EAAMC,QACf,uBACA,uBACA,uBAVF,yCAWqBD,EAAME,KAX3B,4BAYE,uBACA,uBACA,sBACEnB,MAAO,CACLC,QAAS,OACTC,WAAY,SACZkB,eAAgB,UAJpB,UAOE,+CACA,cAACjB,EAAA,EAAD,CACEkB,eAAgBJ,EAAMV,QACtBH,SArCV,SAAuBC,GACrBA,EAAEC,OAAOC,QAAUX,EAAS,KAAOA,EAAS,YAsCtC,4DCpBV7H,IAAMC,cAAc,SACpB,IA6hCeC,EA7hCH,WAEV,MAAkCkB,IAAMjB,UAAS,GAAjD,mBAAOoJ,EAAP,KAAkBC,EAAlB,KAWA,EAAoCrJ,mBAAS,MAA7C,mBAAOsJ,EAAP,KAAmBC,EAAnB,KACA,EAA0CvJ,mBAAS,MAAnD,mBAAOwJ,EAAP,KAAsBC,EAAtB,KAGA,EAA4CzJ,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAGA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAGA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAGA,EAAgCN,mBAAS,IAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAGA,EAAsCR,mBAAS,IAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KAGA,EAA8CV,mBAAS,IAAvD,mBAAOW,EAAP,KAAwBC,EAAxB,KAGA,EAA0CZ,mBAAS,IAAnD,mBAAsBc,GAAtB,WAGA,GAAsCd,mBAAS,IAA/C,qBAAOe,GAAP,MAAoBC,GAApB,MAGA,GAAiCC,IAAMjB,UAAS,GAAhD,qBAGA,IAHA,YAG4BiB,IAAMjB,SAAS,MAA3C,qBAAOkB,GAAP,MAAgBC,GAAhB,MAGA,GAAoCF,IAAMjB,SAAS,GAAnD,qBAAOoB,GAAP,MAAmBC,GAAnB,MACA,GAAkCJ,IAAMjB,SAAS,GAAjD,qBAAOsB,GAAP,MAAkBC,GAAlB,MACA,GAAwCvB,mBAAS,IAAjD,qBAAOwB,GAAP,MAAqBC,GAArB,MAGA,GAA6BzB,mBAAS,IAAtC,qBAAO0B,GAAP,MAAiBC,GAAjB,MAEA,GAAyC3B,mBAAS,IAAlD,qBAAO0J,GAAP,MAAuBC,GAAvB,MAaM/H,GAAkB,6CAGlBC,GAAcC,EAAIA,IAGxB,GAA0B9B,mBAAS,IAAnC,qBAAc+B,IAAd,aAGMC,GAAa,CACjBC,QAAS,CACPC,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,gBAAiB,oBAGnBC,QAAS,CACPC,MAAO,QACPC,UAAW,SACXN,SAAU,WACVC,IAAK,OACLC,KAAM,OACNK,MAAO,OACPC,OAAQ,OACRL,gBAAiB,gBACjBM,aAAc,OACdC,QAAS,WAKbC,qBAAU,WACR,IAAMC,EAAqBC,YAAWrD,EAAmB,UAOzD,OALcsD,YAAWF,GAAoB,SAACG,GAC5ClB,GACEkB,EAAcC,KAAKC,KAAI,SAACC,GAAD,mBAAC,eAAcA,EAAIC,QAAnB,IAA2BC,GAAIF,EAAIE,cAI7D,IAGH,IAAMC,GAAU,iDAAG,gHAITT,EAAqBC,YAAWrD,EAAmB,QACnD8D,EAASJ,YAAIN,GAAoBQ,GACvCG,QAAQC,IAAIF,GANG,SAOWG,YAAOP,YAAIN,EAAoBU,GAAS,CAEhEI,KAAM3D,EACNqC,QAASnC,EACT0D,IAAKxD,EACLyD,KAAMnD,EACN2C,GAAIE,IAbS,8DAgBfkD,MAAM,kCAhBS,yDAAH,qDAoBV3C,GAAO,iDAAG,WAAOC,GAAP,wFACRC,EAAmBlB,YAAWrD,EAAmB,QADzC,SAERwE,YACJC,YACEF,EACAG,YAAM,UAAW,KAAM7D,EAASyD,GAAO1B,SACvC8B,YAAM,MAAO,KAAM7D,EAASyD,GAAOH,IAAIQ,cAEzCC,MAAK,SAACC,GACNA,EAASC,SAAQ,SAACpB,GAChB7B,GAAa6B,EAAIC,OAAOS,YAVd,2CAAH,sDAiBPW,GAAS,iDAAG,WAAOT,GAAP,4FACVC,EAAmBlB,YAAWrD,EAAmB,QACnDgF,EAAS,EAFG,SAGVR,YACJC,YACEF,EACAG,YAAM,UAAW,KAAM7D,EAASyD,GAAO1B,SACvC8B,YAAM,MAAO,KAAM7D,EAASyD,GAAOH,IAAIQ,cAEzCC,MAAK,SAACC,GACNA,EAASC,SAAQ,SAACpB,GAChBsB,EAAStB,EAAIC,OAAOC,GACpBG,QAAQC,IAAIgB,SAZA,cAgBVC,EAAe5B,YAAWrD,EAAD,eAA4BgF,EAA5B,YAhBf,SAkBVR,YAAQC,YAAMQ,IAAeL,MAAK,SAACC,GACvCA,EAASC,SAAQ,SAACpB,GAGhB1B,GAASkD,KAAKxB,EAAIC,OAAOwB,MACzBlD,GAASD,UAvBG,uBA0BVwC,YAAQC,YAAMQ,IAAeL,MAAK,SAACC,GACvCA,EAASC,SAAQ,SAACpB,GAChBsG,GAAe9E,KAAKxB,EAAIC,OAAOuG,QAC/BD,GAAeD,UA7BH,OAgChB1I,GAAe,IAhCC,4CAAH,sDAoCT8D,GAAW,iDAAG,+GACGC,OAAbC,EADU,EACVA,SADU,UAIZA,EAJY,wBAKRC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClBC,EAAe,IAAIL,IAAOM,SAC9B5D,GACAC,GACAwD,GAVY,SAYME,EAAaT,cAZnB,OAYRW,EAZQ,OAaRC,EAAeD,EAAMtC,KAAI,SAACwC,GAC9B,MAAO,CACL/B,KAAM+B,EAAK/B,KACXC,IAAK8B,EAAK9B,IACVvB,QAASqD,EAAKrD,QACdsD,OAAQD,EAAKC,OACbC,KAAMF,EAAKE,SAGfrF,EAAYkF,GAtBE,wBAwBdjC,QAAQC,IAAI,kCAxBE,0DA2BhBD,QAAQC,IAAR,MA3BgB,0DAAH,qDAgCjBb,qBAAU,WACR,IAAI0C,EAEEO,EAAY,SAAClC,EAAMC,EAAKvB,EAASsD,EAAQC,GAC7CpC,QAAQC,IAAI,UAAWE,EAAMC,EAAKvB,EAASsD,EAAQC,GAEnDrF,GAAY,SAACuF,GAAD,4BACPA,GADO,CAEV,CACEnC,KAAMA,EACNC,IAAKA,EACLvB,QAASA,EACTsD,OAAQA,EACRC,KAAMA,SAKZ,GAAId,OAAOC,SAAU,CACnB,IACMK,EADW,IAAIH,IAAOC,UAAUC,aAAaL,OAAOC,UAClCM,aAExBC,EAAe,IAAIL,IAAOM,SAAS5D,GAAiBC,GAAawD,IACpDW,GAAG,UAAWF,GAG7B,OAAO,WACDP,GACFA,EAAaU,IAAI,UAAWH,MAG/B,IAGHjD,qBAAU,WACR,IAAI0C,EAEEW,EAAa,SAACtC,EAAMI,GACxBP,QAAQC,IAAI,QAASE,EAAMI,IAI7B,GAAIe,OAAOC,SAAU,CACnB,IACMK,EADW,IAAIH,IAAOC,UAAUC,aAAaL,OAAOC,UAClCM,aAExBC,EAAe,IAAIL,IAAOM,SAAS5D,GAAiBC,GAAawD,IACpDW,GAAG,WAAYE,GAG9B,OAAO,WACDX,GACFA,EAAaU,IAAI,WAAYC,MAGhC,IAIH,IAAMC,GAAwB,iDAAG,2GACVpB,OAAbC,EADuB,EACvBA,SADuB,uBAI7BvB,QAAQC,IAAI,0CAJiB,0BAO7BD,QAAQC,IAAI,qCAPiB,uBAURsB,EAASoB,QAAQ,CAAEC,OAAQ,iBAVnB,cAUzBC,EAVyB,iBAWTtB,EAASoB,QAAQ,CAAEC,OAAQ,gBAXlB,QAWzBwD,EAXyB,OAaP,IAApBvD,EAASC,QAAuC,WAAvBsD,EAAQxF,YAC7BmC,EAAUF,EAAS,GACzB7C,QAAQC,IAAI,gCAAiC8C,GAC7CiD,GAAiB,GACjBvJ,EAAkBsG,GAClB1B,OAEA2E,GAAiB,GACjBhG,QAAQC,IAAI,gCArBiB,4CAAH,qDAyBxB+C,GAAa,iDAAG,2GACC1B,OAAbC,EADY,EACZA,SACRuE,EAAc,cAETvE,GACH0B,MACE,4UANgB,kBAWI1B,EAASoB,QAAQ,CAAEC,OAAQ,gBAX/B,UAaS,WAbT,OAaNhC,WAbM,kCAcOW,EAASoB,QAAQ,CACtCC,OAAQ,wBAfM,QAcVC,EAdU,OAiBhB7C,QAAQC,IAAI,8BAA+B4C,EAAS,IACpDmD,EAAiB,MACjBvJ,EAAkBoG,EAAS,IAC3BiD,EAAc,MApBE,wBAsBhB7C,MACE,gTAEF+C,GAAiB,GACjBF,EAAc,KA1BE,0DA6BlB9F,QAAQC,IAAR,MACA6F,EAAc,KA9BI,0DAAH,qDAmCb5D,GAAI,iDAAG,wHAET4D,EAAc,UAFL,EAGYxE,SAAbC,EAHC,EAGDA,UAHC,wBAKDC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClBC,EAAe,IAAIL,IAAOM,SAC9B5D,GACAC,GACAwD,GAVK,SAcqBJ,EAAS0B,WAAWpB,EAAaqB,SAdtD,cAcHC,EAdG,OAiBPpD,QAAQC,IACN,oBACAwB,IAAO4B,MAAMC,YAAYF,IAIrBG,EAAU,CAAEC,MAAO/B,IAAO4B,MAAMI,WAAWzG,IAvB1C,UAwBe8E,EAAa4B,WACjClH,EACAI,EACAF,EACA6G,GA5BK,eAwBDI,EAxBC,OA8BP3D,QAAQC,IAAI,YAAa0D,EAAQC,MA9B1B,UA+BDD,EAAQE,OA/BP,QAgCP7D,QAAQC,IAAI,YAAa0D,EAAQC,MACjCkC,EAAc,WAjCP,wBAmCPA,EAAc,SACd9F,QAAQC,IAAI,kCApCL,0DAuCT6F,EAAc,SACd9F,QAAQC,IAAR,MACI,KAAMW,WAAWyF,MAAM,UACzBpD,MAAM,4NAEF,KAAMrC,WAAWyF,MAAM,WACzBpD,MACE,kOAGE,KAAMrC,WAAWyF,MAAM,UACzBrG,QAAQC,IAAR,MAEAgD,MAAM,2WAAD,cApDF,0DAAH,qDAgEJb,GAAI,iDAAG,WAAO7B,EAAOnD,GAAd,gGACX4C,QAAQC,IAAIM,IACiB,IAAzBzD,EAASyD,GAAO6B,MAClBa,MAAM,SAAD,OACCnG,EAASyD,GAAO1B,QADjB,iKAHI,WAQYyC,SAAbC,EARC,EAQDA,WACyB,IAAjBnE,EATP,wBAUDoE,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClBC,EAAe,IAAIL,IAAOM,SAC9B5D,GACAC,GACAwD,GAfK,UAmBqBJ,EAAS0B,WAAWpB,EAAaqB,SAnBtD,eAmBHC,EAnBG,OAoBPpD,QAAQC,IACN,oBACAwB,IAAO4B,MAAMC,YAAYF,IAtBpB,UA0BetB,EAAagC,WAAWvD,EAAOnD,GA1B9C,eA0BDuG,EA1BC,OA2BP3D,QAAQC,IAAI,YAAa0D,EAAQC,MA3B1B,UA4BDD,EAAQE,OA5BP,QA6BP7D,QAAQC,IAAI,YAAa0D,EAAQC,MAGjC5D,QAAQC,IACN,oBACAwB,IAAO4B,MAAMC,YAAYF,IAlCpB,wBAqCPH,MAAM,oGArCC,0DAwCTjD,QAAQC,IAAR,MAxCS,0DAAH,wDA6CJ8D,GAAM,iDAAG,WAAOpG,GAAP,iFAEbqC,QAAQC,IAAItC,GACN6C,EAAmBlB,YAAWrD,EAAmB,QACvDwE,YACEC,YACEF,EACAG,YAAM,UAAW,KAAM7D,EAASa,GAAYkB,SAC5C8B,YAAM,MAAO,KAAM7D,EAASa,GAAYyC,IAAIQ,cAE9CC,MAAK,SAACC,GACNA,EAASC,SAAQ,SAACpB,GAChBK,QAAQC,IAAInD,EAASa,GAAYkB,SAEjCnB,GAASiC,EAAIC,OAAOC,UAdX,2CAAH,sDAqBNmE,GAAO,iDAAG,WAAOvG,GAAP,+FAGO,IAAfH,GAHQ,wBAKJ4D,EAAe5B,YACnBrD,EAD6B,eAErBwB,EAFqB,YAI/BuC,QAAQC,IAAR,eAAoBxC,EAApB,YACAuC,QAAQC,IAAIiB,GAGNnB,EAASJ,YAAIuB,GAAcrB,GACjCG,QAAQC,IAAIF,GAdF,SAegBG,YAAOP,YAAIuB,EAAcnB,GAAS,CAC1DF,GAAIE,EACJqB,KAAM9D,GACN6I,OAAQ3J,EACR8J,KAAM,IAnBE,sCAsBVrD,MAAM,4EAtBI,0DAyBZA,MAAM,oGAzBM,0DAAH,sDA6Bb7D,qBAAU,WACRsD,KAEIpB,OAAOC,UACTD,OAAOC,SAASgB,GAAG,gBAAgB,SAACgE,GAAD,OACjCjF,OAAOkF,SAASC,cAGnB,IAEcvC,cAIjB,OACE,qBAAKC,UAAU,gBAAf,SACE,sBAAKA,UAAU,gBAAf,UACG4B,GACC,sBAAK5B,UAAU,iBAAf,gCACgB,uBADhB,uDAIF,cAAC,EAAD,CAAUoB,QAAQ,OAAOC,KAAK,QAAQZ,SAAS,IAC/C,uBACA,uBACEK,KAAK,WACLpF,GAAG,SACH2D,MAAM,SACNoB,QAASe,EACTlB,SAvgBgB,SAACC,GAErBkB,EADe,GAAbD,MAwgBA,uBAAOe,QAAQ,OAAf,sFAEA,wBACElK,GAAiC,eAAfqJ,GAClB,wBAAQ1B,UAAU,aAAaU,QAAS7B,GAAxC,4BAMF,uBACA,sBAAKmB,UAAU,kBAAf,UACkB,OAAf0B,GACC,qBAAK1B,UAAW0B,EAAhB,SAA6BvE,OAAOkF,SAASC,WAE/B,eAAfZ,GACC,sBAAK1B,UAAU,SAAf,UACE,qBAAKA,UAAU,WACf,4DAGY,MAAf0B,GACC,qBAAK1B,UAAU,QAAf,SACE,2EAKL3H,GACC,wBAAQ2H,UAAU,aAAaU,QAAS,KAAxC,8BAIDrI,GACC,wBACE2H,UAAU,aACVU,QAAS,WACP7G,GAAgB,WAHpB,8DAWF,uBACA,sBAAKmG,UAAU,kBAAf,UACkB,YAAf0B,GACC,qBAAK1B,UAAW0B,EAAhB,SACE,2CAGY,WAAfA,GACC,sBAAK1B,UAAW0B,EAAhB,UACE,qBAAK1B,UAAU,WACf,4DAGY,UAAf0B,GACC,qBAAK1B,UAAW0B,EAAhB,SACE,yHASN,eAAC,IAAD,CACEf,OAAQ,WAAa/G,GACrBsG,MAAO9F,GACPwG,eAAgB,kBAAM/G,GAAgB,KAHxC,UAKE,sEAECxB,GACC,0BACE6D,KAAK,cACL8D,UAAU,OACVa,YAAY,uKACZC,KAAK,OACLpF,GAAG,UACH2D,MAAO9G,EACP+H,SAAU,SAACC,GAAD,OAAO/H,EAAgB+H,EAAEC,OAAOnB,UAG9C,uBAEChH,GACC,0BACE6D,KAAK,cACL8D,UAAU,OACVa,YAAY,2FACZC,KAAK,OACLpF,GAAG,UACH2D,MAAO5G,EACP6H,SAAU,SAACC,GAAD,OAAO7H,EAAY6H,EAAEC,OAAOnB,UAG1C,uBAEChH,GACC,0BACE6D,KAAK,cACL2E,YAAY,sHACZb,UAAU,OACVc,KAAK,OACLpF,GAAG,UACH2D,MAAOxG,EACPyH,SAAU,SAACC,GAAD,OAAOzH,EAAeyH,EAAEC,OAAOnB,UAG7C,uBAEA,0BACEnD,KAAK,cACL2E,YAAY,ucACZb,UAAU,OACVc,KAAK,OACLpF,GAAG,aACH2D,MAAOtG,EACPuH,SAAU,SAACC,GAAD,OAAOvH,EAAmBuH,EAAEC,OAAOnB,UAE/C,uBACChH,GACC,wBACE2H,UAAU,eACVU,QAAS,WACP/E,KACAoC,KACAlE,GAAgB,KALpB,iEAaHxB,GACCM,EAASoI,MAAM,GAAGxF,KAAI,SAACwC,EAAM3B,GAC3B,OACE,sBAAiB4D,UAAU,QAA3B,UAGgB,GAAbwB,GAA6C,SAAxBzD,EAAKE,KAAKxB,YAC9B,gCACE,yBACEuD,UAAU,WACVU,QAAS,WACPjH,GAAc2C,GACdD,GAAQC,GACRS,GAAUT,GAEVvC,GAAgB,QAEhB+F,GAAOxD,IATX,iCAYQ2B,EAAK/B,KACX,uBAbF,iBAcO+B,EAAK9B,IAAIQ,WACd,uBAfF,uBAgBQsB,EAAKrD,QACX,uBAjBF,iBAkBO4C,IAAO4B,MAAMC,YAAYpB,EAAKC,QAlBrC,OAkBiD,uBAlBjD,iBAmBOD,EAAKE,KAAKxB,WACf,0BAIF,cAAC,IAAD,CACEkE,OAAQ,SAAW/G,GACnBsG,MAAO9F,GACPwG,eAAgB,WACd/G,GAAgB,IAChBX,EAAiB,IACjBa,GAAS,KANb,SASE,sBAAK2B,GAAG,UAAR,UAIE,gEAEE,0BAEF,sBAAKsE,UAAU,QAAf,uDAEE,uBACA,sBAAKA,UAAU,OAAf,UACG,IACArH,EAASa,IAAYwC,QAExB,uBAPF,qBASE,uBAAO,IACP,qBAAKgE,UAAU,OAAf,SACGrH,EAASa,IAAYyC,IAAIQ,aAE5B,uBAbF,2BAeE,sBAAKuD,UAAU,OAAf,UACG,IACArH,EAASa,IAAYkB,WAExB,uBAnBF,iCAoBO,sBAAKsF,UAAU,OAAf,cAAwBtG,MAC7B,uBArBF,qBAuBE,sBAAKsG,UAAU,OAAf,UACG,IACA1C,IAAO4B,MAAMC,YACZxG,EAASa,IAAYwE,QAHzB,UAOA,uBA9BF,qBA+BM,IACJ,qBAAKgC,UAAU,OAAf,SACGrH,EAASa,IAAYyE,KAAKxB,aAE7B,uBAnCF,sBAwCE,kCACE,gCACE,qBAAIuD,UAAU,QAAd,UACE,oBAAIwC,MAAM,MAAMxC,UAAU,aAA1B,sCAGA,oBAAIwC,MAAM,MAAMxC,UAAU,aAA1B,gCAIC3H,GACCM,EAASa,IAAYwC,KAAKiF,eAC1B,oBAAIuB,MAAM,MAAMxC,UAAU,aAA1B,+BAMN,gCACE,qBAAIA,UAAU,GAAd,UACE,oBAAI,aAAW,2BAAOA,UAAU,GAAhC,SACG8B,GAAevG,KAAI,SAACyG,EAAQhB,GAAT,OAClB,oBAEEhB,UAAU,GACVyC,KAAI,uCAAkCT,GACtCxB,OAAO,SAJT,UAMGwB,EAAOjB,MAAM,EAAG,GANnB,MAOE,uBACA,yBAPKC,QAWX,oBAAI,aAAW,qBAAMhB,UAAU,GAA/B,SACGlG,GAASyB,KAAI,SAAC0B,EAAM+D,GAAP,OACZ,8BACE,oBAEEhB,UAAU,GACVyC,KAAMxF,EACNuD,OAAO,SAJT,UAMG,IACAvD,EAAK8D,MAAM,EAAG,IAPjB,MAQE,uBACA,yBARKC,UAiBb,oBAAI,aAAW,qBAAMhB,UAAU,GAA/B,SACG3H,GACCM,EAASa,IAAYwC,KAAKiF,eAC1Ba,GAAevG,KAAI,SAACyG,EAAQhB,GAAT,OACjB,gCACE,wBAEEhB,UAAU,eACVU,QAAS,kBAAMzC,GAAK7B,EAAO4F,IAH7B,2CACOhB,GAMP,0CAUhB,0BACE9E,KAAK,cACL8D,UAAU,OACVa,YAAY,+DACZC,KAAK,OACLpF,GAAG,SACH2D,MAAOlG,GACPmH,SAAU,SAACC,GAAD,OAAOnH,GAAemH,EAAEC,OAAOnB,UAE3C,uBACA,wBACEW,UAAU,eACVU,QAAS,WACPd,GAAOpG,IACPqC,QAAQC,IAAI,WAAYxC,IACxBuG,GAAQvG,KALZ,kDAYA,+BAMM,GAAbkI,GACC,gCACE,yBACExB,UAAU,WACVU,QAAS,WACPjH,GAAc2C,GACdD,GAAQC,GACRS,GAAUT,GAEVvC,GAAgB,QAEhB+F,GAAOxD,IATX,iCAYQ2B,EAAK/B,KACX,uBAbF,iBAcO+B,EAAK9B,IAAIQ,WACd,uBAfF,uBAgBQsB,EAAKrD,QACX,uBAjBF,iBAkBO4C,IAAO4B,MAAMC,YAAYpB,EAAKC,QAlBrC,OAkBiD,uBAlBjD,iBAmBOD,EAAKE,KAAKxB,WACf,0BAIF,cAAC,IAAD,CACEkE,OAAQ,SAAW/G,GACnBsG,MAAO9F,GACPwG,eAAgB,WACd/G,GAAgB,IAChBX,EAAiB,IACjBa,GAAS,KANb,SASE,sBAAK2B,GAAG,UAAR,UAIE,gEAEE,0BAEF,sBAAKsE,UAAU,QAAf,uDAEE,uBACA,sBAAKA,UAAU,OAAf,UACG,IACArH,EAASa,IAAYwC,QAExB,uBAPF,qBASE,uBAAO,IACP,qBAAKgE,UAAU,OAAf,SACGrH,EAASa,IAAYyC,IAAIQ,aAE5B,uBAbF,2BAeE,sBAAKuD,UAAU,OAAf,UACG,IACArH,EAASa,IAAYkB,WAExB,uBAnBF,iCAoBO,sBAAKsF,UAAU,OAAf,cAAwBtG,MAC7B,uBArBF,qBAuBE,sBAAKsG,UAAU,OAAf,UACG,IACA1C,IAAO4B,MAAMC,YACZxG,EAASa,IAAYwE,QAHzB,UAOA,uBA9BF,qBA+BM,IACJ,qBAAKgC,UAAU,OAAf,SACGrH,EAASa,IAAYyE,KAAKxB,aAE7B,uBAnCF,sBAwCE,kCACE,gCACE,qBAAIuD,UAAU,QAAd,UACE,oBAAIwC,MAAM,MAAMxC,UAAU,aAA1B,sCAGA,oBAAIwC,MAAM,MAAMxC,UAAU,aAA1B,gCAIC3H,GACCM,EAASa,IAAYwC,KAAKiF,eAC1B,oBAAIuB,MAAM,MAAMxC,UAAU,aAA1B,+BAMN,gCACE,qBAAIA,UAAU,GAAd,UACE,oBAAI,aAAW,2BAAOA,UAAU,GAAhC,SACG8B,GAAevG,KAAI,SAACyG,EAAQhB,GAAT,OAClB,oBAEEhB,UAAU,GACVyC,KAAI,uCAAkCT,GACtCxB,OAAO,SAJT,UAMGwB,EAAOjB,MAAM,EAAG,GANnB,MAOE,uBACA,yBAPKC,QAWX,oBAAI,aAAW,qBAAMhB,UAAU,GAA/B,SACGlG,GAASyB,KAAI,SAAC0B,EAAM+D,GAAP,OACZ,8BACE,oBAEEhB,UAAU,GACVyC,KAAMxF,EACNuD,OAAO,SAJT,UAMG,IACAvD,EAAK8D,MAAM,EAAG,IAPjB,MAQE,uBACA,yBARKC,UAiBb,oBAAI,aAAW,qBAAMhB,UAAU,GAA/B,SACG3H,GACCM,EAASa,IAAYwC,KAAKiF,eAC1Ba,GAAevG,KAAI,SAACyG,EAAQhB,GAAT,OACjB,gCACE,wBAEEhB,UAAU,eACVU,QAAS,kBAAMzC,GAAK7B,EAAO4F,IAH7B,2CACOhB,GAMP,0CAUhB,0BACE9E,KAAK,cACL8D,UAAU,OACVa,YAAY,+DACZC,KAAK,OACLpF,GAAG,SACH2D,MAAOlG,GACPmH,SAAU,SAACC,GAAD,OAAOnH,GAAemH,EAAEC,OAAOnB,UAE3C,uBACA,wBACEW,UAAU,eACVU,QAAS,WACPd,GAAOpG,IACPqC,QAAQC,IAAI,WAAYxC,IACxBuG,GAAQvG,KALZ,kDAYA,iCArXA8C,Y,4BCjrBlBsG,E,4JAEF,WACI,OACI,0CAEI,uBACA,cAAC,IAAD,CAAMC,GAAE,IAAR,uBAGA,uBACA,uBAPJ,UASI,uBACA,cAAC,IAAD,CAAMA,GAAE,IAAR,8B,GAdKtJ,IAAMuJ,WAqBZF,ICgCAG,EAlDF,WACT,MAAwCzK,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA4CJ,mBAAS,IAArD,mBAGMsG,GAHN,UACqBvB,OAAbC,SAEkBoB,QAAQ,CAAEC,OAAQ,kBAC5C,GAAwB,IAApBC,EAASC,OAAc,CACvB,IAAMC,EAAUF,EAAS,GACzB7C,QAAQC,IAAI,+BAAgC8C,QAG5C/C,QAAQC,IAAI,+BAEhB,OACI,qBAAKkE,UAAU,gBAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,qBAAKA,UAAU,SAAf,4CAGA,qBAAKA,UAAU,MAAf,kGAGA,uBAPJ,UASI,uBACA,cAAC,IAAD,CAAM2C,GAAE,IAAR,uBACA,uBAXJ,UAcI,uBACA,cAAC,IAAD,CAAMA,GAAE,UAAR,0BACA,uBAEA,wBAAQ3C,UAAU,aAAaU,QAAS,KAAxC,8DAGA,uBACA,0BAAUxE,KAAK,cACX2E,YAAY,2EACZC,KAAK,OACLpF,GAAG,UACH2D,MAAO9G,EACP+H,SAAU,SAAAC,GAAC,OAAI/H,EAAgB+H,EAAEC,OAAOnB,gB,kBCnB5DpH,IAAMC,cAAc,SACpB,IAmiCeC,EAniCH,WAEV,MAAkCkB,IAAMjB,UAAS,GAAjD,mBAAOoJ,EAAP,KAAkBC,EAAlB,KAWA,EAAoCrJ,mBAAS,MAA7C,mBAAOsJ,EAAP,KAAmBC,EAAnB,KACA,EAA0CvJ,mBAAS,MAAnD,mBAAOwJ,EAAP,KAAsBC,EAAtB,KAGA,EAA4CzJ,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAGA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAGA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAGA,EAAgCN,mBAAS,IAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAGA,EAAsCR,mBAAS,IAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KAGA,EAA8CV,mBAAS,IAAvD,mBAAOW,EAAP,KAAwBC,EAAxB,KAGA,EAA0CZ,mBAAS,IAAnD,oBAAsBc,IAAtB,aAGA,GAAsCG,IAAMjB,SAAS,KAArD,qBAAOe,GAAP,MAAoBC,GAApB,MAGA,GAAiCC,IAAMjB,UAAS,GAAhD,qBAGA,IAHA,YAG4BiB,IAAMjB,SAAS,MAA3C,qBAAOkB,GAAP,MAAgBC,GAAhB,MAGA,GAAoCF,IAAMjB,SAAS,GAAnD,qBAAOoB,GAAP,MAAmBC,GAAnB,MACA,GAAkCJ,IAAMjB,SAAS,GAAjD,qBAAOsB,GAAP,MAAkBC,GAAlB,MACA,GAAwCvB,mBAAS,IAAjD,qBAAOwB,GAAP,MAAqBC,GAArB,MAGA,GAA6BzB,mBAAS,IAAtC,qBAAO0B,GAAP,MAAiBC,GAAjB,MAEA,GAAyC3B,mBAAS,IAAlD,qBAAO0J,GAAP,MAAuBC,GAAvB,MAEA,GAAqC3J,mBAAS,IAA9C,qBAAO0K,GAAP,MAAqBC,GAArB,MAWM/I,GAAkB,6CAGlBC,GAAcC,EAAIA,IAGxB,GAA0B9B,mBAAS,IAAnC,qBAAc+B,IAAd,aAGMC,GAAa,CACjBC,QAAS,CACPC,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,gBAAiB,oBAGnBC,QAAS,CACPC,MAAO,QACPC,UAAW,SACXN,SAAU,WACVC,IAAK,OACLC,KAAM,OACNK,MAAO,OACPC,OAAQ,OACRL,gBAAiB,gBACjBM,aAAc,OACdC,QAAS,WAKbC,qBAAU,WACR,IAAMC,EAAqBC,YAAWrD,EAAmB,UAOzD,OALcsD,YAAWF,GAAoB,SAACG,GAC5ClB,GACEkB,EAAcC,KAAKC,KAAI,SAACC,GAAD,mBAAC,eAAcA,EAAIC,QAAnB,IAA2BC,GAAIF,EAAIE,cAI7D,IAGH,IAAMC,GAAU,iDAAG,uGAEXT,EAAqBC,YAAWrD,EAAmB,QACnD8D,EAASJ,YAAIN,GAAoBQ,GACvCG,QAAQC,IAAIF,GAJK,SAKSG,YAAOP,YAAIN,EAAoBU,GAAS,CAEhEI,KAAM3D,EACNqC,QAASnC,EACT0D,IAAKxD,EACLyD,KAAMnD,EACN2C,GAAIE,IAXW,yDAAH,qDAeVO,GAAO,iDAAG,WAAOC,GAAP,wFACRC,EAAmBlB,YAAWrD,EAAmB,QADzC,SAERwE,YACJC,YACEF,EACAG,YAAM,UAAW,KAAM7D,EAASyD,GAAO1B,SACvC8B,YAAM,MAAO,KAAM7D,EAASyD,GAAOH,IAAIQ,cAEzCC,MAAK,SAACC,GACNA,EAASC,SAAQ,SAACpB,GAChB7B,GAAa6B,EAAIC,OAAOS,YAVd,2CAAH,sDAiBPW,GAAS,iDAAG,WAAOT,GAAP,4FACVC,EAAmBlB,YAAWrD,EAAmB,QACnDgF,EAAS,EAFG,SAGVR,YACJC,YACEF,EACAG,YAAM,UAAW,KAAM7D,EAASyD,GAAO1B,SACvC8B,YAAM,MAAO,KAAM7D,EAASyD,GAAOH,IAAIQ,cAEzCC,MAAK,SAACC,GACNA,EAASC,SAAQ,SAACpB,GAChBsB,EAAStB,EAAIC,OAAOC,GACpBG,QAAQC,IAAIgB,SAZA,cAgBVC,EAAe5B,YAAWrD,EAAD,eAA4BgF,EAA5B,YAhBf,SAkBVR,YAAQC,YAAMQ,IAAeL,MAAK,SAACC,GACvCA,EAASC,SAAQ,SAACpB,GAGhB1B,GAASkD,KAAKxB,EAAIC,OAAOwB,MACzBlD,GAASD,UAvBG,uBA0BVwC,YAAQC,YAAMQ,IAAeL,MAAK,SAACC,GACvCA,EAASC,SAAQ,SAACpB,GAChBsG,GAAe9E,KAAKxB,EAAIC,OAAOuG,QAC/BD,GAAeD,UA7BH,wBAgCVxF,YAAQC,YAAMQ,IAAeL,MAAK,SAACC,GACvCA,EAASC,SAAQ,SAACpB,GAChBsH,GAAa9F,KAAKxB,EAAIC,OAAO0G,MAC7BY,GAAaD,UAnCD,QAsChB1J,GAAe,IAtCC,4CAAH,sDA0CT8D,GAAW,iDAAG,+GACGC,OAAbC,EADU,EACVA,SADU,UAIZA,EAJY,wBAKRC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClBC,EAAe,IAAIL,IAAOM,SAC9B5D,GACAC,GACAwD,GAVY,SAYME,EAAaT,cAZnB,OAYRW,EAZQ,OAaRC,EAAeD,EAAMtC,KAAI,SAACwC,GAC9B,MAAO,CACL/B,KAAM+B,EAAK/B,KACXC,IAAK8B,EAAK9B,IACVvB,QAASqD,EAAKrD,QACdsD,OAAQD,EAAKC,OACbC,KAAMF,EAAKE,SAGfrF,EAAYkF,GAtBE,wBAwBdjC,QAAQC,IAAI,kCAxBE,0DA2BhBD,QAAQC,IAAR,MA3BgB,0DAAH,qDAgCjBb,qBAAU,WACR,IAAI0C,EAEEO,EAAY,SAAClC,EAAMC,EAAKvB,EAASsD,EAAQC,GAC7CpC,QAAQC,IAAI,UAAWE,EAAMC,EAAKvB,EAASsD,EAAQC,GAEnDrF,GAAY,SAACuF,GAAD,4BACPA,GADO,CAEV,CACEnC,KAAMA,EACNC,IAAKA,EACLvB,QAASA,EACTsD,OAAQA,EACRC,KAAMA,SAKZ,GAAId,OAAOC,SAAU,CACnB,IACMK,EADW,IAAIH,IAAOC,UAAUC,aAAaL,OAAOC,UAClCM,aAExBC,EAAe,IAAIL,IAAOM,SAAS5D,GAAiBC,GAAawD,IACpDW,GAAG,UAAWF,GAG7B,OAAO,WACDP,GACFA,EAAaU,IAAI,UAAWH,MAG/B,IAGHjD,qBAAU,WACR,IAAI0C,EAEEW,EAAa,SAACtC,EAAMI,GACxBP,QAAQC,IAAI,QAASE,EAAMI,IAI7B,GAAIe,OAAOC,SAAU,CACnB,IACMK,EADW,IAAIH,IAAOC,UAAUC,aAAaL,OAAOC,UAClCM,aAExBC,EAAe,IAAIL,IAAOM,SAAS5D,GAAiBC,GAAawD,IACpDW,GAAG,WAAYE,GAG9B,OAAO,WACDX,GACFA,EAAaU,IAAI,WAAYC,MAGhC,IAIH,IAAMC,GAAwB,iDAAG,2GACVpB,OAAbC,EADuB,EACvBA,SADuB,uBAI7BvB,QAAQC,IAAI,0CAJiB,0BAO7BD,QAAQC,IAAI,qCAPiB,uBAURsB,EAASoB,QAAQ,CAAEC,OAAQ,iBAVnB,cAUzBC,EAVyB,iBAWTtB,EAASoB,QAAQ,CAAEC,OAAQ,gBAXlB,QAWzBwD,EAXyB,OAaP,IAApBvD,EAASC,QAAuC,QAAvBsD,EAAQxF,YAC7BmC,EAAUF,EAAS,GACzB7C,QAAQC,IAAI,gCAAiC8C,GAC7CiD,GAAiB,GACjBvJ,EAAkBsG,GAClB1B,OAEA2E,GAAiB,GACjBhG,QAAQC,IAAI,gCArBiB,4CAAH,qDAyBxB+C,GAAa,iDAAG,2GACC1B,OAAbC,EADY,EACZA,SACRuE,EAAc,cAETvE,GACH0B,MACE,4UANgB,kBAWI1B,EAASoB,QAAQ,CAAEC,OAAQ,gBAX/B,UAaS,QAbT,OAaNhC,WAbM,kCAcOW,EAASoB,QAAQ,CACtCC,OAAQ,wBAfM,QAcVC,EAdU,OAiBhB7C,QAAQC,IAAI,8BAA+B4C,EAAS,IACpDmD,EAAiB,MACjBvJ,EAAkBoG,EAAS,IAC3BiD,EAAc,MApBE,wBAsBhB7C,MACE,4YAEF+C,GAAiB,GACjBF,EAAc,KA1BE,0DA6BlB9F,QAAQC,IAAR,MACA6F,EAAc,KA9BI,0DAAH,qDAmCb5D,GAAI,iDAAG,wHAET4D,EAAc,UAFL,EAGYxE,SAAbC,EAHC,EAGDA,UAHC,wBAKDC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClBC,EAAe,IAAIL,IAAOM,SAC9B5D,GACAC,GACAwD,GAVK,SAcqBJ,EAAS0B,WAAWpB,EAAaqB,SAdtD,cAcHC,EAdG,OAiBPpD,QAAQC,IACN,oBACAwB,IAAO4B,MAAMC,YAAYF,IAIrBG,EAAU,CAAEC,MAAO/B,IAAO4B,MAAMI,WAAWzG,IAvB1C,UAwBe8E,EAAa4B,WACjClH,EACAI,EACAF,EACA6G,GA5BK,eAwBDI,EAxBC,OA8BP3D,QAAQC,IAAI,YAAa0D,EAAQC,MA9B1B,UA+BDD,EAAQE,OA/BP,QAgCP7D,QAAQC,IAAI,YAAa0D,EAAQC,MACjCkC,EAAc,WAjCP,wBAmCPA,EAAc,SACd9F,QAAQC,IAAI,kCApCL,0DAuCT6F,EAAc,SACd9F,QAAQC,IAAR,MACI,KAAMW,WAAWyF,MAAM,UACzBpD,MAAM,4NAEF,KAAMrC,WAAWyF,MAAM,WACzBpD,MACE,kOAGE,KAAMrC,WAAWyF,MAAM,UACzBrG,QAAQC,IAAR,MAEAgD,MAAM,2XAAD,cApDF,0DAAH,qDAgEJb,GAAI,iDAAG,WAAO7B,EAAOnD,GAAd,gGACX4C,QAAQC,IAAIM,IACiB,IAAzBzD,EAASyD,GAAO6B,MAClBa,MAAM,SAAD,OACCnG,EAASyD,GAAO1B,QADjB,iKAHI,WAQYyC,SAAbC,EARC,EAQDA,WACyB,IAAjBnE,EATP,wBAUDoE,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClBC,EAAe,IAAIL,IAAOM,SAC9B5D,GACAC,GACAwD,GAfK,UAmBqBJ,EAAS0B,WAAWpB,EAAaqB,SAnBtD,eAmBHC,EAnBG,OAoBPpD,QAAQC,IACN,oBACAwB,IAAO4B,MAAMC,YAAYF,IAtBpB,UA0BetB,EAAagC,WAAWvD,EAAOnD,GA1B9C,eA0BDuG,EA1BC,OA2BP3D,QAAQC,IAAI,YAAa0D,EAAQC,MA3B1B,UA4BDD,EAAQE,OA5BP,QA6BP7D,QAAQC,IAAI,YAAa0D,EAAQC,MAGjC5D,QAAQC,IACN,oBACAwB,IAAO4B,MAAMC,YAAYF,IAlCpB,wBAqCPH,MAAM,8OArCC,0DA0CTjD,QAAQC,IAAR,MA1CS,0DAAH,wDA+CJ8D,GAAM,iDAAG,WAAOpG,GAAP,iFAEbqC,QAAQC,IAAItC,GACN6C,EAAmBlB,YAAWrD,EAAmB,QACvDwE,YACEC,YACEF,EACAG,YAAM,UAAW,KAAM7D,EAASa,GAAYkB,SAC5C8B,YAAM,MAAO,KAAM7D,EAASa,GAAYyC,IAAIQ,cAE9CC,MAAK,SAACC,GACNA,EAASC,SAAQ,SAACpB,GAChBK,QAAQC,IAAInD,EAASa,GAAYkB,SAEjCnB,GAASiC,EAAIC,OAAOC,UAdX,2CAAH,sDAqBNmE,GAAO,iDAAG,WAAOvG,GAAP,+FAGO,IAAfH,GAHQ,wBAKJ4D,EAAe5B,YACnBrD,EAD6B,eAErBwB,EAFqB,YAI/BuC,QAAQC,IAAR,eAAoBxC,EAApB,YACAuC,QAAQC,IAAIiB,GAGNnB,EAASJ,YAAIuB,GAAcrB,GACjCG,QAAQC,IAAIF,GAdF,SAegBG,YAAOP,YAAIuB,EAAcnB,GAAS,CAC1DF,GAAIE,EACJqB,KAAM9D,GACN6I,OAAQ3J,EACR8J,KAAM,IAnBE,sCAsBVrD,MAAM,4EAtBI,0DAyBZA,MAAM,gEAzBM,0DAAH,sDA6Bb7D,qBAAU,WACRsD,KAEIpB,OAAOC,UACTD,OAAOC,SAASgB,GAAG,gBAAgB,SAACgE,GAAD,OACjCjF,OAAOkF,SAASC,cAGnB,IAEcvC,cAIjB,OACE,qBAAKC,UAAU,gBAAf,SACE,sBAAKA,UAAU,gBAAf,UACG4B,GACC,sBAAK5B,UAAU,iBAAf,mCACmB,uBADnB,uDAIF,cAAC,EAAD,CAAUoB,QAAQ,UAAUC,KAAK,OAAOZ,SAAS,IAEjD,uBAEA,cAACuC,EAAA,EAAD,CACEC,MAAM,qEACN5D,MAAM,SACN6D,QACE,cAACC,EAAA,EAAD,CACE1C,QAASe,EACTlB,SA7gBY,SAACC,GAErBkB,EADe,GAAbD,IA6gBMtF,KAAK,uBAKX,wBAEE7D,GAAiC,eAAfqJ,GAClB,wBAAQ1B,UAAU,aAAaU,QAAS7B,GAAxC,4BAMF,uBACA,sBAAKmB,UAAU,kBAAf,UACkB,OAAf0B,GACC,qBAAK1B,UAAW0B,EAAhB,SAA6BvE,OAAOkF,SAASC,WAE/B,eAAfZ,GACC,sBAAK1B,UAAU,SAAf,UACE,qBAAKA,UAAU,WACf,4DAGY,MAAf0B,GACC,qBAAK1B,UAAU,QAAf,SACE,2EAKL3H,GACC,wBAAQ2H,UAAU,aAAaU,QAAS,KAAxC,8BAIDrI,GAAiC,WAAfqJ,GACjB,wBACE1B,UAAU,aACVU,QAAS,WACP7G,GAAgB,WAHpB,8DAWF,uBACA,sBAAKmG,UAAU,kBAAf,UACkB,YAAf0B,GACC,qBAAK1B,UAAW0B,EAAhB,SACE,2CAGY,WAAfA,GACC,sBAAK1B,UAAW0B,EAAhB,UACE,qBAAK1B,UAAU,WACf,4DAGY,UAAf0B,GACC,qBAAK1B,UAAW0B,EAAhB,SACE,wHASN,eAAC,IAAD,CACEf,OAAQ,WAAa/G,GACrBsG,MAAO9F,GACPwG,eAAgB,kBAAM/G,GAAgB,KAHxC,UAKE,sEAECxB,GACC,0BACE6D,KAAK,cACL8D,UAAU,OACVa,YAAY,uKACZC,KAAK,OACLpF,GAAG,UACH2D,MAAO9G,EACP+H,SAAU,SAACC,GAAD,OAAO/H,EAAgB+H,EAAEC,OAAOnB,UAG9C,uBAEChH,GACC,0BACE6D,KAAK,cACL8D,UAAU,OACVa,YAAY,2FACZC,KAAK,OACLpF,GAAG,UACH2D,MAAO5G,EACP6H,SAAU,SAACC,GAAD,OAAO7H,EAAY6H,EAAEC,OAAOnB,UAG1C,uBAEChH,GACC,0BACE6D,KAAK,cACL2E,YAAY,qHACZb,UAAU,OACVc,KAAK,OACLpF,GAAG,UACH2D,MAAOxG,EACPyH,SAAU,SAACC,GAAD,OAAOzH,EAAeyH,EAAEC,OAAOnB,UAG7C,uBAEA,0BACEnD,KAAK,cACL2E,YAAY,ucACZb,UAAU,OACVc,KAAK,OACLpF,GAAG,aACH2D,MAAOtG,EACPuH,SAAU,SAACC,GAAD,OAAOvH,EAAmBuH,EAAEC,OAAOnB,UAE/C,uBACChH,GACC,wBACE2H,UAAU,eACVU,QAAS,WACP/E,KACAoC,KACAlE,GAAgB,KALpB,iEAaHxB,GACCM,EAASoI,MAAM,GAAGxF,KAAI,SAACwC,EAAM3B,GAC3B,OACE,sBAAiB4D,UAAU,QAA3B,UAIgB,GAAbwB,GAA6C,SAAxBzD,EAAKE,KAAKxB,YAC9B,gCACE,yBACEuD,UAAU,WACVU,QAAS,WACPjH,GAAc2C,GACdD,GAAQC,GACRS,GAAUT,GAEVvC,GAAgB,QAEhB+F,GAAOxD,IATX,iCAYQ2B,EAAK/B,KACX,uBAbF,iBAcO+B,EAAK9B,IAAIQ,WACd,uBAfF,uBAgBQsB,EAAKrD,QACX,uBAjBF,iBAkBO4C,IAAO4B,MAAMC,YAAYpB,EAAKC,QAlBrC,MAkBgD,uBAlBhD,iBAmBOD,EAAKE,KAAKxB,WACf,0BAIF,cAAC,IAAD,CACEkE,OAAQ,SAAW/G,GACnBsG,MAAO9F,GACPwG,eAAgB,WACd/G,GAAgB,IAChBX,GAAiB,IACjBa,GAAS,IACTgI,GAAe,IACfgB,GAAa,KARjB,SAWE,sBAAKrH,GAAG,UAAR,UAIE,gEAEE,0BAEF,sBAAKsE,UAAU,QAAf,uDAEE,uBACA,sBAAKA,UAAU,OAAf,UACG,IACArH,EAASa,IAAYwC,QAExB,uBAPF,qBASE,uBAAO,IACP,qBAAKgE,UAAU,OAAf,SACGrH,EAASa,IAAYyC,IAAIQ,aAE5B,uBAbF,2BAeE,sBAAKuD,UAAU,OAAf,UACG,IACArH,EAASa,IAAYkB,WAExB,uBAnBF,iCAoBO,sBAAKsF,UAAU,OAAf,cAAwBtG,MAC7B,uBArBF,qBAuBE,sBAAKsG,UAAU,OAAf,UACG,IACA1C,IAAO4B,MAAMC,YACZxG,EAASa,IAAYwE,QAHzB,SAOA,uBA9BF,qBA+BM,IACJ,qBAAKgC,UAAU,OAAf,SACGrH,EAASa,IAAYyE,KAAKxB,aAE7B,uBAnCF,sBAqCE,kCACE,gCACE,qBAAIuD,UAAU,QAAd,UACE,oBAAIwC,MAAM,MAAMxC,UAAU,aAA1B,sCAGA,oBAAIwC,MAAM,MAAMxC,UAAU,aAA1B,gCAIC3H,GACCM,EAASa,IAAYwC,KAAKiF,eAC1B,oBAAIuB,MAAM,MAAMxC,UAAU,aAA1B,+BAMN,gCACE,qBAAIA,UAAU,GAAd,UACE,oBAAI,aAAW,2BAAOA,UAAU,GAAhC,SACG8B,GAAevG,KAAI,SAACyG,EAAQhB,GAAT,OAClB,oBAEEhB,UAAU,GACVyC,KAAI,uCAAkCT,GACtCxB,OAAO,SAJT,UAMGwB,EAAOjB,MAAM,EAAG,GANnB,MAOE,uBACA,yBAPKC,QAWX,oBAAI,aAAW,qBAAMhB,UAAU,GAA/B,SACGlG,GAASyB,KAAI,SAAC0B,EAAM+D,GAAP,OACZ,8BACE,oBAEEhB,UAAU,GACVyC,KAAMxF,EACNuD,OAAO,SAJT,UAMG,IACAvD,EAAK8D,MAAM,EAAG,IAPjB,MAQE,uBACA,yBARKC,UAiBb,oBAAI,aAAW,qBAAMhB,UAAU,GAA/B,SACG3H,GACCM,EAASa,IAAYwC,KAAKiF,eAC1Ba,GAAevG,KAAI,SAACyG,EAAQhB,GAAT,OACjB,gCACE,wBAEEhB,UAAU,eACVU,QAAS,kBAAMzC,GAAK7B,EAAO4F,IAH7B,2CACOhB,GAMP,0CAUhB,0BACE9E,KAAK,cACL8D,UAAU,OACVa,YAAY,+DACZC,KAAK,OACLpF,GAAG,SACH2D,MAAOlG,GACPmH,SAAU,SAACC,GAAD,OAAOnH,GAAemH,EAAEC,OAAOnB,UAE3C,uBACA,wBACEW,UAAU,eACVU,QAAS,SAACH,GACRX,GAAOpG,IACPqC,QAAQC,IAAI,WAAYxC,IACxBuG,GAAQvG,IACRuD,GAAUT,GACVhD,GAAe,KAPnB,0DAiBM,GAAboI,GACC,gCACE,yBACExB,UAAU,WACVU,QAAS,WACPjH,GAAc2C,GACdD,GAAQC,GACRS,GAAUT,GAEVvC,GAAgB,QAEhB+F,GAAOxD,IATX,iCAYQ2B,EAAK/B,KACX,uBAbF,iBAcO+B,EAAK9B,IAAIQ,WACd,uBAfF,uBAgBQsB,EAAKrD,QACX,uBAjBF,iBAkBO4C,IAAO4B,MAAMC,YAAYpB,EAAKC,QAlBrC,MAkBgD,uBAlBhD,iBAmBOD,EAAKE,KAAKxB,WACf,0BAIF,cAAC,IAAD,CACEkE,OAAQ,SAAW/G,GACnBsG,MAAO9F,GACPwG,eAAgB,WACd/G,GAAgB,IAChBX,GAAiB,IACjBa,GAAS,IACTgI,GAAe,IACfgB,GAAa,KARjB,SAWE,sBAAKrH,GAAG,UAAR,UAIE,gEAEE,0BAEF,sBAAKsE,UAAU,QAAf,uDAEE,uBACA,sBAAKA,UAAU,OAAf,UACG,IACArH,EAASa,IAAYwC,QAExB,uBAPF,qBASE,uBAAO,IACP,qBAAKgE,UAAU,OAAf,SACGrH,EAASa,IAAYyC,IAAIQ,aAE5B,uBAbF,2BAeE,sBAAKuD,UAAU,OAAf,UACG,IACArH,EAASa,IAAYkB,WAExB,uBAnBF,iCAoBO,sBAAKsF,UAAU,OAAf,cAAwBtG,MAC7B,uBArBF,qBAuBE,sBAAKsG,UAAU,OAAf,UACG,IACA1C,IAAO4B,MAAMC,YACZxG,EAASa,IAAYwE,QAHzB,SAOA,uBA9BF,qBA+BM,IACJ,qBAAKgC,UAAU,OAAf,SACGrH,EAASa,IAAYyE,KAAKxB,aAE7B,uBAnCF,sBAqCE,kCACE,gCACE,qBAAIuD,UAAU,QAAd,UACE,oBAAIwC,MAAM,MAAMxC,UAAU,aAA1B,sCAGA,oBAAIwC,MAAM,MAAMxC,UAAU,aAA1B,gCAIC3H,GACCM,EAASa,IAAYwC,KAAKiF,eAC1B,oBAAIuB,MAAM,MAAMxC,UAAU,aAA1B,+BAMN,gCACE,qBAAIA,UAAU,GAAd,UACE,oBAAI,aAAW,2BAAOA,UAAU,GAAhC,SACG8B,GAAevG,KAAI,SAACyG,EAAQhB,GAAT,OAClB,oBAEEhB,UAAU,GACVyC,KAAI,uCAAkCT,GACtCxB,OAAO,SAJT,UAMGwB,EAAOjB,MAAM,EAAG,GANnB,MAOE,uBACA,yBAPKC,QAWX,oBAAI,aAAW,qBAAMhB,UAAU,GAA/B,SACGlG,GAASyB,KAAI,SAAC0B,EAAM+D,GAAP,OACZ,8BACE,oBAEEhB,UAAU,GACVyC,KAAMxF,EACNuD,OAAO,SAJT,UAMG,IACAvD,EAAK8D,MAAM,EAAG,IAPjB,MAQE,uBACA,yBARKC,UAiBb,oBAAI,aAAW,qBAAMhB,UAAU,GAA/B,SACG3H,GACCM,EAASa,IAAYwC,KAAKiF,eAC1Ba,GAAevG,KAAI,SAACyG,EAAQhB,GAAT,OACjB,gCACE,wBAEEhB,UAAU,eACVU,QAAS,kBAAMzC,GAAK7B,EAAO4F,IAH7B,2CACOhB,GAMP,0CAUhB,0BACE9E,KAAK,cACL8D,UAAU,OACVa,YAAY,+DACZC,KAAK,OACLpF,GAAG,SACH2D,MAAOlG,GACPmH,SAAU,SAACC,GAAD,OAAOnH,GAAemH,EAAEC,OAAOnB,UAE3C,uBACA,wBACEW,UAAU,eACVU,QAAS,SAACH,GACRX,GAAOpG,IACPqC,QAAQC,IAAI,WAAYxC,IACxBuG,GAAQvG,IACRuD,GAAUT,GACVhD,GAAe,KAPnB,4DAvWAgD,YC5WTgH,EArUH,WACV,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,QAAS,cAACC,EAAD,MAC/B,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,OAAOC,QAAS,cAAC,EAAD,MAClC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,QAAQC,QAAS,cAACE,EAAD,MACnC,cAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,UAAUC,QAAS,cAAC,EAAD,MACrC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,QAAQC,QAAS,cAAC,EAAD,YCpB3CG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.ba0bf564.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { useState } from \"react\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getFirestore } from 'firebase/firestore';\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDEvfuMijOI8OFYj2EujNEWssfdGOR_FDM\",\n    authDomain: \"astar-hackathon.firebaseapp.com\",\n    projectId: \"astar-hackathon\",\n    storageBucket: \"astar-hackathon.appspot.com\",\n    messagingSenderId: \"96662703318\",\n    appId: \"1:96662703318:web:49bde86c285e1754698d77\",\n    measurementId: \"G-F58GD1K2KW\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nexport const firebaseFirestore = getFirestore(app);","import React, { useEffect, useState } from \"react\";\nimport { onSnapshot } from \"firebase/firestore\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\n// ABIのインポート\nimport abi from \"./utils/CreateTask.json\";\n\n// モーダル\nimport Modal from \"react-modal\";\n\n// Firebase関係\nimport {\n  doc,\n  setDoc,\n  collection,\n  getDocs,\n  query,\n  where,\n} from \"firebase/firestore\";\nimport { firebaseFirestore } from \"./firebase\";\n\n// MUI\nimport Switch from \"@mui/material/Switch\";\n\nModal.setAppElement(\"#root\");\nconst Top = () => {\n  // ユーザーのウォレット保存用状態変数\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  // メッセージ保存用状態変数\n  const [contentValue, setContentValue] = useState(\"\");\n\n  // 期日保存用状態変数\n  const [dueValue, setDueValue] = useState(\"\");\n\n  // tasks保存用状態変数\n  const [allTasks, setAllTasks] = useState([]);\n\n  // 報酬額保存用状態変数\n  const [bountyValue, setBountyValue] = useState([]);\n\n  // タスク詳細保存用状態変数\n  const [expressionValue, setExpressionValue] = useState([]);\n\n  // 報酬送付先保存用状態変数\n  const [riwarderValue, setRiwarderValue] = useState([]);\n\n  // 成果物保存用状態変数\n  const [outputValue, setOutputValue] = useState(\"\");\n\n  // モーダル\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n\n  // タスクID保存用状態変数\n  const [idValue, setValue] = React.useState(\"0\");\n\n  // モーダル表示用インデックス・コンテンツ保存\n  const [indexValue, setIndexValue] = React.useState(0);\n  const [textValue, setTextValue] = React.useState(0);\n  const [selectedItem, setSelectedItem] = useState(\"\");\n\n  // 成果物一覧保存用配列\n  const [allLinks, setLinks] = useState([]);\n\n  // Astar Mainnetアドレス保存用\n  const contractAddress = \"0x980a80De95bc528b6e413516F881B78F1e474F41\";\n  // Astarアドレス保存用\n  // const contractAddress = \"0x113FA87E7D8c4C4eA49956943C2dcc8659ABF6FA\"\n  // rinkeby保存用\n  // const contractAddress = \"0x5617b6BA58A2fcA6969B0e75A05E21C1A5840F8a\"\n\n  // ABIの参照\n  const ContractABI = abi.abi;\n\n  // Firebase表示用\n  const [users, setUsers] = useState([]);\n\n  // モーダルスタイル\n  const modalStyle = {\n    overlay: {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      backgroundColor: \"rgba(0,0,0,0.85)\",\n      // opacity: 0.7\n    },\n    content: {\n      color: \"black\",\n      textAlign: \"center\",\n      position: \"absolute\",\n      top: \"5rem\",\n      left: \"5rem\",\n      right: \"5rem\",\n      bottom: \"5rem\",\n      backgroundColor: \"paleturquoise\",\n      borderRadius: \"1rem\",\n      padding: \"1.5rem\",\n    },\n  };\n\n  // タスクの表示に使う\n  useEffect(() => {\n    const usersCollectionRef = collection(firebaseFirestore, \"people\");\n    // リアタイ更新\n    const unsub = onSnapshot(usersCollectionRef, (querySnapshot) => {\n      setUsers(\n        querySnapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id }))\n      );\n    });\n    return unsub;\n  }, []);\n\n  // タスク登録\n  const handleTask = async () => {\n    // event.preventDefault();\n    const usersCollectionRef = collection(firebaseFirestore, \"task\");\n    const newDoc = doc(usersCollectionRef).id;\n    console.log(newDoc);\n    const documentRef = await setDoc(doc(usersCollectionRef, newDoc), {\n      // usersCollectionRef.doc(newDoc).set({\n      user: currentAccount,\n      content: contentValue,\n      due: dueValue,\n      name: expressionValue,\n      id: newDoc,\n    });\n  };\n  // コンテンツ表示\n  const setText = async (index) => {\n    const usersDocumentRef = collection(firebaseFirestore, \"task\");\n    await getDocs(\n      query(\n        usersDocumentRef,\n        where(\"content\", \"==\", allTasks[index].content),\n        where(\"due\", \"==\", allTasks[index].due.toString())\n      )\n    ).then((snapshot) => {\n      snapshot.forEach((doc) => {\n        setTextValue(doc.data().name);\n      });\n    });\n  };\n  // 終わり\n\n  // 成果物一覧表示\n  const setOutput = async (index) => {\n    const usersDocumentRef = collection(firebaseFirestore, \"task\");\n    let taskId = 0;\n    await getDocs(\n      query(\n        usersDocumentRef,\n        where(\"content\", \"==\", allTasks[index].content),\n        where(\"due\", \"==\", allTasks[index].due.toString())\n      )\n    ).then((snapshot) => {\n      snapshot.forEach((doc) => {\n        taskId = doc.data().id;\n        console.log(taskId);\n      });\n    });\n\n    const usersLinkRef = collection(firebaseFirestore, `task/${taskId}/output`);\n    // 成果物を全て配列に入れる\n    await getDocs(query(usersLinkRef)).then((snapshot) => {\n      snapshot.forEach((doc) => {\n        // setContentValue(doc.data().link)\n        // console.log(allLinks);\n        allLinks.push(doc.data().link);\n        setLinks(allLinks);\n      });\n    });\n  };\n  // 終わり\n\n  const getAllTasks = async () => {\n    const { ethereum } = window;\n\n    try {\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const taskContract = new ethers.Contract(\n          contractAddress,\n          ContractABI,\n          signer\n        );\n        const tasks = await taskContract.getAllTasks();\n        const tasksCleaned = tasks.map((task) => {\n          return {\n            user: task.user,\n            due: task.due,\n            content: task.content,\n            bounty: task.bounty,\n            done: task.done,\n          };\n        });\n        setAllTasks(tasksCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // タスク登録時イベント\n  useEffect(() => {\n    let taskContract;\n\n    const onNewTask = (user, due, content, bounty, done) => {\n      console.log(\"NewTask\", user, due, content, bounty, done);\n      // alert(`「${content}」を登録しました。頑張りましょう🔥🚀`);\n      setAllTasks((prevState) => [\n        ...prevState,\n        {\n          user: user,\n          due: due,\n          content: content,\n          bounty: bounty,\n          done: done,\n        },\n      ]);\n    };\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n      taskContract.on(\"NewTask\", onNewTask);\n    }\n\n    return () => {\n      if (taskContract) {\n        taskContract.off(\"NewTask\", onNewTask);\n      }\n    };\n  }, []);\n\n  // タスク完了時イベント\n  useEffect(() => {\n    let taskContract;\n\n    const onDoneTask = (user, index) => {\n      console.log(\"Done.\", user, index);\n      // alert(`タスク完了おめでとうございます！🔥🚀`);\n    };\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n      taskContract.on(\"DoneTask\", onDoneTask);\n    }\n\n    return () => {\n      if (taskContract) {\n        taskContract.off(\"DoneTask\", onDoneTask);\n      }\n    };\n  }, []);\n\n  // console.log(\"currentAccount: \", currentAccount);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n      } else {\n        console.log(\"We have the ethreum object\", ethereum);\n      }\n      // サイトにきたユーザーのアカウントを格納できる（複数格納可能のためaccountsと表記）\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllTasks();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      console.log(\"Connected: \", accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // task生成\n  const task = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const taskContract = new ethers.Contract(\n          contractAddress,\n          ContractABI,\n          signer\n        );\n\n        // 最終追記分\n        let contractBalance = await provider.getBalance(taskContract.address);\n\n        // ETH送るコントラクト\n        console.log(\n          \"Contract balance:\",\n          ethers.utils.formatEther(contractBalance)\n        );\n\n        // トランザクションへの書き込み\n        const options = { value: ethers.utils.parseEther(bountyValue) };\n        const taskTxn = await taskContract.createTask(\n          currentAccount,\n          dueValue,\n          contentValue,\n          options\n        );\n        console.log(\"Mining...\", taskTxn.hash);\n        await taskTxn.wait();\n        console.log(\"Mined -- \", taskTxn.hash);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // task完了\n  const done = async (index, riwarderValue) => {\n    console.log(index);\n    if (allTasks[index].done !== false) {\n      alert(\n        `「${allTasks[index].content}」は既に完了しています、別のタスクを探してみてね🚀`\n      );\n    }\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const taskContract = new ethers.Contract(\n          contractAddress,\n          ContractABI,\n          signer\n        );\n\n        // 完了前のコントラクトの資金量確認\n        let contractBalance = await provider.getBalance(taskContract.address);\n        console.log(\n          \"Contract balance:\",\n          ethers.utils.formatEther(contractBalance)\n        );\n\n        // トランザクションへの書き込み\n        const taskTxn = await taskContract.sendRiward(index, riwarderValue);\n        console.log(\"Mining...\", taskTxn.hash);\n        await taskTxn.wait();\n        console.log(\"Mined -- \", taskTxn.hash);\n\n        // 完了後のコントラクトの資金量確認\n        console.log(\n          \"Contract balance:\",\n          ethers.utils.formatEther(contractBalance)\n        );\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // 成果物提出\n  const output = async (indexValue) => {\n    // ドキュメントIDを取得\n    console.log(indexValue);\n    const usersDocumentRef = collection(firebaseFirestore, \"task\");\n    getDocs(\n      query(\n        usersDocumentRef,\n        where(\"content\", \"==\", allTasks[indexValue].content),\n        where(\"due\", \"==\", allTasks[indexValue].due.toString())\n      )\n    ).then((snapshot) => {\n      snapshot.forEach((doc) => {\n        console.log(allTasks[indexValue].content);\n        // idを文字列に保存\n        setValue(doc.data().id);\n        // console.log(\"doc id\", doc.data().id)\n        // console.log(\"id value\", idValue)\n      });\n    });\n  };\n\n  const addLink = async (idValue) => {\n    // Outputがなかった場合はアラートを出して処理を中断\n    try {\n      if (outputValue != \"\") {\n        // IDからさらにコレクションを~~Refに保存\n        const usersLinkRef = collection(\n          firebaseFirestore,\n          `task/${idValue}/output`\n        );\n        console.log(`task/${idValue}/output`);\n        console.log(usersLinkRef);\n\n        // ~~Refにリンクを登録、IDつきで\n        const newDoc = doc(usersLinkRef).id;\n        console.log(newDoc);\n        const documentRef = await setDoc(doc(usersLinkRef, newDoc), {\n          id: newDoc,\n          link: outputValue,\n        });\n      } else {\n        alert(`成果物を入力してください`);\n      }\n    } catch (error) {\n      alert(\"エラーが発生しました\");\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  const navigate = useNavigate();\n  function switchNetwork(e) {\n    e.target.checked ? navigate(\"/\") : navigate(\"/Fuji\");\n  }\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          <h1 className=\"heading gradient-text\">\n            <span role=\"img\" aria-label=\"hand-wave\">\n              🚀\n            </span>{\" \"}\n            Taskal 🚀\n          </h1>\n        </div>\n        <div className=\"bio\">\n          Web3 Task-Manager\n          <br></br>\n          <br></br>\n          Version Astar\n          <br></br>\n          <br></br>\n          🔥🚀 Work to Earn $ASTR 🔥🚀\n          <br />\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            <p>Shibuya Test Net</p>\n            <Switch onChange={switchNetwork}></Switch>\n            <p>Astar network</p>\n          </div>\n          {/* <Link to={`/Shibuya`}>Shibuya testnet版はこちら</Link> */}\n          {/* <Link to={`/team`}>チームの登録はこちら</Link> */}\n          <br />\n        </div>\n\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Wallet Connected\n          </button>\n        )}\n        {currentAccount && (\n          <button\n            className=\"waveButton\"\n            onClick={() => {\n              setSelectedItem(\"create\");\n            }}\n          >\n            タスクを作成する\n          </button>\n        )}\n\n        {/* モーダルにするテスト */}\n        <Modal\n          isOpen={\"create\" === selectedItem}\n          style={modalStyle}\n          onRequestClose={() => setSelectedItem(\"\")}\n        >\n          <h2>タスクの作成</h2>\n\n          {currentAccount && (\n            <textarea\n              name=\"messageArea\"\n              className=\"form\"\n              placeholder=\"タスクを記入してください(例：コントラクトアドレスの変更)\"\n              type=\"text\"\n              id=\"message\"\n              value={contentValue}\n              onChange={(e) => setContentValue(e.target.value)}\n            />\n          )}\n          <br></br>\n\n          {currentAccount && (\n            <textarea\n              name=\"messageArea\"\n              className=\"form\"\n              placeholder=\"期日を記入してください(例：20220507)\"\n              type=\"text\"\n              id=\"message\"\n              value={dueValue}\n              onChange={(e) => setDueValue(e.target.value)}\n            />\n          )}\n          <br></br>\n\n          {currentAccount && (\n            <textarea\n              name=\"messageArea\"\n              placeholder=\"タスクの報酬額を記入してください(単位:ASTR)\"\n              className=\"form\"\n              type=\"text\"\n              id=\"message\"\n              value={bountyValue}\n              onChange={(e) => setBountyValue(e.target.value)}\n            />\n          )}\n          <br></br>\n\n          <textarea\n            name=\"messageArea\"\n            placeholder=\"タスクの説明を記入してください(例：コントラクトを新たにデプロイし、アドレスを取得してください。提出時には新たなコントラクトアドレスの送付をお願いします)\"\n            className=\"form\"\n            type=\"text\"\n            id=\"expression\"\n            value={expressionValue}\n            onChange={(e) => setExpressionValue(e.target.value)}\n          />\n          <br></br>\n          {currentAccount && (\n            <button\n              className=\"submitButton\"\n              onClick={() => {\n                handleTask();\n                task();\n              }}\n            >\n              タスクを作成する\n            </button>\n          )}\n        </Modal>\n\n        {currentAccount &&\n          allTasks.slice(0).map((task, index) => {\n            return (\n              <div key={index} className=\"cover\">\n                {/* setispenと合わせて別の関数を策定、idを渡す。このidをベースにtaskを特定して表示する関数を書く */}\n                <button\n                  className=\"taskCard\"\n                  onClick={() => {\n                    setIndexValue(index);\n                    setText(index);\n                    setOutput(index);\n                    // setIsOpen(true);\n                    setSelectedItem(\"task\");\n                    // outputの適切な挙動のため、ここで一度タスクIDを拾うための処理を入れる\n                    output(index);\n                  }}\n                >\n                  投稿者: {task.user}\n                  <br></br>\n                  期日: {task.due.toString()}\n                  <br></br>\n                  タスク: {task.content}\n                  <br></br>\n                  報酬: {ethers.utils.formatEther(task.bounty)}ASTR<br></br>\n                  完了: {task.done.toString()}\n                  <br></br>\n                  {/* ボタンの中 */}\n                </button>\n                {/* 詳細を押した際の挙動 */}\n                <Modal\n                  isOpen={\"task\" === selectedItem}\n                  style={modalStyle}\n                  onRequestClose={() => {\n                    setSelectedItem(\"\");\n                    setLinks([]);\n                  }}\n                >\n                  <div id=\"overlay\">\n                    {/* <div className=\"mainContainer\">\n                                        <div className=\"dataContainer\">\n                                            <div className=\"body\"> */}\n                    <h2>\n                      タスク詳細\n                      <br />\n                    </h2>\n                    <div className=\"modal\">\n                      タスク登録者▼\n                      <br />\n                      <div className=\"card\"> {allTasks[indexValue].user}</div>\n                      <br />\n                      期日▼\n                      <br />{\" \"}\n                      <div className=\"card\">\n                        {allTasks[indexValue].due.toString()}\n                      </div>\n                      <br />\n                      タスク▼\n                      <div className=\"card\">\n                        {\" \"}\n                        {allTasks[indexValue].content}\n                      </div>\n                      <br />\n                      詳細説明▼<div className=\"card\"> {textValue}</div>\n                      <br />\n                      報酬▼\n                      <div className=\"card\">\n                        {\" \"}\n                        {ethers.utils.formatEther(allTasks[indexValue].bounty)}\n                        ASTR\n                      </div>\n                      <br />\n                      完了▼{\" \"}\n                      <div className=\"card\">\n                        {allTasks[indexValue].done.toString()}\n                      </div>\n                      <br />\n                      成果物:\n                      <div>\n                        {allLinks.map((link, i) => (\n                          <div key={i} className=\"card\">\n                            {link}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* タスク提出 */}\n                    <textarea\n                      name=\"messageArea\"\n                      className=\"form\"\n                      placeholder=\"成果物のリンクを添付\"\n                      type=\"text\"\n                      id=\"riward\"\n                      value={outputValue}\n                      onChange={(e) => setOutputValue(e.target.value)}\n                    />\n                    <br></br>\n                    <button\n                      className=\"submitButton\"\n                      onClick={() => {\n                        output(indexValue);\n                        console.log(\"id value\", idValue);\n                        addLink(idValue);\n                        setOutputValue(\"\");\n                      }}\n                    >\n                      成果物を提出\n                    </button>\n\n                    {/* 報酬送付 */}\n                    <br></br>\n                    {currentAccount ==\n                      allTasks[indexValue].user.toLowerCase() && (\n                        <div>\n                          <textarea\n                            name=\"messageArea\"\n                            className=\"form\"\n                            placeholder=\"報酬を送りたいアカウントのアドレスを記入してください\"\n                            type=\"text\"\n                            id=\"riward\"\n                            value={riwarderValue}\n                            onChange={(e) => setRiwarderValue(e.target.value)}\n                          />\n                          <br></br>\n                          <button\n                            className=\"submitButton\"\n                            onClick={() => done(index, riwarderValue)}\n                          >\n                            報酬を送付\n                          </button>\n                          <br></br>\n                          <br></br>\n                          {/* <button onClick={() => {\n                                            setSelectedItem(\"\")\n                                            setLinks([]);\n                                        }}>Close Modal</button> */}\n                        </div>\n                      )}\n                  </div>\n                </Modal>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport default Top;\n","import React, { useEffect, useState } from \"react\";\nimport { onSnapshot } from \"firebase/firestore\"\nimport { Link } from 'react-router-dom';\nimport './App.css';\nimport { ethers } from \"ethers\";\n// ABIのインポート\nimport abi from './utils/CreateTask.json';\n\n// モーダル\nimport Modal from \"react-modal\";\n\n// スイッチ\n// import SwitchSelector from \"react-native-switch-selector\";\n\n// Firebase関係\nimport { doc, setDoc, collection, getDocs, query, where } from 'firebase/firestore';\nimport { firebaseFirestore } from './firebase';\n\nModal.setAppElement(\"#root\");\nconst Top = () => {\n\n    // ユーザーのウォレット保存用状態変数\n    const [currentAccount, setCurrentAccount] = useState(\"\");\n\n    // メッセージ保存用状態変数\n    const [contentValue, setContentValue] = useState(\"\")\n\n    // 期日保存用状態変数\n    const [dueValue, setDueValue] = useState(\"\")\n\n    // tasks保存用状態変数\n    const [allTasks, setAllTasks] = useState([]);\n\n    // 報酬額保存用状態変数\n    const [bountyValue, setBountyValue] = useState([]);\n\n    // タスク詳細保存用状態変数\n    const [expressionValue, setExpressionValue] = useState([]);\n\n    // 報酬送付先保存用状態変数\n    const [riwarderValue, setRiwarderValue] = useState([]);\n\n    // 成果物保存用状態変数\n    const [outputValue, setOutputValue] = React.useState(\"0\");\n\n    // モーダル\n    const [modalIsOpen, setIsOpen] = React.useState(false);\n\n    // タスクID保存用状態変数\n    const [idValue, setValue] = React.useState(\"0\");\n\n    // モーダル表示用インデックス・コンテンツ保存\n    const [indexValue, setIndexValue] = React.useState(0);\n    const [textValue, setTextValue] = React.useState(0);\n    const [selectedItem, setSelectedItem] = useState(\"\")\n\n    // 成果物一覧保存用配列\n    const [allLinks, setLinks] = useState([]);\n    // 成果物投稿者\n    const [allLinkHolders, setLinkHolders] = useState([]);\n    // 成果物いいね数\n    const [allLinkGoods, setLinkGoods] = useState([]);\n\n    // Astar Mainnetアドレス保存用\n    // const contractAddress = \"0x980a80De95bc528b6e413516F881B78F1e474F41\"\n    // Astarアドレス保存用\n    // const contractAddress = \"0x113FA87E7D8c4C4eA49956943C2dcc8659ABF6FA\"\n    // rinkeby保存用\n    // const contractAddress = \"0x08565FA1c291e97970a88E599Ae0641Ebe52eE6C\"\n\n    // 新testnet(SBY)\n    const contractAddress = \"0x69eb613f5c43D9F40da91D176DCbFB075097e236\"\n\n    // ABIの参照\n    const ContractABI = abi.abi;\n\n    // Firebase表示用\n    const [users, setUsers] = useState([]);\n\n    // モーダルスタイル\n    const modalStyle = {\n        overlay: {\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            backgroundColor: \"rgba(0,0,0,0.85)\",\n            // opacity: 0.7\n        },\n        content: {\n            color: \"black\",\n            textAlign: \"center\",\n            position: \"absolute\",\n            top: \"5rem\",\n            left: \"5rem\",\n            right: \"5rem\",\n            bottom: \"5rem\",\n            backgroundColor: \"paleturquoise\",\n            borderRadius: \"1rem\",\n            padding: \"1.5rem\",\n\n        }\n    };\n\n    // タスクの表示に使う\n    useEffect(() => {\n        const usersCollectionRef = collection(firebaseFirestore, 'people');\n        // リアタイ更新\n        const unsub = onSnapshot(usersCollectionRef, (querySnapshot) => {\n            setUsers(\n                querySnapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id }))\n            );\n        });\n        return unsub;\n\n    }, []);\n\n    // タスク登録\n    const handleTask = async () => {\n        // event.preventDefault();\n        const usersCollectionRef = collection(firebaseFirestore, 'task');\n        const newDoc = doc(usersCollectionRef).id\n        console.log(newDoc)\n        const documentRef = await setDoc(doc(usersCollectionRef, newDoc), {\n            // usersCollectionRef.doc(newDoc).set({\n            user: currentAccount,\n            content: contentValue,\n            due: dueValue,\n            name: expressionValue,\n            id: newDoc,\n        });\n    };\n    // コンテンツ表示\n    const setText = async (index) => {\n        const usersDocumentRef = collection(firebaseFirestore, 'task');\n        await getDocs(query(usersDocumentRef, where('content', '==', allTasks[index].content), where('due', '==', allTasks[index].due.toString()))).then(snapshot => {\n            snapshot.forEach(doc => {\n                setTextValue(doc.data().name)\n            })\n        })\n    }\n    // 終わり\n\n    // 成果物一覧表示\n    const setOutput = async (index) => {\n        const usersDocumentRef = collection(firebaseFirestore, 'task');\n        let taskId = 0;\n        await getDocs(query(usersDocumentRef, where('content', '==', allTasks[index].content), where('due', '==', allTasks[index].due.toString()))).then(snapshot => {\n            snapshot.forEach(doc => {\n                taskId = doc.data().id\n                console.log(taskId)\n            })\n        })\n\n        const usersLinkRef = collection(firebaseFirestore, `task/${taskId}/output`);\n        // 成果物を全て配列に入れる\n        await getDocs(query(usersLinkRef)).then(snapshot => {\n            snapshot.forEach(doc => {\n                // setContentValue(doc.data().link)\n                // console.log(allLinks);\n                allLinks.push(doc.data().link);\n                setLinks(allLinks);\n            })\n        })\n        await getDocs(query(usersLinkRef)).then(snapshot => {\n            snapshot.forEach(doc => {\n                allLinkHolders.push(doc.data().userid);\n                setLinkHolders(allLinkHolders);\n            })\n        })\n        await getDocs(query(usersLinkRef)).then(snapshot => {\n            snapshot.forEach(doc => {\n                allLinkGoods.push(doc.data().like);\n                setLinkGoods(allLinkGoods);\n            })\n        })\n        setOutputValue(\"\")\n    }\n    // 終わり\n\n    const getAllTasks = async () => {\n        const { ethereum } = window;\n\n        try {\n            if (ethereum) {\n                const provider = new ethers.providers.Web3Provider(ethereum);\n                const signer = provider.getSigner();\n                const taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n                const tasks = await taskContract.getAllTasks();\n                const tasksCleaned = tasks.map(task => {\n                    return {\n                        user: task.user,\n                        due: task.due,\n                        content: task.content,\n                        bounty: task.bounty,\n                        done: task.done\n                    };\n                });\n                setAllTasks(tasksCleaned);\n            } else {\n                console.log(\"Ethereum object doesn't exist!\");\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    // タスク登録時イベント\n    useEffect(() => {\n        let taskContract;\n\n        const onNewTask = (user, due, content, bounty, done) => {\n            console.log(\"NewTask\", user, due, content, bounty, done);\n            // alert(`「${content}」を登録しました。頑張りましょう🔥🚀`);\n            setAllTasks(prevState => [\n                ...prevState,\n                {\n                    user: user,\n                    due: due,\n                    content: content,\n                    bounty: bounty,\n                    done: done\n                },\n            ]);\n        };\n\n        if (window.ethereum) {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n\n            taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n            taskContract.on(\"NewTask\", onNewTask);\n        }\n\n        return () => {\n            if (taskContract) {\n                taskContract.off(\"NewTask\", onNewTask);\n            }\n        };\n    }, []);\n\n    // タスク完了時イベント\n    useEffect(() => {\n        let taskContract;\n\n        const onDoneTask = (user, index) => {\n            console.log(\"Done.\", user, index);\n            // alert(`タスク完了おめでとうございます！🔥🚀`);\n        };\n\n        if (window.ethereum) {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n\n            taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n            taskContract.on(\"DoneTask\", onDoneTask);\n        }\n\n        return () => {\n            if (taskContract) {\n                taskContract.off(\"DoneTask\", onDoneTask);\n            }\n        };\n    }, []);\n\n    // console.log(\"currentAccount: \", currentAccount);\n\n    const checkIfWalletIsConnected = async () => {\n        try {\n            const { ethereum } = window;\n            if (!ethereum) {\n                console.log(\"Make sure you have metamask!\");\n            } else {\n                console.log(\"We have the ethreum object\", ethereum);\n            }\n            // サイトにきたユーザーのアカウントを格納できる（複数格納可能のためaccountsと表記）\n            const accounts = await ethereum.request({ method: \"eth_accounts\" });\n            if (accounts.length !== 0) {\n                const account = accounts[0];\n                console.log(\"Found an authorized account:\", account);\n                setCurrentAccount(account)\n                getAllTasks();\n            } else {\n                console.log(\"No authorized account found\")\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    const connectWallet = async () => {\n        try {\n            const { ethereum } = window;\n            if (!ethereum) {\n                alert(\"Get MetaMask!\");\n                return;\n            }\n            const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n            console.log(\"Connected: \", accounts[0]);\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    // task生成\n    const task = async () => {\n        try {\n            const { ethereum } = window;\n            if (ethereum) {\n                const provider = new ethers.providers.Web3Provider(ethereum);\n                const signer = provider.getSigner();\n                const taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n\n                // 最終追記分\n                let contractBalance = await provider.getBalance(\n                    taskContract.address\n                );\n\n                // ETH送るコントラクト\n                console.log(\n                    \"Contract balance:\",\n                    ethers.utils.formatEther(contractBalance)\n                );\n\n                // トランザクションへの書き込み\n                const options = { value: ethers.utils.parseEther(bountyValue) }\n                const taskTxn = await taskContract.createTask(currentAccount, dueValue, contentValue, options)\n                console.log(\"Mining...\", taskTxn.hash);\n                await taskTxn.wait();\n                console.log(\"Mined -- \", taskTxn.hash);\n            } else {\n                console.log(\"Ethereum object doesn't exist!\");\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    };\n\n    // task完了\n    const done = async (index, riwarderValue) => {\n        console.log(index)\n        if (allTasks[index].done !== false) {\n            alert(`「${allTasks[index].content}」は既に完了しています、別のタスクを探してみてね🚀`);\n        }\n        try {\n            const { ethereum } = window;\n            if (ethereum && riwarderValue != \"\") {\n                const provider = new ethers.providers.Web3Provider(ethereum);\n                const signer = provider.getSigner();\n                const taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n\n                // 完了前のコントラクトの資金量確認\n                let contractBalance = await provider.getBalance(\n                    taskContract.address\n                );\n                console.log(\n                    \"Contract balance:\",\n                    ethers.utils.formatEther(contractBalance)\n                );\n\n                // トランザクションへの書き込み\n                const taskTxn = await taskContract.sendRiward(index, riwarderValue)\n                console.log(\"Mining...\", taskTxn.hash);\n                await taskTxn.wait();\n                console.log(\"Mined -- \", taskTxn.hash);\n\n                // 完了後のコントラクトの資金量確認\n                console.log(\n                    \"Contract balance:\",\n                    ethers.utils.formatEther(contractBalance)\n                );\n\n            } else {\n                alert(`報酬の送付先が指定されていません🥺　コントラクトアドレスを入力してください！`);\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    };\n\n    // 成果物提出\n    const output = async (indexValue) => {\n        // ドキュメントIDを取得 \n        console.log(indexValue)\n        const usersDocumentRef = collection(firebaseFirestore, 'task');\n        getDocs(query(usersDocumentRef, where('content', '==', allTasks[indexValue].content), where('due', '==', allTasks[indexValue].due.toString()))).then(snapshot => {\n            snapshot.forEach(doc => {\n                console.log(allTasks[indexValue].content)\n                // idを文字列に保存\n                setValue(doc.data().id)\n                // console.log(\"doc id\", doc.data().id)\n                // console.log(\"id value\", idValue)\n            })\n        })\n    };\n\n    const addLink = async (idValue) => {\n        // Outputがなかった場合はアラートを出して処理を中断\n        try {\n            if (outputValue != \"\") {\n                // IDからさらにコレクションを~~Refに保存\n                const usersLinkRef = collection(firebaseFirestore, `task/${idValue}/output`);\n                console.log(`task/${idValue}/output`)\n                console.log(usersLinkRef)\n\n                // ~~Refにリンクを登録、IDつきで\n                const newDoc = doc(usersLinkRef).id\n                console.log(newDoc)\n                const documentRef = await setDoc(doc(usersLinkRef, newDoc), {\n                    id: newDoc,\n                    link: outputValue,\n                    userid: currentAccount,\n                    like: 0,\n                })\n            }\n            else {\n                alert(`成果物を入力してください`);\n            }\n        }\n        catch (error) {\n            alert(\"エラーが発生しました\");\n        }\n    };\n\n    useEffect(() => {\n        checkIfWalletIsConnected();\n    }, []);\n\n    return (\n        <div className=\"mainContainer\">\n            <div className=\"dataContainer\">\n                <div className=\"header\">\n                    <h1 className=\"heading gradient-text\">\n                        <span role=\"img\" aria-label=\"hand-wave\">🚀</span> Taskal 🚀\n                    </h1>\n                    {/* スイッチテスト */}\n                    {/* <SwitchSelector\n                        initial={0}\n                        onPress={value => this.setState({ gender: value })}\n                        textColor=\"purple\"\n                        selectedColor=\"white\"\n                        buttonColor=\"purple\"\n                        borderColor=\"purple\"\n                        hasPadding\n                        options={[\n                            {\n                                label: \"8:00\",\n                                value: \"1\",\n                                customIcon:\n                                    <Icon\n                                        name=\"sun\"\n                                        size={18}\n                                        style={{\n                                            marginRight: 10,\n                                            marginTop: 3,\n                                            color: gender == 1 ? \"white\" : \"black\"\n                                        }}\n                                    />\n                            },\n                            {\n                                label: \"18:00\",\n                                value: \"2\",\n                                customIcon:\n                                    <Icon\n                                        name=\"sunset\"\n                                        size={18}\n                                        style={{\n                                            marginRight: 10,\n                                            marginTop: 3,\n                                            color: gender == 2 ? \"white\" : \"black\"\n                                        }}\n                                    />\n                            },\n                            {\n                                label: \"22:00\",\n                                value: \"3\",\n                                customIcon:\n                                    <Icon\n                                        name=\"moon\"\n                                        size={18}\n                                        style={{\n                                            marginRight: 10,\n                                            marginTop: 3,\n                                            color: gender == 3 ? \"white\" : \"black\"\n                                        }}\n                                    />\n                            },\n                        ]}></SwitchSelector> */}\n\n                </div>\n                <div className=\"bio\">\n                    Web3 Task-Manager\n                    <br></br>\n                    <br></br>\n                    Version  Astar\n                    <br></br>\n                    <br></br>\n                    🔥🚀  Work to Earn $ASTR 🔥🚀\n\n                    <br />\n                    {/* 変更をボタン形式に */}\n                    <br />\n                    <div className=\"Button\">\n                        <Link className=\"b_text\" to={`/`}>Astar<br /> Network</Link>\n                    </div>\n                    <div className=\"Button_passive\">\n                        <Link className=\"b_text\" to={`/Shibuya`}>Shibuya<br /> Testnet</Link>\n                    </div>\n                    {/* <Link to={`/team`}>チームの登録はこちら</Link> */}\n                    <br />\n                </div>\n\n                {!currentAccount && (\n                    <button className=\"waveButton\" onClick={connectWallet}>\n                        Connect Wallet\n                    </button>\n                )}\n\n                {currentAccount && (\n                    <button className=\"waveButton\" onClick={connectWallet}>\n                        Wallet Connected\n                    </button>\n                )}\n                {currentAccount && (\n                    <button className=\"waveButton\" onClick={() => {\n                        setSelectedItem(\"create\")\n                    }}>\n                        タスクを作成する\n                    </button>)}\n\n                {/* モーダルにするテスト */}\n                <Modal isOpen={\"create\" === selectedItem} style={modalStyle} onRequestClose={() => setSelectedItem(\"\")}>\n                    <h2>\n                        タスクの作成\n                    </h2>\n\n                    {currentAccount && (<textarea name=\"messageArea\"\n                        className=\"form\"\n                        placeholder=\"タスクを記入してください(例：コントラクトアドレスの変更)\"\n                        type=\"text\"\n                        id=\"message\"\n                        value={contentValue}\n                        onChange={e => setContentValue(e.target.value)} />)\n                    }<br></br>\n\n                    {currentAccount && (<textarea name=\"messageArea\"\n                        className=\"form\"\n                        placeholder=\"期日を記入してください(例：20220507)\"\n                        type=\"text\"\n                        id=\"message\"\n                        value={dueValue}\n                        onChange={e => setDueValue(e.target.value)} />)\n                    }<br></br>\n\n                    {currentAccount && (<textarea name=\"messageArea\"\n                        placeholder=\"タスクの報酬額を記入してください(単位:ASTR)\"\n                        className=\"form\"\n                        type=\"text\"\n                        id=\"message\"\n                        value={bountyValue}\n                        onChange={e => setBountyValue(e.target.value)} />)\n                    }<br></br>\n\n                    <textarea name=\"messageArea\"\n                        placeholder=\"タスクの説明を記入してください(例：コントラクトを新たにデプロイし、アドレスを取得してください。提出時には新たなコントラクトアドレスの送付をお願いします)\"\n                        className=\"form\"\n                        type=\"text\"\n                        id=\"expression\"\n                        value={expressionValue}\n                        onChange={e => setExpressionValue(e.target.value)} />\n                    <br></br>\n                    {currentAccount && (\n                        <button className=\"submitButton\" onClick={() => {\n                            handleTask();\n                            task();\n                        }}>\n                            タスクを作成する\n                        </button>)}\n                </Modal>\n\n                {currentAccount && (\n                    allTasks.slice(0).map((task, index) => {\n                        return (\n                            <div key={index} className=\"cover\">\n                                {/* setispenと合わせて別の関数を策定、idを渡す。このidをベースにtaskを特定して表示する関数を書く */}\n                                <button className=\"taskCard\" onClick={() => {\n                                    setIndexValue(index);\n                                    setText(index);\n                                    setOutput(index);\n                                    // setIsOpen(true);\n                                    setSelectedItem(\"task\");\n                                    // outputの適切な挙動のため、ここで一度タスクIDを拾うための処理を入れる\n                                    output(index);\n                                }}>\n                                    投稿者: {task.user}<br></br>\n                                    期日: {task.due.toString()}<br></br>\n                                    タスク: {task.content}<br></br>\n                                    報酬: {ethers.utils.formatEther(task.bounty)}ASTR<br></br>\n                                    完了: {task.done.toString()}<br></br>\n                                    {/* ボタンの中 */}\n                                </button>\n                                {/* 詳細を押した際の挙動 */}\n                                <Modal isOpen={\"task\" === selectedItem} style={modalStyle} onRequestClose={() => {\n                                    setSelectedItem(\"\");\n                                    setRiwarderValue(\"\");\n                                    setLinks([]);\n                                    setLinkHolders([]);\n                                    setLinkGoods([]);\n                                }}>\n                                    <div id=\"overlay\">\n                                        {/* <div className=\"mainContainer\">\n                                        <div className=\"dataContainer\">\n                                            <div className=\"body\"> */}\n                                        <h2>タスク詳細<br /></h2>\n                                        <div className=\"modal\">\n                                            タスク登録者▼<br />\n                                            <div className=\"card\"> {allTasks[indexValue].user}</div><br />\n                                            期日▼<br /> <div className=\"card\">{allTasks[indexValue].due.toString()}</div><br />\n                                            タスク▼<div className=\"card\"> {allTasks[indexValue].content}</div><br />\n                                            詳細説明▼<div className=\"card\"> {textValue}</div><br />\n                                            報酬▼<div className=\"card\"> {ethers.utils.formatEther(allTasks[indexValue].bounty)}ASTR</div><br />\n                                            完了▼ <div className=\"card\">{allTasks[indexValue].done.toString()}</div><br />\n                                            成果物:\n                                            <table>\n                                                <thead >\n                                                    <tr className=\"table\">\n                                                        <th scope=\"col\" className=\"Button_col\">アドレス</th>\n                                                        <th scope=\"col\" className=\"Button_col\">成果物</th>\n                                                        <th scope=\"col\" className=\"Button_col\">いいね</th>\n                                                        {currentAccount == allTasks[indexValue].user.toLowerCase() && (\n                                                            <th scope=\"col\" className=\"Button_col\">報酬</th>)}\n                                                    </tr>\n                                                </thead>\n                                                <tbody>\n                                                    <tr className=\"\">\n                                                        <td data-label=\"アドレス\" className=\"\">\n                                                            {allLinkHolders.map((userid, i) => <a key={i} className=\"\" href={`https://etherscan.io/address/${userid}`} target=\"_blank\">{userid.slice(0, 5)}...<br /><br /></a>)}\n                                                        </td>\n                                                        <td data-label=\"成果物\" className=\"\">\n                                                            {allLinks.map((link, i) => <div><a key={i} className=\"\" href={link} target=\"_blank\" > {link.slice(0, 15)}...<br /><br /></a></div>)}\n\n                                                        </td>\n                                                        <td data-label=\"いいね\" className=\"\">\n                                                            {allLinkGoods.map((like, i) => <a key={i} className=\"\"> {like}<br /><br /></a>)}\n\n                                                        </td>\n                                                        <td data-label=\"いいね\" className=\"\">\n                                                            {currentAccount == allTasks[indexValue].user.toLowerCase() && (\n                                                                allLinkHolders.map((userid, i) => <div><button key={i} className=\"submitButton\" onClick={() => done(index, userid)}>報酬を送付</button><br></br></div>)\n                                                            )}\n                                                        </td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n                                        </div>\n\n                                        {/* タスク提出 */}\n                                        <textarea name=\"messageArea\"\n                                            className=\"form\"\n                                            placeholder=\"成果物のリンクを添付\"\n                                            type=\"text\"\n                                            id=\"riward\"\n                                            value={outputValue}\n                                            onChange={e => setOutputValue(e.target.value)} />\n                                        <br></br>\n                                        <button className=\"submitButton\" onClick={(e) => {\n                                            output(indexValue);\n                                            console.log(\"id value\", idValue);\n                                            addLink(idValue);\n                                            setOutput(index);\n                                            setOutputValue(\"\")\n                                        }}>成果物を提出</button>\n\n                                        {/* 報酬送付\n                                        <br></br>\n                                        {currentAccount == allTasks[indexValue].user.toLowerCase() && (\n                                            <div>\n                                                <textarea name=\"messageArea\"\n                                                    className=\"form\"\n                                                    placeholder=\"報酬を送りたいアカウントのアドレスを記入してください\"\n                                                    type=\"text\"\n                                                    id=\"riward\"\n                                                    value={riwarderValue}\n                                                    onChange={e => setRiwarderValue(e.target.value)} />\n                                                <br></br>\n                                                <button className=\"submitButton\" onClick={() => done(index, riwarderValue)}>報酬を送付</button>\n                                                <br></br>\n                                                <br></br>\n                                            </div>\n                                        )} */}\n                                    </div>\n                                </Modal>\n                            </div >)\n                    })\n                )}\n            </div >\n        </div >\n    )\n};\n\n\nexport default Top; ","import { Link, useNavigate } from \"react-router-dom\";\nimport Switch from \"@mui/material/Switch\";\n\nconst Eyecatch = (props) => {\n  const navigate = useNavigate();\n  function switchNetwork(e) {\n    e.target.checked ? navigate(\"/\") : navigate(\"/Fuji\");\n  }\n  return (\n    <div>\n      <div className=\"header\">\n        <h1 className=\"heading gradient-text\">\n          <span role=\"img\" aria-label=\"hand-wave\">\n            🚀\n          </span>{\" \"}\n          Taskal 🚀\n        </h1>\n      </div>\n      <div className=\"bio\">\n        Web3 Task-Manager<br></br>\n        <br></br>\n        (Alpha test for TRUST SMITH Team)\n        <br></br>\n        <br></br>\n        <br></br>\n        Version {props.version}\n        <br></br>\n        <br></br>\n        <br></br>\n        🔥🚀 Work to Earn {props.unit} 🔥🚀\n        <br />\n        <br />\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <div>Fuji Testnet</div>\n          <Switch\n            defaultChecked={props.checked}\n            onChange={switchNetwork}\n          ></Switch>\n          <div>Rinkeby Testnet</div>\n        </div>\n        {/* <Link to={`/team`}>チームの登録はこちら</Link> */}\n      </div>\n    </div>\n  );\n};\n\nexport default Eyecatch;\n","import React, { useEffect, useState } from \"react\";\nimport { onSnapshot } from \"firebase/firestore\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\n// ABIのインポート\nimport abi from \"./utils/CreateTask.json\";\n\n// モーダル\nimport Modal from \"react-modal\";\n\n// Firebase関係\nimport {\n  doc,\n  setDoc,\n  collection,\n  getDocs,\n  query,\n  where,\n} from \"firebase/firestore\";\nimport { firebaseFirestore } from \"./firebase\";\n\nimport Eyecatch from \"./components/Eyecatch\";\n\nModal.setAppElement(\"#root\");\nconst Top = () => {\n  // チェックボックスの実装\n  const [isChecked, setIsChecked] = React.useState(false);\n\n  const changeIsChecked = (e) => {\n    if (isChecked == false) {\n      setIsChecked(true);\n    } else {\n      setIsChecked(false);\n    }\n  };\n\n  // マイニング中にロード\n  const [mineStatus, setMineStatus] = useState(null);\n  const [metamaskError, setMetamaskError] = useState(null);\n\n  // ユーザーのウォレット保存用状態変数\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  // メッセージ保存用状態変数\n  const [contentValue, setContentValue] = useState(\"\");\n\n  // 期日保存用状態変数\n  const [dueValue, setDueValue] = useState(\"\");\n\n  // tasks保存用状態変数\n  const [allTasks, setAllTasks] = useState([]);\n\n  // 報酬額保存用状態変数\n  const [bountyValue, setBountyValue] = useState([]);\n\n  // タスク詳細保存用状態変数\n  const [expressionValue, setExpressionValue] = useState([]);\n\n  // 報酬送付先保存用状態変数\n  const [riwarderValue, setRiwarderValue] = useState([]);\n\n  // 成果物保存用状態変数\n  const [outputValue, setOutputValue] = useState(\"\");\n\n  // モーダル\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n\n  // タスクID保存用状態変数\n  const [idValue, setValue] = React.useState(\"0\");\n\n  // モーダル表示用インデックス・コンテンツ保存\n  const [indexValue, setIndexValue] = React.useState(0);\n  const [textValue, setTextValue] = React.useState(0);\n  const [selectedItem, setSelectedItem] = useState(\"\");\n\n  // 成果物一覧保存用配列\n  const [allLinks, setLinks] = useState([]);\n  // 成果物投稿者\n  const [allLinkHolders, setLinkHolders] = useState([]);\n\n  // Astar Mainnetアドレス保存用\n  // const contractAddress = \"0x980a80De95bc528b6e413516F881B78F1e474F41\"\n  // Shibuyaアドレス保存用\n  // const contractAddress = \"0x113FA87E7D8c4C4eA49956943C2dcc8659ABF6FA\"\n  // rinkeby保存用\n  // const contractAddress = \"0x08565FA1c291e97970a88E599Ae0641Ebe52eE6C\"\n\n  // Shibuyaアドレス最新\n  // const contractAddress = \"0x69eb613f5c43D9F40da91D176DCbFB075097e236\"\n\n  // Fuji testnet\n  const contractAddress = \"0x980a80De95bc528b6e413516F881B78F1e474F41\";\n\n  // ABIの参照\n  const ContractABI = abi.abi;\n\n  // Firebase表示用\n  const [users, setUsers] = useState([]);\n\n  // モーダルスタイル\n  const modalStyle = {\n    overlay: {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      backgroundColor: \"rgba(0,0,0,0.85)\",\n      // opacity: 0.7\n    },\n    content: {\n      color: \"black\",\n      textAlign: \"center\",\n      position: \"absolute\",\n      top: \"5rem\",\n      left: \"5rem\",\n      right: \"5rem\",\n      bottom: \"5rem\",\n      backgroundColor: \"paleturquoise\",\n      borderRadius: \"1rem\",\n      padding: \"1.5rem\",\n    },\n  };\n\n  // タスクの表示に使う\n  useEffect(() => {\n    const usersCollectionRef = collection(firebaseFirestore, \"people\");\n    // リアタイ更新\n    const unsub = onSnapshot(usersCollectionRef, (querySnapshot) => {\n      setUsers(\n        querySnapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id }))\n      );\n    });\n    return unsub;\n  }, []);\n\n  // タスク登録\n  const handleTask = async () => {\n    // エラーを拾える実装に\n    try {\n      // event.preventDefault();\n      const usersCollectionRef = collection(firebaseFirestore, \"task\");\n      const newDoc = doc(usersCollectionRef).id;\n      console.log(newDoc);\n      const documentRef = await setDoc(doc(usersCollectionRef, newDoc), {\n        // usersCollectionRef.doc(newDoc).set({\n        user: currentAccount,\n        content: contentValue,\n        due: dueValue,\n        name: expressionValue,\n        id: newDoc,\n      });\n    } catch (error) {\n      alert(`エラーです`);\n    }\n  };\n  // コンテンツ表示\n  const setText = async (index) => {\n    const usersDocumentRef = collection(firebaseFirestore, \"task\");\n    await getDocs(\n      query(\n        usersDocumentRef,\n        where(\"content\", \"==\", allTasks[index].content),\n        where(\"due\", \"==\", allTasks[index].due.toString())\n      )\n    ).then((snapshot) => {\n      snapshot.forEach((doc) => {\n        setTextValue(doc.data().name);\n      });\n    });\n  };\n  // 終わり\n\n  // 成果物一覧表示\n  const setOutput = async (index) => {\n    const usersDocumentRef = collection(firebaseFirestore, \"task\");\n    let taskId = 0;\n    await getDocs(\n      query(\n        usersDocumentRef,\n        where(\"content\", \"==\", allTasks[index].content),\n        where(\"due\", \"==\", allTasks[index].due.toString())\n      )\n    ).then((snapshot) => {\n      snapshot.forEach((doc) => {\n        taskId = doc.data().id;\n        console.log(taskId);\n      });\n    });\n\n    const usersLinkRef = collection(firebaseFirestore, `task/${taskId}/output`);\n    // 成果物を全て配列に入れる\n    await getDocs(query(usersLinkRef)).then((snapshot) => {\n      snapshot.forEach((doc) => {\n        // setContentValue(doc.data().link)\n        // console.log(allLinks);\n        allLinks.push(doc.data().link);\n        setLinks(allLinks);\n      });\n    });\n    await getDocs(query(usersLinkRef)).then((snapshot) => {\n      snapshot.forEach((doc) => {\n        allLinkHolders.push(doc.data().userid);\n        setLinkHolders(allLinkHolders);\n      });\n    });\n    setOutputValue(\"\");\n  };\n  // 終わり\n\n  const getAllTasks = async () => {\n    const { ethereum } = window;\n\n    try {\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const taskContract = new ethers.Contract(\n          contractAddress,\n          ContractABI,\n          signer\n        );\n        const tasks = await taskContract.getAllTasks();\n        const tasksCleaned = tasks.map((task) => {\n          return {\n            user: task.user,\n            due: task.due,\n            content: task.content,\n            bounty: task.bounty,\n            done: task.done,\n          };\n        });\n        setAllTasks(tasksCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // タスク登録時イベント\n  useEffect(() => {\n    let taskContract;\n\n    const onNewTask = (user, due, content, bounty, done) => {\n      console.log(\"NewTask\", user, due, content, bounty, done);\n      // alert(`「${content}」を登録しました。頑張りましょう🔥🚀`);\n      setAllTasks((prevState) => [\n        ...prevState,\n        {\n          user: user,\n          due: due,\n          content: content,\n          bounty: bounty,\n          done: done,\n        },\n      ]);\n    };\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n      taskContract.on(\"NewTask\", onNewTask);\n    }\n\n    return () => {\n      if (taskContract) {\n        taskContract.off(\"NewTask\", onNewTask);\n      }\n    };\n  }, []);\n\n  // タスク完了時イベント\n  useEffect(() => {\n    let taskContract;\n\n    const onDoneTask = (user, index) => {\n      console.log(\"Done.\", user, index);\n      // alert(`タスク完了おめでとうございます！🔥🚀`);\n    };\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n      taskContract.on(\"DoneTask\", onDoneTask);\n    }\n\n    return () => {\n      if (taskContract) {\n        taskContract.off(\"DoneTask\", onDoneTask);\n      }\n    };\n  }, []);\n\n  // console.log(\"currentAccount: \", currentAccount);\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have Metamask installed!\");\n      return;\n    } else {\n      console.log(\"Wallet exists! We're ready to go!\");\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n    const network = await ethereum.request({ method: \"eth_chainId\" });\n\n    if (accounts.length !== 0 && network.toString() === \"0xa869\") {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setMetamaskError(false);\n      setCurrentAccount(account);\n      getAllTasks();\n    } else {\n      setMetamaskError(true);\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWallet = async () => {\n    const { ethereum } = window;\n    setMineStatus(\"connecting\");\n\n    if (!ethereum) {\n      alert(\n        \"Metamaskがインストールされていないようです🥺スマホでご利用の方は、Metamaskアプリ内ブラウザからご利用ください🙇‍♂️\"\n      );\n    }\n\n    try {\n      const network = await ethereum.request({ method: \"eth_chainId\" });\n\n      if (network.toString() === \"0xa869\") {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        console.log(\"Found an account! Address: \", accounts[0]);\n        setMetamaskError(null);\n        setCurrentAccount(accounts[0]);\n        setMineStatus(\"ok\");\n      } else {\n        alert(\n          \"Fuji testnetとは異なるネットワークに接続されているようです🥺Fuji testnetに切り替えてリトライしてください🙇‍♂️\"\n        );\n        setMetamaskError(true);\n        setMineStatus(\"e\");\n      }\n    } catch (err) {\n      console.log(err);\n      setMineStatus(\"e\");\n    }\n  };\n\n  // task生成\n  const task = async () => {\n    try {\n      setMineStatus(\"mining\");\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const taskContract = new ethers.Contract(\n          contractAddress,\n          ContractABI,\n          signer\n        );\n\n        // 最終追記分\n        let contractBalance = await provider.getBalance(taskContract.address);\n\n        // ETH送るコントラクト\n        console.log(\n          \"Contract balance:\",\n          ethers.utils.formatEther(contractBalance)\n        );\n\n        // トランザクションへの書き込み\n        const options = { value: ethers.utils.parseEther(bountyValue) };\n        const taskTxn = await taskContract.createTask(\n          currentAccount,\n          dueValue,\n          contentValue,\n          options\n        );\n        console.log(\"Mining...\", taskTxn.hash);\n        await taskTxn.wait();\n        console.log(\"Mined -- \", taskTxn.hash);\n        setMineStatus(\"success\");\n      } else {\n        setMineStatus(\"error\");\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      setMineStatus(\"error\");\n      console.log(error);\n      if (error.toString().match(/string/)) {\n        alert(\"エラーです🥺フォームが空欄の可能性があります。ご確認ください🙇‍♂️\");\n      } else {\n        if (error.toString().match(/decimal/)) {\n          alert(\n            \"エラーです🥺「報酬」欄は数字になっていますか…？ご確認ください🙇‍♂️\"\n          );\n        } else {\n          if (error.toString().match(/object/)) {\n            console.log(error);\n          } else {\n            alert(\n              `エラーです🥺記入内容を確認してみてください。例：「報酬」欄は数字になっていますか…？\n              ▼今回のエラーメッセージ\n            ${error}`\n            );\n          }\n        }\n      }\n    }\n  };\n\n  // task完了\n  const done = async (index, riwarderValue) => {\n    console.log(index);\n    if (allTasks[index].done !== false) {\n      alert(\n        `「${allTasks[index].content}」は既に完了しています、別のタスクを探してみてね🚀`\n      );\n    }\n    try {\n      const { ethereum } = window;\n      if (ethereum && riwarderValue != \"\") {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const taskContract = new ethers.Contract(\n          contractAddress,\n          ContractABI,\n          signer\n        );\n\n        // 完了前のコントラクトの資金量確認\n        let contractBalance = await provider.getBalance(taskContract.address);\n        console.log(\n          \"Contract balance:\",\n          ethers.utils.formatEther(contractBalance)\n        );\n\n        // トランザクションへの書き込み\n        const taskTxn = await taskContract.sendRiward(index, riwarderValue);\n        console.log(\"Mining...\", taskTxn.hash);\n        await taskTxn.wait();\n        console.log(\"Mined -- \", taskTxn.hash);\n\n        // 完了後のコントラクトの資金量確認\n        console.log(\n          \"Contract balance:\",\n          ethers.utils.formatEther(contractBalance)\n        );\n      } else {\n        alert(`報酬の送付先が指定されていません`);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // 成果物提出\n  const output = async (indexValue) => {\n    // ドキュメントIDを取得\n    console.log(indexValue);\n    const usersDocumentRef = collection(firebaseFirestore, \"task\");\n    getDocs(\n      query(\n        usersDocumentRef,\n        where(\"content\", \"==\", allTasks[indexValue].content),\n        where(\"due\", \"==\", allTasks[indexValue].due.toString())\n      )\n    ).then((snapshot) => {\n      snapshot.forEach((doc) => {\n        console.log(allTasks[indexValue].content);\n        // idを文字列に保存\n        setValue(doc.data().id);\n        // console.log(\"doc id\", doc.data().id)\n        // console.log(\"id value\", idValue)\n      });\n    });\n  };\n\n  const addLink = async (idValue) => {\n    // Outputがなかった場合はアラートを出して処理を中断\n    try {\n      if (outputValue != \"\") {\n        // IDからさらにコレクションを~~Refに保存\n        const usersLinkRef = collection(\n          firebaseFirestore,\n          `task/${idValue}/output`\n        );\n        console.log(`task/${idValue}/output`);\n        console.log(usersLinkRef);\n\n        // ~~Refにリンクを登録、IDつきで\n        const newDoc = doc(usersLinkRef).id;\n        console.log(newDoc);\n        const documentRef = await setDoc(doc(usersLinkRef, newDoc), {\n          id: newDoc,\n          link: outputValue,\n          userid: currentAccount,\n          like: 0,\n        });\n      } else {\n        alert(`成果物を入力してください`);\n      }\n    } catch (error) {\n      alert(`報酬の送付先が指定されていません`);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n\n    if (window.ethereum) {\n      window.ethereum.on(\"chainChanged\", (_chainId) =>\n        window.location.reload()\n      );\n    }\n  }, []);\n\n  const navigate = useNavigate();\n  function switchNetwork(e) {\n    e.target.checked ? navigate(\"/\") : navigate(\"/Fuji\");\n  }\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        {metamaskError && (\n          <div className=\"metamask-error\">\n            Fuji Testnet に<br></br>接続してください!\n          </div>\n        )}\n        <Eyecatch version=\"Fuji\" unit=\"$AVAX\" checked={false} />\n        <br />\n        <input\n          type=\"checkbox\"\n          id=\"button\"\n          value=\"ribbon\"\n          checked={isChecked}\n          onChange={changeIsChecked}\n        />\n        <label htmlFor=\"text\">完了済のタスクを非表示　</label>\n\n        <br />\n        {!currentAccount && mineStatus !== \"connecting\" && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {/* ウォレット接続時のローディング */}\n        <br></br>\n        <div className=\"mine-submission\">\n          {mineStatus === \"ok\" && (\n            <div className={mineStatus}>{window.location.reload()}</div>\n          )}\n          {mineStatus === \"connecting\" && (\n            <div className=\"mining\">\n              <div className=\"loader\" />\n              <span>Transaction is mining</span>\n            </div>\n          )}\n          {mineStatus === \"e\" && (\n            <div className=\"error\">\n              <p>Transaction failed. Please try again.</p>\n            </div>\n          )}\n        </div>\n\n        {currentAccount && (\n          <button className=\"waveButton\" onClick={null}>\n            Wallet Connected\n          </button>\n        )}\n        {currentAccount && (\n          <button\n            className=\"waveButton\"\n            onClick={() => {\n              setSelectedItem(\"create\");\n            }}\n          >\n            タスクを作成する\n          </button>\n        )}\n\n        {/* mining時にロード画面にする実装 */}\n        <br></br>\n        <div className=\"mine-submission\">\n          {mineStatus === \"success\" && (\n            <div className={mineStatus}>\n              <p>success!</p>\n            </div>\n          )}\n          {mineStatus === \"mining\" && (\n            <div className={mineStatus}>\n              <div className=\"loader\" />\n              <span>Transaction is mining</span>\n            </div>\n          )}\n          {mineStatus === \"error\" && (\n            <div className={mineStatus}>\n              <p>\n                Transaction failed. Make sure you have $AVAX in your Metamask\n                wallet and try again.\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* モーダルにするテスト */}\n        <Modal\n          isOpen={\"create\" === selectedItem}\n          style={modalStyle}\n          onRequestClose={() => setSelectedItem(\"\")}\n        >\n          <h2>タスクの作成</h2>\n\n          {currentAccount && (\n            <textarea\n              name=\"messageArea\"\n              className=\"form\"\n              placeholder=\"タスクを記入してください(例：コントラクトアドレスの変更)\"\n              type=\"text\"\n              id=\"message\"\n              value={contentValue}\n              onChange={(e) => setContentValue(e.target.value)}\n            />\n          )}\n          <br></br>\n\n          {currentAccount && (\n            <textarea\n              name=\"messageArea\"\n              className=\"form\"\n              placeholder=\"期日を記入してください(例：20220507)\"\n              type=\"text\"\n              id=\"message\"\n              value={dueValue}\n              onChange={(e) => setDueValue(e.target.value)}\n            />\n          )}\n          <br></br>\n\n          {currentAccount && (\n            <textarea\n              name=\"messageArea\"\n              placeholder=\"タスクの報酬額を記入してください(単位:AVAX)\"\n              className=\"form\"\n              type=\"text\"\n              id=\"message\"\n              value={bountyValue}\n              onChange={(e) => setBountyValue(e.target.value)}\n            />\n          )}\n          <br></br>\n\n          <textarea\n            name=\"messageArea\"\n            placeholder=\"タスクの説明を記入してください(例：コントラクトを新たにデプロイし、アドレスを取得してください。提出時には新たなコントラクトアドレスの送付をお願いします)\"\n            className=\"form\"\n            type=\"text\"\n            id=\"expression\"\n            value={expressionValue}\n            onChange={(e) => setExpressionValue(e.target.value)}\n          />\n          <br></br>\n          {currentAccount && (\n            <button\n              className=\"submitButton\"\n              onClick={() => {\n                handleTask();\n                task();\n                setSelectedItem(\"\");\n              }}\n            >\n              タスクを作成する\n            </button>\n          )}\n        </Modal>\n\n        {currentAccount &&\n          allTasks.slice(0).map((task, index) => {\n            return (\n              <div key={index} className=\"cover\">\n                {/* setispenと合わせて別の関数を策定、idを渡す。このidをベースにtaskを特定して表示する関数を書く */}\n                {/* チェックすると完了済のものを非表示 */}\n                {isChecked == true && task.done.toString() == \"false\" && (\n                  <div>\n                    <button\n                      className=\"taskCard\"\n                      onClick={() => {\n                        setIndexValue(index);\n                        setText(index);\n                        setOutput(index);\n                        // setIsOpen(true);\n                        setSelectedItem(\"task\");\n                        // outputの適切な挙動のため、ここで一度タスクIDを拾うための処理を入れる\n                        output(index);\n                      }}\n                    >\n                      投稿者: {task.user}\n                      <br></br>\n                      期日: {task.due.toString()}\n                      <br></br>\n                      タスク: {task.content}\n                      <br></br>\n                      報酬: {ethers.utils.formatEther(task.bounty)}AVAX<br></br>\n                      完了: {task.done.toString()}\n                      <br></br>\n                      {/* ボタンの中 */}\n                    </button>\n                    {/* 詳細を押した際の挙動 */}\n                    <Modal\n                      isOpen={\"task\" === selectedItem}\n                      style={modalStyle}\n                      onRequestClose={() => {\n                        setSelectedItem(\"\");\n                        setRiwarderValue(\"\");\n                        setLinks([]);\n                      }}\n                    >\n                      <div id=\"overlay\">\n                        {/* <div className=\"mainContainer\">\n                                        <div className=\"dataContainer\">\n                                            <div className=\"body\"> */}\n                        <h2>\n                          タスク詳細\n                          <br />\n                        </h2>\n                        <div className=\"modal\">\n                          タスク登録者▼\n                          <br />\n                          <div className=\"card\">\n                            {\" \"}\n                            {allTasks[indexValue].user}\n                          </div>\n                          <br />\n                          期日▼\n                          <br />{\" \"}\n                          <div className=\"card\">\n                            {allTasks[indexValue].due.toString()}\n                          </div>\n                          <br />\n                          タスク▼\n                          <div className=\"card\">\n                            {\" \"}\n                            {allTasks[indexValue].content}\n                          </div>\n                          <br />\n                          詳細説明▼<div className=\"card\"> {textValue}</div>\n                          <br />\n                          報酬▼\n                          <div className=\"card\">\n                            {\" \"}\n                            {ethers.utils.formatEther(\n                              allTasks[indexValue].bounty\n                            )}\n                            AVAX\n                          </div>\n                          <br />\n                          完了▼{\" \"}\n                          <div className=\"card\">\n                            {allTasks[indexValue].done.toString()}\n                          </div>\n                          <br />\n                          成果物:\n                          {/* <div>\n                                                {allLinks.map((link, i) => <div key={i} className=\"card\">{link}</div>)}\n                                            </div> */}\n                          <table>\n                            <thead>\n                              <tr className=\"table\">\n                                <th scope=\"col\" className=\"Button_col\">\n                                  アドレス\n                                </th>\n                                <th scope=\"col\" className=\"Button_col\">\n                                  成果物\n                                </th>\n                                {/* <th scope=\"col\" className=\"Button_col\">いいね</th> */}\n                                {currentAccount ==\n                                  allTasks[indexValue].user.toLowerCase() && (\n                                  <th scope=\"col\" className=\"Button_col\">\n                                    報酬\n                                  </th>\n                                )}\n                              </tr>\n                            </thead>\n                            <tbody>\n                              <tr className=\"\">\n                                <td data-label=\"アドレス\" className=\"\">\n                                  {allLinkHolders.map((userid, i) => (\n                                    <a\n                                      key={i}\n                                      className=\"\"\n                                      href={`https://etherscan.io/address/${userid}`}\n                                      target=\"_blank\"\n                                    >\n                                      {userid.slice(0, 5)}...\n                                      <br />\n                                      <br />\n                                    </a>\n                                  ))}\n                                </td>\n                                <td data-label=\"成果物\" className=\"\">\n                                  {allLinks.map((link, i) => (\n                                    <div>\n                                      <a\n                                        key={i}\n                                        className=\"\"\n                                        href={link}\n                                        target=\"_blank\"\n                                      >\n                                        {\" \"}\n                                        {link.slice(0, 15)}...\n                                        <br />\n                                        <br />\n                                      </a>\n                                    </div>\n                                  ))}\n                                </td>\n                                {/* <td data-label=\"いいね\" className=\"\">\n                                                            {allLinkGoods.map((like, i) => <a key={i} className=\"\"> {like}<br /><br /></a>)}\n\n                                                        </td> */}\n                                <td data-label=\"いいね\" className=\"\">\n                                  {currentAccount ==\n                                    allTasks[indexValue].user.toLowerCase() &&\n                                    allLinkHolders.map((userid, i) => (\n                                      <div>\n                                        <button\n                                          key={i}\n                                          className=\"submitButton\"\n                                          onClick={() => done(index, userid)}\n                                        >\n                                          報酬を送付\n                                        </button>\n                                        <br></br>\n                                      </div>\n                                    ))}\n                                </td>\n                              </tr>\n                            </tbody>\n                          </table>\n                        </div>\n\n                        {/* タスク提出 */}\n                        <textarea\n                          name=\"messageArea\"\n                          className=\"form\"\n                          placeholder=\"成果物のリンクを添付\"\n                          type=\"text\"\n                          id=\"riward\"\n                          value={outputValue}\n                          onChange={(e) => setOutputValue(e.target.value)}\n                        />\n                        <br></br>\n                        <button\n                          className=\"submitButton\"\n                          onClick={() => {\n                            output(indexValue);\n                            console.log(\"id value\", idValue);\n                            addLink(idValue);\n                          }}\n                        >\n                          成果物を提出\n                        </button>\n\n                        {/* 報酬送付 */}\n                        <br></br>\n                      </div>\n                    </Modal>\n                  </div>\n                )}\n\n                {isChecked == false && (\n                  <div>\n                    <button\n                      className=\"taskCard\"\n                      onClick={() => {\n                        setIndexValue(index);\n                        setText(index);\n                        setOutput(index);\n                        // setIsOpen(true);\n                        setSelectedItem(\"task\");\n                        // outputの適切な挙動のため、ここで一度タスクIDを拾うための処理を入れる\n                        output(index);\n                      }}\n                    >\n                      投稿者: {task.user}\n                      <br></br>\n                      期日: {task.due.toString()}\n                      <br></br>\n                      タスク: {task.content}\n                      <br></br>\n                      報酬: {ethers.utils.formatEther(task.bounty)}AVAX<br></br>\n                      完了: {task.done.toString()}\n                      <br></br>\n                      {/* ボタンの中 */}\n                    </button>\n                    {/* 詳細を押した際の挙動 */}\n                    <Modal\n                      isOpen={\"task\" === selectedItem}\n                      style={modalStyle}\n                      onRequestClose={() => {\n                        setSelectedItem(\"\");\n                        setRiwarderValue(\"\");\n                        setLinks([]);\n                      }}\n                    >\n                      <div id=\"overlay\">\n                        {/* <div className=\"mainContainer\">\n                                        <div className=\"dataContainer\">\n                                            <div className=\"body\"> */}\n                        <h2>\n                          タスク詳細\n                          <br />\n                        </h2>\n                        <div className=\"modal\">\n                          タスク登録者▼\n                          <br />\n                          <div className=\"card\">\n                            {\" \"}\n                            {allTasks[indexValue].user}\n                          </div>\n                          <br />\n                          期日▼\n                          <br />{\" \"}\n                          <div className=\"card\">\n                            {allTasks[indexValue].due.toString()}\n                          </div>\n                          <br />\n                          タスク▼\n                          <div className=\"card\">\n                            {\" \"}\n                            {allTasks[indexValue].content}\n                          </div>\n                          <br />\n                          詳細説明▼<div className=\"card\"> {textValue}</div>\n                          <br />\n                          報酬▼\n                          <div className=\"card\">\n                            {\" \"}\n                            {ethers.utils.formatEther(\n                              allTasks[indexValue].bounty\n                            )}\n                            AVAX\n                          </div>\n                          <br />\n                          完了▼{\" \"}\n                          <div className=\"card\">\n                            {allTasks[indexValue].done.toString()}\n                          </div>\n                          <br />\n                          成果物:\n                          {/* <div>\n                                                {allLinks.map((link, i) => <div key={i} className=\"card\">{link}</div>)}\n                                            </div> */}\n                          <table>\n                            <thead>\n                              <tr className=\"table\">\n                                <th scope=\"col\" className=\"Button_col\">\n                                  アドレス\n                                </th>\n                                <th scope=\"col\" className=\"Button_col\">\n                                  成果物\n                                </th>\n                                {/* <th scope=\"col\" className=\"Button_col\">いいね</th> */}\n                                {currentAccount ==\n                                  allTasks[indexValue].user.toLowerCase() && (\n                                  <th scope=\"col\" className=\"Button_col\">\n                                    報酬\n                                  </th>\n                                )}\n                              </tr>\n                            </thead>\n                            <tbody>\n                              <tr className=\"\">\n                                <td data-label=\"アドレス\" className=\"\">\n                                  {allLinkHolders.map((userid, i) => (\n                                    <a\n                                      key={i}\n                                      className=\"\"\n                                      href={`https://etherscan.io/address/${userid}`}\n                                      target=\"_blank\"\n                                    >\n                                      {userid.slice(0, 5)}...\n                                      <br />\n                                      <br />\n                                    </a>\n                                  ))}\n                                </td>\n                                <td data-label=\"成果物\" className=\"\">\n                                  {allLinks.map((link, i) => (\n                                    <div>\n                                      <a\n                                        key={i}\n                                        className=\"\"\n                                        href={link}\n                                        target=\"_blank\"\n                                      >\n                                        {\" \"}\n                                        {link.slice(0, 15)}...\n                                        <br />\n                                        <br />\n                                      </a>\n                                    </div>\n                                  ))}\n                                </td>\n                                {/* <td data-label=\"いいね\" className=\"\">\n                                                            {allLinkGoods.map((like, i) => <a key={i} className=\"\"> {like}<br /><br /></a>)}\n\n                                                        </td> */}\n                                <td data-label=\"いいね\" className=\"\">\n                                  {currentAccount ==\n                                    allTasks[indexValue].user.toLowerCase() &&\n                                    allLinkHolders.map((userid, i) => (\n                                      <div>\n                                        <button\n                                          key={i}\n                                          className=\"submitButton\"\n                                          onClick={() => done(index, userid)}\n                                        >\n                                          報酬を送付\n                                        </button>\n                                        <br></br>\n                                      </div>\n                                    ))}\n                                </td>\n                              </tr>\n                            </tbody>\n                          </table>\n                        </div>\n\n                        {/* タスク提出 */}\n                        <textarea\n                          name=\"messageArea\"\n                          className=\"form\"\n                          placeholder=\"成果物のリンクを添付\"\n                          type=\"text\"\n                          id=\"riward\"\n                          value={outputValue}\n                          onChange={(e) => setOutputValue(e.target.value)}\n                        />\n                        <br></br>\n                        <button\n                          className=\"submitButton\"\n                          onClick={() => {\n                            output(indexValue);\n                            console.log(\"id value\", idValue);\n                            addLink(idValue);\n                          }}\n                        >\n                          成果物を提出\n                        </button>\n\n                        {/* 報酬送付 */}\n                        <br></br>\n                      </div>\n                    </Modal>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport default Top;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Sample extends React.Component {\n\n    render() {\n        return (\n            <div>\n                Sample!\n                <br />\n                <Link to={`/`}>Go To App</Link>\n\n\n                <br />\n                <br />\n                Sample!\n                <br />\n                <Link to={`/`}>Go To App</Link>\n            </div>\n\n        );\n    }\n}\n\nexport default Sample;\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport './App.css';\n// import { ethers } from \"ethers\";\n\nconst Team = () => {\n    const [contentValue, setContentValue] = useState([]);\n    const [currentAccount, setCurrentAccount] = useState(\"\");\n    const { ethereum } = window;\n\n    const accounts = ethereum.request({ method: \"eth_accounts\" });\n    if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        // setCurrentAccount(account)\n    } else {\n        console.log(\"No authorized account found\")\n    }\n    return (\n        <div className=\"mainContainer\">\n            <div className=\"dataContainer\">\n                <div className=\"header\">\n                    チーム登録\n                </div>\n                <div className=\"bio\">\n                    チームを登録しよう！🔥🚀\n                </div>\n                <br />\n                Sample!\n                <br />\n                <Link to={`/`}>Go To App</Link>\n                <br />\n\n                Sample!\n                <br />\n                <Link to={`/sample`}>Go To Sample</Link>\n                <br />\n\n                <button className=\"waveButton\" onClick={null}>\n                    タスクを作成する\n                </button>\n                <br />\n                <textarea name=\"messageArea\"\n                    placeholder=\"タスクを記入してください\"\n                    type=\"text\"\n                    id=\"message\"\n                    value={contentValue}\n                    onChange={e => setContentValue(e.target.value)} />\n\n            </div>\n        </div>\n\n    );\n}\n\nexport default Team;\n\n","import React, { useEffect, useState } from \"react\";\nimport { onSnapshot } from \"firebase/firestore\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\n// ABIのインポート\nimport abi from \"./utils/CreateTask.json\";\n\n// モーダル\nimport Modal from \"react-modal\";\n\n// Firebase関係\nimport {\n  doc,\n  setDoc,\n  collection,\n  getDocs,\n  query,\n  where,\n} from \"firebase/firestore\";\nimport { firebaseFirestore } from \"./firebase\";\n\nimport { Link, useNavigate } from \"react-router-dom\";\n\n// MUI\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\n\nimport Eyecatch from \"./components/Eyecatch\";\n\nModal.setAppElement(\"#root\");\nconst Top = () => {\n  // チェックボックスの実装\n  const [isChecked, setIsChecked] = React.useState(false);\n\n  const changeIsChecked = (e) => {\n    if (isChecked == false) {\n      setIsChecked(true);\n    } else {\n      setIsChecked(false);\n    }\n  };\n\n  // マイニング中にロード\n  const [mineStatus, setMineStatus] = useState(null);\n  const [metamaskError, setMetamaskError] = useState(null);\n\n  // ユーザーのウォレット保存用状態変数\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  // メッセージ保存用状態変数\n  const [contentValue, setContentValue] = useState(\"\");\n\n  // 期日保存用状態変数\n  const [dueValue, setDueValue] = useState(\"\");\n\n  // tasks保存用状態変数\n  const [allTasks, setAllTasks] = useState([]);\n\n  // 報酬額保存用状態変数\n  const [bountyValue, setBountyValue] = useState([]);\n\n  // タスク詳細保存用状態変数\n  const [expressionValue, setExpressionValue] = useState([]);\n\n  // 報酬送付先保存用状態変数\n  const [riwarderValue, setRiwarderValue] = useState([]);\n\n  // 成果物保存用状態変数\n  const [outputValue, setOutputValue] = React.useState(\"0\");\n\n  // モーダル\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n\n  // タスクID保存用状態変数\n  const [idValue, setValue] = React.useState(\"0\");\n\n  // モーダル表示用インデックス・コンテンツ保存\n  const [indexValue, setIndexValue] = React.useState(0);\n  const [textValue, setTextValue] = React.useState(0);\n  const [selectedItem, setSelectedItem] = useState(\"\");\n\n  // 成果物一覧保存用配列\n  const [allLinks, setLinks] = useState([]);\n  // 成果物投稿者\n  const [allLinkHolders, setLinkHolders] = useState([]);\n  // 成果物いいね数\n  const [allLinkGoods, setLinkGoods] = useState([]);\n\n  // Astar Mainnetアドレス保存用\n  // const contractAddress = \"0x980a80De95bc528b6e413516F881B78F1e474F41\"\n  // Astarアドレス保存用\n  // const contractAddress = \"0x113FA87E7D8c4C4eA49956943C2dcc8659ABF6FA\"\n\n  // rinkebyテスト用\n  // const contractAddress = \"0x59CF146881B9191c51b38e5990834a0779E07a90\"\n\n  // 新testnet(Rinekby)\n  const contractAddress = \"0xC45Cb7eCe0823bCD1df7Eaf6275462fAe114EFbD\";\n\n  // ABIの参照\n  const ContractABI = abi.abi;\n\n  // Firebase表示用\n  const [users, setUsers] = useState([]);\n\n  // モーダルスタイル\n  const modalStyle = {\n    overlay: {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      backgroundColor: \"rgba(0,0,0,0.85)\",\n      // opacity: 0.7\n    },\n    content: {\n      color: \"black\",\n      textAlign: \"center\",\n      position: \"absolute\",\n      top: \"5rem\",\n      left: \"5rem\",\n      right: \"5rem\",\n      bottom: \"5rem\",\n      backgroundColor: \"paleturquoise\",\n      borderRadius: \"1rem\",\n      padding: \"1.5rem\",\n    },\n  };\n\n  // タスクの表示に使う\n  useEffect(() => {\n    const usersCollectionRef = collection(firebaseFirestore, \"people\");\n    // リアタイ更新\n    const unsub = onSnapshot(usersCollectionRef, (querySnapshot) => {\n      setUsers(\n        querySnapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id }))\n      );\n    });\n    return unsub;\n  }, []);\n\n  // タスク登録\n  const handleTask = async () => {\n    // event.preventDefault();\n    const usersCollectionRef = collection(firebaseFirestore, \"task\");\n    const newDoc = doc(usersCollectionRef).id;\n    console.log(newDoc);\n    const documentRef = await setDoc(doc(usersCollectionRef, newDoc), {\n      // usersCollectionRef.doc(newDoc).set({\n      user: currentAccount,\n      content: contentValue,\n      due: dueValue,\n      name: expressionValue,\n      id: newDoc,\n    });\n  };\n  // コンテンツ表示\n  const setText = async (index) => {\n    const usersDocumentRef = collection(firebaseFirestore, \"task\");\n    await getDocs(\n      query(\n        usersDocumentRef,\n        where(\"content\", \"==\", allTasks[index].content),\n        where(\"due\", \"==\", allTasks[index].due.toString())\n      )\n    ).then((snapshot) => {\n      snapshot.forEach((doc) => {\n        setTextValue(doc.data().name);\n      });\n    });\n  };\n  // 終わり\n\n  // 成果物一覧表示\n  const setOutput = async (index) => {\n    const usersDocumentRef = collection(firebaseFirestore, \"task\");\n    let taskId = 0;\n    await getDocs(\n      query(\n        usersDocumentRef,\n        where(\"content\", \"==\", allTasks[index].content),\n        where(\"due\", \"==\", allTasks[index].due.toString())\n      )\n    ).then((snapshot) => {\n      snapshot.forEach((doc) => {\n        taskId = doc.data().id;\n        console.log(taskId);\n      });\n    });\n\n    const usersLinkRef = collection(firebaseFirestore, `task/${taskId}/output`);\n    // 成果物を全て配列に入れる\n    await getDocs(query(usersLinkRef)).then((snapshot) => {\n      snapshot.forEach((doc) => {\n        // setContentValue(doc.data().link)\n        // console.log(allLinks);\n        allLinks.push(doc.data().link);\n        setLinks(allLinks);\n      });\n    });\n    await getDocs(query(usersLinkRef)).then((snapshot) => {\n      snapshot.forEach((doc) => {\n        allLinkHolders.push(doc.data().userid);\n        setLinkHolders(allLinkHolders);\n      });\n    });\n    await getDocs(query(usersLinkRef)).then((snapshot) => {\n      snapshot.forEach((doc) => {\n        allLinkGoods.push(doc.data().like);\n        setLinkGoods(allLinkGoods);\n      });\n    });\n    setOutputValue(\"\");\n  };\n  // 終わり\n\n  const getAllTasks = async () => {\n    const { ethereum } = window;\n\n    try {\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const taskContract = new ethers.Contract(\n          contractAddress,\n          ContractABI,\n          signer\n        );\n        const tasks = await taskContract.getAllTasks();\n        const tasksCleaned = tasks.map((task) => {\n          return {\n            user: task.user,\n            due: task.due,\n            content: task.content,\n            bounty: task.bounty,\n            done: task.done,\n          };\n        });\n        setAllTasks(tasksCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // タスク登録時イベント\n  useEffect(() => {\n    let taskContract;\n\n    const onNewTask = (user, due, content, bounty, done) => {\n      console.log(\"NewTask\", user, due, content, bounty, done);\n      // alert(`「${content}」を登録しました。頑張りましょう🔥🚀`);\n      setAllTasks((prevState) => [\n        ...prevState,\n        {\n          user: user,\n          due: due,\n          content: content,\n          bounty: bounty,\n          done: done,\n        },\n      ]);\n    };\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n      taskContract.on(\"NewTask\", onNewTask);\n    }\n\n    return () => {\n      if (taskContract) {\n        taskContract.off(\"NewTask\", onNewTask);\n      }\n    };\n  }, []);\n\n  // タスク完了時イベント\n  useEffect(() => {\n    let taskContract;\n\n    const onDoneTask = (user, index) => {\n      console.log(\"Done.\", user, index);\n      // alert(`タスク完了おめでとうございます！🔥🚀`);\n    };\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n      taskContract.on(\"DoneTask\", onDoneTask);\n    }\n\n    return () => {\n      if (taskContract) {\n        taskContract.off(\"DoneTask\", onDoneTask);\n      }\n    };\n  }, []);\n\n  // console.log(\"currentAccount: \", currentAccount);\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have Metamask installed!\");\n      return;\n    } else {\n      console.log(\"Wallet exists! We're ready to go!\");\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n    const network = await ethereum.request({ method: \"eth_chainId\" });\n\n    if (accounts.length !== 0 && network.toString() === \"0x4\") {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setMetamaskError(false);\n      setCurrentAccount(account);\n      getAllTasks();\n    } else {\n      setMetamaskError(true);\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWallet = async () => {\n    const { ethereum } = window;\n    setMineStatus(\"connecting\");\n\n    if (!ethereum) {\n      alert(\n        \"Metamaskがインストールされていないようです🥺スマホでご利用の方は、Metamaskアプリ内ブラウザからご利用ください🙇‍♂️\"\n      );\n    }\n\n    try {\n      const network = await ethereum.request({ method: \"eth_chainId\" });\n\n      if (network.toString() === \"0x4\") {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        console.log(\"Found an account! Address: \", accounts[0]);\n        setMetamaskError(null);\n        setCurrentAccount(accounts[0]);\n        setMineStatus(\"ok\");\n      } else {\n        alert(\n          \"Rinkeby testnetとは異なるネットワークに接続されているようです🥺Metamaskアプリから、ネットワークをRinkeby testnetに切り替えてリトライしてください🙇‍♂️\"\n        );\n        setMetamaskError(true);\n        setMineStatus(\"e\");\n      }\n    } catch (err) {\n      console.log(err);\n      setMineStatus(\"e\");\n    }\n  };\n\n  // task生成\n  const task = async () => {\n    try {\n      setMineStatus(\"mining\");\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const taskContract = new ethers.Contract(\n          contractAddress,\n          ContractABI,\n          signer\n        );\n\n        // 最終追記分\n        let contractBalance = await provider.getBalance(taskContract.address);\n\n        // ETH送るコントラクト\n        console.log(\n          \"Contract balance:\",\n          ethers.utils.formatEther(contractBalance)\n        );\n\n        // トランザクションへの書き込み\n        const options = { value: ethers.utils.parseEther(bountyValue) };\n        const taskTxn = await taskContract.createTask(\n          currentAccount,\n          dueValue,\n          contentValue,\n          options\n        );\n        console.log(\"Mining...\", taskTxn.hash);\n        await taskTxn.wait();\n        console.log(\"Mined -- \", taskTxn.hash);\n        setMineStatus(\"success\");\n      } else {\n        setMineStatus(\"error\");\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      setMineStatus(\"error\");\n      console.log(error);\n      if (error.toString().match(/string/)) {\n        alert(\"エラーです🥺フォームが空欄の可能性があります。ご確認ください🙇‍♂️\");\n      } else {\n        if (error.toString().match(/decimal/)) {\n          alert(\n            \"エラーです🥺「報酬」欄は数字になっていますか…？ご確認ください🙇‍♂️\"\n          );\n        } else {\n          if (error.toString().match(/object/)) {\n            console.log(error);\n          } else {\n            alert(\n              `エラーです🥺記入内容を確認してみてください。例：「報酬」欄は数字になっていますか…？\n                      ▼今回のエラーメッセージ\n                    ${error}`\n            );\n          }\n        }\n      }\n    }\n  };\n\n  // task完了\n  const done = async (index, riwarderValue) => {\n    console.log(index);\n    if (allTasks[index].done !== false) {\n      alert(\n        `「${allTasks[index].content}」は既に完了しています、別のタスクを探してみてね🚀`\n      );\n    }\n    try {\n      const { ethereum } = window;\n      if (ethereum && riwarderValue != \"\") {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const taskContract = new ethers.Contract(\n          contractAddress,\n          ContractABI,\n          signer\n        );\n\n        // 完了前のコントラクトの資金量確認\n        let contractBalance = await provider.getBalance(taskContract.address);\n        console.log(\n          \"Contract balance:\",\n          ethers.utils.formatEther(contractBalance)\n        );\n\n        // トランザクションへの書き込み\n        const taskTxn = await taskContract.sendRiward(index, riwarderValue);\n        console.log(\"Mining...\", taskTxn.hash);\n        await taskTxn.wait();\n        console.log(\"Mined -- \", taskTxn.hash);\n\n        // 完了後のコントラクトの資金量確認\n        console.log(\n          \"Contract balance:\",\n          ethers.utils.formatEther(contractBalance)\n        );\n      } else {\n        alert(\n          `報酬の送付先が指定されていません🥺　コントラクトアドレスを入力してください！`\n        );\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // 成果物提出\n  const output = async (indexValue) => {\n    // ドキュメントIDを取得\n    console.log(indexValue);\n    const usersDocumentRef = collection(firebaseFirestore, \"task\");\n    getDocs(\n      query(\n        usersDocumentRef,\n        where(\"content\", \"==\", allTasks[indexValue].content),\n        where(\"due\", \"==\", allTasks[indexValue].due.toString())\n      )\n    ).then((snapshot) => {\n      snapshot.forEach((doc) => {\n        console.log(allTasks[indexValue].content);\n        // idを文字列に保存\n        setValue(doc.data().id);\n        // console.log(\"doc id\", doc.data().id)\n        // console.log(\"id value\", idValue)\n      });\n    });\n  };\n\n  const addLink = async (idValue) => {\n    // Outputがなかった場合はアラートを出して処理を中断\n    try {\n      if (outputValue != \"\") {\n        // IDからさらにコレクションを~~Refに保存\n        const usersLinkRef = collection(\n          firebaseFirestore,\n          `task/${idValue}/output`\n        );\n        console.log(`task/${idValue}/output`);\n        console.log(usersLinkRef);\n\n        // ~~Refにリンクを登録、IDつきで\n        const newDoc = doc(usersLinkRef).id;\n        console.log(newDoc);\n        const documentRef = await setDoc(doc(usersLinkRef, newDoc), {\n          id: newDoc,\n          link: outputValue,\n          userid: currentAccount,\n          like: 0,\n        });\n      } else {\n        alert(`成果物を入力してください`);\n      }\n    } catch (error) {\n      alert(\"エラーが発生しました\");\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n\n    if (window.ethereum) {\n      window.ethereum.on(\"chainChanged\", (_chainId) =>\n        window.location.reload()\n      );\n    }\n  }, []);\n\n  const navigate = useNavigate();\n  function switchNetwork(e) {\n    e.target.checked ? navigate(\"/\") : navigate(\"/fuji\");\n  }\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        {metamaskError && (\n          <div className=\"metamask-error\">\n            Rinkeby Testnetに <br></br>接続してください!\n          </div>\n        )}\n        <Eyecatch version=\"Rinkeby\" unit=\"$ETH\" checked={true} />\n\n        <br />\n\n        <FormControlLabel\n          label=\"完了済のタスクを非表示\"\n          value=\"ribbon\"\n          control={\n            <Checkbox\n              checked={isChecked}\n              onChange={changeIsChecked}\n              name=\"toggleDisplayAll\"\n            />\n          }\n        />\n\n        <br />\n\n        {!currentAccount && mineStatus !== \"connecting\" && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {/* ウォレット接続時のローディング */}\n        <br></br>\n        <div className=\"mine-submission\">\n          {mineStatus === \"ok\" && (\n            <div className={mineStatus}>{window.location.reload()}</div>\n          )}\n          {mineStatus === \"connecting\" && (\n            <div className=\"mining\">\n              <div className=\"loader\" />\n              <span>Transaction is mining</span>\n            </div>\n          )}\n          {mineStatus === \"e\" && (\n            <div className=\"error\">\n              <p>Transaction failed. Please try again.</p>\n            </div>\n          )}\n        </div>\n\n        {currentAccount && (\n          <button className=\"waveButton\" onClick={null}>\n            Wallet Connected\n          </button>\n        )}\n        {currentAccount && mineStatus !== \"mining\" && (\n          <button\n            className=\"waveButton\"\n            onClick={() => {\n              setSelectedItem(\"create\");\n            }}\n          >\n            タスクを作成する\n          </button>\n        )}\n\n        {/* mining時にロード画面にする実装 */}\n        <br></br>\n        <div className=\"mine-submission\">\n          {mineStatus === \"success\" && (\n            <div className={mineStatus}>\n              <p>success!</p>\n            </div>\n          )}\n          {mineStatus === \"mining\" && (\n            <div className={mineStatus}>\n              <div className=\"loader\" />\n              <span>Transaction is mining</span>\n            </div>\n          )}\n          {mineStatus === \"error\" && (\n            <div className={mineStatus}>\n              <p>\n                Transaction failed. Make sure you have $ETH in your Metamask\n                wallet and try again.\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* モーダルにするテスト */}\n        <Modal\n          isOpen={\"create\" === selectedItem}\n          style={modalStyle}\n          onRequestClose={() => setSelectedItem(\"\")}\n        >\n          <h2>タスクの作成</h2>\n\n          {currentAccount && (\n            <textarea\n              name=\"messageArea\"\n              className=\"form\"\n              placeholder=\"タスクを記入してください(例：コントラクトアドレスの変更)\"\n              type=\"text\"\n              id=\"message\"\n              value={contentValue}\n              onChange={(e) => setContentValue(e.target.value)}\n            />\n          )}\n          <br></br>\n\n          {currentAccount && (\n            <textarea\n              name=\"messageArea\"\n              className=\"form\"\n              placeholder=\"期日を記入してください(例：20220507)\"\n              type=\"text\"\n              id=\"message\"\n              value={dueValue}\n              onChange={(e) => setDueValue(e.target.value)}\n            />\n          )}\n          <br></br>\n\n          {currentAccount && (\n            <textarea\n              name=\"messageArea\"\n              placeholder=\"タスクの報酬額を記入してください(単位:ETH)\"\n              className=\"form\"\n              type=\"text\"\n              id=\"message\"\n              value={bountyValue}\n              onChange={(e) => setBountyValue(e.target.value)}\n            />\n          )}\n          <br></br>\n\n          <textarea\n            name=\"messageArea\"\n            placeholder=\"タスクの説明を記入してください(例：コントラクトを新たにデプロイし、アドレスを取得してください。提出時には新たなコントラクトアドレスの送付をお願いします)\"\n            className=\"form\"\n            type=\"text\"\n            id=\"expression\"\n            value={expressionValue}\n            onChange={(e) => setExpressionValue(e.target.value)}\n          />\n          <br></br>\n          {currentAccount && (\n            <button\n              className=\"submitButton\"\n              onClick={() => {\n                handleTask();\n                task();\n                setSelectedItem(\"\");\n              }}\n            >\n              タスクを作成する\n            </button>\n          )}\n        </Modal>\n\n        {currentAccount &&\n          allTasks.slice(0).map((task, index) => {\n            return (\n              <div key={index} className=\"cover\">\n                {/* setispenと合わせて別の関数を策定、idを渡す。このidをベースにtaskを特定して表示する関数を書く */}\n\n                {/* チェックされている場合、完了済のタスクは表示しない */}\n                {isChecked == true && task.done.toString() == \"false\" && (\n                  <div>\n                    <button\n                      className=\"taskCard\"\n                      onClick={() => {\n                        setIndexValue(index);\n                        setText(index);\n                        setOutput(index);\n                        // setIsOpen(true);\n                        setSelectedItem(\"task\");\n                        // outputの適切な挙動のため、ここで一度タスクIDを拾うための処理を入れる\n                        output(index);\n                      }}\n                    >\n                      投稿者: {task.user}\n                      <br></br>\n                      期日: {task.due.toString()}\n                      <br></br>\n                      タスク: {task.content}\n                      <br></br>\n                      報酬: {ethers.utils.formatEther(task.bounty)}ETH<br></br>\n                      完了: {task.done.toString()}\n                      <br></br>\n                      {/* ボタンの中 */}\n                    </button>\n                    {/* 詳細を押した際の挙動 */}\n                    <Modal\n                      isOpen={\"task\" === selectedItem}\n                      style={modalStyle}\n                      onRequestClose={() => {\n                        setSelectedItem(\"\");\n                        setRiwarderValue(\"\");\n                        setLinks([]);\n                        setLinkHolders([]);\n                        setLinkGoods([]);\n                      }}\n                    >\n                      <div id=\"overlay\">\n                        {/* <div className=\"mainContainer\">\n                                        <div className=\"dataContainer\">\n                                            <div className=\"body\"> */}\n                        <h2>\n                          タスク詳細\n                          <br />\n                        </h2>\n                        <div className=\"modal\">\n                          タスク登録者▼\n                          <br />\n                          <div className=\"card\">\n                            {\" \"}\n                            {allTasks[indexValue].user}\n                          </div>\n                          <br />\n                          期日▼\n                          <br />{\" \"}\n                          <div className=\"card\">\n                            {allTasks[indexValue].due.toString()}\n                          </div>\n                          <br />\n                          タスク▼\n                          <div className=\"card\">\n                            {\" \"}\n                            {allTasks[indexValue].content}\n                          </div>\n                          <br />\n                          詳細説明▼<div className=\"card\"> {textValue}</div>\n                          <br />\n                          報酬▼\n                          <div className=\"card\">\n                            {\" \"}\n                            {ethers.utils.formatEther(\n                              allTasks[indexValue].bounty\n                            )}\n                            ETH\n                          </div>\n                          <br />\n                          完了▼{\" \"}\n                          <div className=\"card\">\n                            {allTasks[indexValue].done.toString()}\n                          </div>\n                          <br />\n                          成果物:\n                          <table>\n                            <thead>\n                              <tr className=\"table\">\n                                <th scope=\"col\" className=\"Button_col\">\n                                  アドレス\n                                </th>\n                                <th scope=\"col\" className=\"Button_col\">\n                                  成果物\n                                </th>\n                                {/* <th scope=\"col\" className=\"Button_col\">いいね</th> */}\n                                {currentAccount ==\n                                  allTasks[indexValue].user.toLowerCase() && (\n                                  <th scope=\"col\" className=\"Button_col\">\n                                    報酬\n                                  </th>\n                                )}\n                              </tr>\n                            </thead>\n                            <tbody>\n                              <tr className=\"\">\n                                <td data-label=\"アドレス\" className=\"\">\n                                  {allLinkHolders.map((userid, i) => (\n                                    <a\n                                      key={i}\n                                      className=\"\"\n                                      href={`https://etherscan.io/address/${userid}`}\n                                      target=\"_blank\"\n                                    >\n                                      {userid.slice(0, 5)}...\n                                      <br />\n                                      <br />\n                                    </a>\n                                  ))}\n                                </td>\n                                <td data-label=\"成果物\" className=\"\">\n                                  {allLinks.map((link, i) => (\n                                    <div>\n                                      <a\n                                        key={i}\n                                        className=\"\"\n                                        href={link}\n                                        target=\"_blank\"\n                                      >\n                                        {\" \"}\n                                        {link.slice(0, 15)}...\n                                        <br />\n                                        <br />\n                                      </a>\n                                    </div>\n                                  ))}\n                                </td>\n                                {/* <td data-label=\"いいね\" className=\"\">\n                                                            {allLinkGoods.map((like, i) => <a key={i} className=\"\"> {like}<br /><br /></a>)}\n\n                                                        </td> */}\n                                <td data-label=\"いいね\" className=\"\">\n                                  {currentAccount ==\n                                    allTasks[indexValue].user.toLowerCase() &&\n                                    allLinkHolders.map((userid, i) => (\n                                      <div>\n                                        <button\n                                          key={i}\n                                          className=\"submitButton\"\n                                          onClick={() => done(index, userid)}\n                                        >\n                                          報酬を送付\n                                        </button>\n                                        <br></br>\n                                      </div>\n                                    ))}\n                                </td>\n                              </tr>\n                            </tbody>\n                          </table>\n                        </div>\n\n                        {/* タスク提出 */}\n                        <textarea\n                          name=\"messageArea\"\n                          className=\"form\"\n                          placeholder=\"成果物のリンクを添付\"\n                          type=\"text\"\n                          id=\"riward\"\n                          value={outputValue}\n                          onChange={(e) => setOutputValue(e.target.value)}\n                        />\n                        <br></br>\n                        <button\n                          className=\"submitButton\"\n                          onClick={(e) => {\n                            output(indexValue);\n                            console.log(\"id value\", idValue);\n                            addLink(idValue);\n                            setOutput(index);\n                            setOutputValue(\"\");\n                          }}\n                        >\n                          成果物を提出\n                        </button>\n                      </div>\n                    </Modal>\n                  </div>\n                )}\n\n                {isChecked == false && (\n                  <div>\n                    <button\n                      className=\"taskCard\"\n                      onClick={() => {\n                        setIndexValue(index);\n                        setText(index);\n                        setOutput(index);\n                        // setIsOpen(true);\n                        setSelectedItem(\"task\");\n                        // outputの適切な挙動のため、ここで一度タスクIDを拾うための処理を入れる\n                        output(index);\n                      }}\n                    >\n                      投稿者: {task.user}\n                      <br></br>\n                      期日: {task.due.toString()}\n                      <br></br>\n                      タスク: {task.content}\n                      <br></br>\n                      報酬: {ethers.utils.formatEther(task.bounty)}ETH<br></br>\n                      完了: {task.done.toString()}\n                      <br></br>\n                      {/* ボタンの中 */}\n                    </button>\n                    {/* 詳細を押した際の挙動 */}\n                    <Modal\n                      isOpen={\"task\" === selectedItem}\n                      style={modalStyle}\n                      onRequestClose={() => {\n                        setSelectedItem(\"\");\n                        setRiwarderValue(\"\");\n                        setLinks([]);\n                        setLinkHolders([]);\n                        setLinkGoods([]);\n                      }}\n                    >\n                      <div id=\"overlay\">\n                        {/* <div className=\"mainContainer\">\n                                        <div className=\"dataContainer\">\n                                            <div className=\"body\"> */}\n                        <h2>\n                          タスク詳細\n                          <br />\n                        </h2>\n                        <div className=\"modal\">\n                          タスク登録者▼\n                          <br />\n                          <div className=\"card\">\n                            {\" \"}\n                            {allTasks[indexValue].user}\n                          </div>\n                          <br />\n                          期日▼\n                          <br />{\" \"}\n                          <div className=\"card\">\n                            {allTasks[indexValue].due.toString()}\n                          </div>\n                          <br />\n                          タスク▼\n                          <div className=\"card\">\n                            {\" \"}\n                            {allTasks[indexValue].content}\n                          </div>\n                          <br />\n                          詳細説明▼<div className=\"card\"> {textValue}</div>\n                          <br />\n                          報酬▼\n                          <div className=\"card\">\n                            {\" \"}\n                            {ethers.utils.formatEther(\n                              allTasks[indexValue].bounty\n                            )}\n                            ETH\n                          </div>\n                          <br />\n                          完了▼{\" \"}\n                          <div className=\"card\">\n                            {allTasks[indexValue].done.toString()}\n                          </div>\n                          <br />\n                          成果物:\n                          <table>\n                            <thead>\n                              <tr className=\"table\">\n                                <th scope=\"col\" className=\"Button_col\">\n                                  アドレス\n                                </th>\n                                <th scope=\"col\" className=\"Button_col\">\n                                  成果物\n                                </th>\n                                {/* <th scope=\"col\" className=\"Button_col\">いいね</th> */}\n                                {currentAccount ==\n                                  allTasks[indexValue].user.toLowerCase() && (\n                                  <th scope=\"col\" className=\"Button_col\">\n                                    報酬\n                                  </th>\n                                )}\n                              </tr>\n                            </thead>\n                            <tbody>\n                              <tr className=\"\">\n                                <td data-label=\"アドレス\" className=\"\">\n                                  {allLinkHolders.map((userid, i) => (\n                                    <a\n                                      key={i}\n                                      className=\"\"\n                                      href={`https://etherscan.io/address/${userid}`}\n                                      target=\"_blank\"\n                                    >\n                                      {userid.slice(0, 5)}...\n                                      <br />\n                                      <br />\n                                    </a>\n                                  ))}\n                                </td>\n                                <td data-label=\"成果物\" className=\"\">\n                                  {allLinks.map((link, i) => (\n                                    <div>\n                                      <a\n                                        key={i}\n                                        className=\"\"\n                                        href={link}\n                                        target=\"_blank\"\n                                      >\n                                        {\" \"}\n                                        {link.slice(0, 15)}...\n                                        <br />\n                                        <br />\n                                      </a>\n                                    </div>\n                                  ))}\n                                </td>\n                                {/* <td data-label=\"いいね\" className=\"\">\n                                                            {allLinkGoods.map((like, i) => <a key={i} className=\"\"> {like}<br /><br /></a>)}\n\n                                                        </td> */}\n                                <td data-label=\"いいね\" className=\"\">\n                                  {currentAccount ==\n                                    allTasks[indexValue].user.toLowerCase() &&\n                                    allLinkHolders.map((userid, i) => (\n                                      <div>\n                                        <button\n                                          key={i}\n                                          className=\"submitButton\"\n                                          onClick={() => done(index, userid)}\n                                        >\n                                          報酬を送付\n                                        </button>\n                                        <br></br>\n                                      </div>\n                                    ))}\n                                </td>\n                              </tr>\n                            </tbody>\n                          </table>\n                        </div>\n\n                        {/* タスク提出 */}\n                        <textarea\n                          name=\"messageArea\"\n                          className=\"form\"\n                          placeholder=\"成果物のリンクを添付\"\n                          type=\"text\"\n                          id=\"riward\"\n                          value={outputValue}\n                          onChange={(e) => setOutputValue(e.target.value)}\n                        />\n                        <br></br>\n                        <button\n                          className=\"submitButton\"\n                          onClick={(e) => {\n                            output(indexValue);\n                            console.log(\"id value\", idValue);\n                            addLink(idValue);\n                            setOutput(index);\n                            setOutputValue(\"\");\n                          }}\n                        >\n                          成果物を提出\n                        </button>\n                      </div>\n                    </Modal>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport default Top;\n","// import React, { useEffect, useState } from \"react\";\nimport React from \"react\";\n// ページ遷移用\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\n// import { Link } from 'react-router-dom';\nimport Top from './Top'; //作成したtop.jsを読み込んでいる\nimport Hybrid from './Hybrid';\nimport Fuji from './Fuji';\nimport Sample from './Sample';\nimport Team from './Team';\nimport Alpha from './Alpha';\nimport './App.css';\n// import { ethers } from \"ethers\";\n// ABIのインポート\n// import abi from './utils/CreateTask.json';\n\n// ここから変更したもの\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route exact path=\"/\" element={<Alpha />} />\n        <Route exact path=\"/top\" element={<Top />} />\n        <Route exact path=\"/fuji\" element={<Fuji />} />\n        <Route exact path=\"/sample\" element={<Sample />} />\n        <Route exact path=\"/team\" element={<Team />} />\n      </Routes>\n    </BrowserRouter>\n  )\n}\n\n// 前のもの\n\n// const App = () => {\n\n//   // ユーザーのウォレット保存用状態変数\n//   const [currentAccount, setCurrentAccount] = useState(\"\");\n\n//   // メッセージ保存用状態変数\n//   const [contentValue, setContentValue] = useState(\"\")\n\n//   // 期日保存用状態変数\n//   const [dueValue, setDueValue] = useState(\"\")\n\n//   // tasks保存用状態変数\n//   const [allTasks, setAllTasks] = useState([]);\n\n//   // 報酬額保存用状態変数\n//   const [bountyValue, setBountyValue] = useState([]);\n\n\n//   // コントラクトアドレス保存用\n//   const contractAddress = \"0xEcab270B6Dc488686fa3a292D526a182A516c39f\"\n\n//   // ABIの参照\n//   const ContractABI = abi.abi;\n\n//   const getAllTasks = async () => {\n//     const { ethereum } = window;\n\n//     try {\n//       if (ethereum) {\n//         const provider = new ethers.providers.Web3Provider(ethereum);\n//         const signer = provider.getSigner();\n//         const taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n//         const tasks = await taskContract.getAllTasks();\n//         const tasksCleaned = tasks.map(task => {\n//           return {\n//             user: task.user,\n//             due: task.due,\n//             content: task.content,\n//             bounty: task.bounty,\n//             done: task.done\n//           };\n//         });\n//         setAllTasks(tasksCleaned);\n//       } else {\n//         console.log(\"Ethereum object doesn't exist!\");\n//       }\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n//   // タスク登録時イベント\n//   useEffect(() => {\n//     let taskContract;\n\n//     const onNewTask = (user, due, content, bounty, done) => {\n//       console.log(\"NewTask\", user, due, content, bounty, done);\n//       // alert(`「${content}」を登録しました。頑張りましょう🔥🚀`);\n//       setAllTasks(prevState => [\n//         ...prevState,\n//         {\n//           user: user,\n//           due: due,\n//           content: content,\n//           bounty: bounty,\n//           done: done\n//         },\n//       ]);\n//     };\n\n//     if (window.ethereum) {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const signer = provider.getSigner();\n\n//       taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n//       taskContract.on(\"NewTask\", onNewTask);\n//     }\n\n//     return () => {\n//       if (taskContract) {\n//         taskContract.off(\"NewTask\", onNewTask);\n//       }\n//     };\n//   }, []);\n\n//   // タスク完了時イベント\n//   useEffect(() => {\n//     let taskContract;\n\n//     const onDoneTask = (user, index) => {\n//       console.log(\"Done.\", user, index);\n//     };\n//     // alert(`タスク完了おめでとうございます！🔥🚀`);\n\n//     if (window.ethereum) {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const signer = provider.getSigner();\n\n//       taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n//       taskContract.on(\"DoneTask\", onDoneTask);\n//     }\n\n//     return () => {\n//       if (taskContract) {\n//         taskContract.off(\"DoneTask\", onDoneTask);\n//       }\n//     };\n//   }, []);\n\n//   console.log(\"currentAccount: \", currentAccount);\n\n//   const checkIfWalletIsConnected = async () => {\n//     try {\n//       const { ethereum } = window;\n//       if (!ethereum) {\n//         console.log(\"Make sure you have metamask!\");\n//       } else {\n//         console.log(\"We have the ethreum object\", ethereum);\n//       }\n//       // サイトにきたユーザーのアカウントを格納できる（複数格納可能のためaccountsと表記）\n//       const accounts = await ethereum.request({ method: \"eth_accounts\" });\n//       if (accounts.length !== 0) {\n//         const account = accounts[0];\n//         console.log(\"Found an authorized account:\", account);\n//         setCurrentAccount(account)\n//         getAllTasks();\n//       } else {\n//         console.log(\"No authorized account found\")\n//       }\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   }\n\n//   const connectWallet = async () => {\n//     try {\n//       const { ethereum } = window;\n//       if (!ethereum) {\n//         alert(\"Get MetaMask!\");\n//         return;\n//       }\n//       const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n//       console.log(\"Connected: \", accounts[0]);\n//     } catch (error) {\n//       console.log(error)\n//     }\n//   }\n\n//   // task生成\n//   const task = async () => {\n//     try {\n//       const { ethereum } = window;\n//       if (ethereum) {\n//         const provider = new ethers.providers.Web3Provider(ethereum);\n//         const signer = provider.getSigner();\n//         const taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n\n//         // 最終追記分\n//         let contractBalance = await provider.getBalance(\n//           taskContract.address\n//         );\n\n//         // ETH送るコントラクト\n//         console.log(\n//           \"Contract balance:\",\n//           ethers.utils.formatEther(contractBalance)\n//         );\n\n//         // トランザクションへの書き込み\n//         const options = { value: ethers.utils.parseEther(bountyValue) }\n//         const taskTxn = await taskContract.createTask(currentAccount, dueValue, contentValue, options)\n//         console.log(\"Mining...\", taskTxn.hash);\n//         await taskTxn.wait();\n//         console.log(\"Mined -- \", taskTxn.hash);\n//       } else {\n//         console.log(\"Ethereum object doesn't exist!\");\n//       }\n//     } catch (error) {\n//       console.log(error)\n//     }\n//   };\n\n//   // task完了\n//   const done = async (index) => {\n//     console.log(index)\n//     if (allTasks[index].done !== false) {\n//       alert(`「${allTasks[index].content}」は既に完了しています、別のタスクを探してみてね🚀`);\n//     }\n//     try {\n//       const { ethereum } = window;\n//       if (ethereum) {\n//         const provider = new ethers.providers.Web3Provider(ethereum);\n//         const signer = provider.getSigner();\n//         const taskContract = new ethers.Contract(contractAddress, ContractABI, signer);\n\n//         // 完了前のコントラクトの資金量確認\n//         let contractBalance = await provider.getBalance(\n//           taskContract.address\n//         );\n//         console.log(\n//           \"Contract balance:\",\n//           ethers.utils.formatEther(contractBalance)\n//         );\n\n//         // トランザクションへの書き込み\n//         const taskTxn = await taskContract.sendRiward(index)\n//         console.log(\"Mining...\", taskTxn.hash);\n//         await taskTxn.wait();\n//         console.log(\"Mined -- \", taskTxn.hash);\n\n//         // 完了後のコントラクトの資金量確認\n//         console.log(\n//           \"Contract balance:\",\n//           ethers.utils.formatEther(contractBalance)\n//         );\n\n//       } else {\n//         console.log(\"Ethereum object doesn't exist!\");\n//       }\n//     } catch (error) {\n//       console.log(error)\n//     }\n//   };\n\n\n//   useEffect(() => {\n//     checkIfWalletIsConnected();\n//   }, [])\n//   return (\n//     <BrowserRouter>\n//       <Routes>\n//         {/* <Route exact path=\"/\" element={<Top />} /> */}\n//         <Route exact path=\"/top\" element={<Top />} />\n//       </Routes>\n//       <div className=\"mainContainer\">\n//         <div className=\"dataContainer\">\n//           <div className=\"header\">\n//             <span role=\"img\" aria-label=\"hand-wave\">🚀</span> Task Manager\n//           </div>\n//           <div className=\"bio\">\n//             タスクを管理しよう！🔥🚀\n//           </div>\n//           <br />\n//           {!currentAccount && (\n//             <button className=\"waveButton\" onClick={connectWallet}>\n//               Connect Wallet\n//             </button>\n//           )}\n\n//           {currentAccount && (\n//             <button className=\"waveButton\" onClick={connectWallet}>\n//               Wallet Connected\n//             </button>\n//           )}\n\n//           {currentAccount && (\n//             <button className=\"waveButton\" onClick={task}>\n//               タスクを作成する\n//             </button>)}\n\n//           {currentAccount && (<textarea name=\"messageArea\"\n//             placeholder=\"タスクを記入してください\"\n//             type=\"text\"\n//             id=\"message\"\n//             value={contentValue}\n//             onChange={e => setContentValue(e.target.value)} />)\n//           }\n\n//           {currentAccount && (<textarea name=\"messageArea\"\n//             placeholder=\"期日を記入してください\"\n//             type=\"text\"\n//             id=\"message\"\n//             value={dueValue}\n//             onChange={e => setDueValue(e.target.value)} />)\n//           }\n\n//           {currentAccount && (<textarea name=\"messageArea\"\n//             placeholder=\"タスクの報酬額(eth単位)を記入してください\"\n//             type=\"text\"\n//             id=\"message\"\n//             value={bountyValue}\n//             onChange={e => setBountyValue(e.target.value)} />)\n//           }\n\n//           <Link to={`/top`}>Go To top</Link>\n\n\n//           {currentAccount && (\n//             allTasks.slice(0).map((task, index) => {\n//               return (\n//                 <div key={index} style={{ backgroundColor: \"#F8F8FF\", marginTop: \"16px\", padding: \"8px\" }}>\n//                   <div>担当者: {task.user}</div>\n//                   <div>期日: {task.due.toString()}</div>\n//                   <div>タスク: {task.content}</div>\n//                   {/* <div>bounty: {task.bounty.toString()}Wei</div> */}\n//                   <div>報酬: {ethers.utils.formatEther(task.bounty)}ether</div>\n//                   <div>完了: {task.done.toString()}</div>\n//                   <button className=\"waveButton\" onClick={null}>詳細</button>\n//                   <button className=\"waveButton\" onClick={() => done(index)}>提出</button>\n//                 </div>)\n//             })\n//           )}\n//         </div>\n//       </div>\n//     </BrowserRouter>\n//   );\n// }\n\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}